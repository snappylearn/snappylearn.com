{"file_contents":{"GOOGLE_AUTH_SETUP.md":{"content":"# Google Authentication Setup for SnappyLearn\n\n## Current Supabase Project Details\n- **Supabase URL**: `https://ptlhykwgdidqgaimaxcj.supabase.co`\n- **Project Reference**: `ptlhykwgdidqgaimaxcj`\n- **Dashboard**: https://supabase.com/dashboard/project/ptlhykwgdidqgaimaxcj\n\n## Steps to Enable Google Authentication\n\n### 1. Set up Google OAuth in Supabase Dashboard\n1. Go to: https://supabase.com/dashboard/project/ptlhykwgdidqgaimaxcj/auth/providers\n2. Find \"Google\" in the providers list and enable it\n3. You'll need these Google OAuth credentials:\n   - **Client ID**: `559650623795-agqubhoo2gsalqluntni3gf943s5dtca.apps.googleusercontent.com`\n   - **Client Secret**: (You'll need to provide this)\n\n### 2. Configure Google Cloud Console\n1. Go to Google Cloud Console: https://console.cloud.google.com/\n2. Create or select your project\n3. Enable Google+ API\n4. Create OAuth 2.0 credentials\n5. Add these authorized redirect URIs:\n   ```\n   https://ptlhykwgdidqgaimaxcj.supabase.co/auth/v1/callback\n   https://your-domain.replit.app/auth/callback (for production)\n   ```\n\n### 3. Current Environment Variables\nThe app is currently configured with:\n- `GOOGLE_CLIENT_ID`: Already set in environment\n- `GOOGLE_CLIENT_SECRET`: Needs to be provided\n- `VITE_GOOGLE_CLIENT_ID`: Already configured for frontend\n\n### 4. Test the Setup\nOnce configured, users can:\n- Sign up with Google from the landing page\n- Sign in with existing Google accounts\n- The system will automatically create user profiles in the database\n- Admin users can access the admin portal\n\n## Troubleshooting Authentication Issues\nThe recent authentication errors were due to database schema mismatches. These have been fixed:\n- Updated upsertUser method to handle existing users properly\n- Fixed user schema to match database structure\n- Improved error handling for duplicate key constraints\n\n## Next Steps\n1. Provide the Google Client Secret\n2. Enable Google provider in Supabase dashboard\n3. Test Google authentication flow\n4. Verify admin portal access with promoted user accounts","size_bytes":2039},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# SnappyLearn - Document Management & AI Chat Application\n\n## Overview\nSnappyLearn is a full-stack document management application with AI-powered chat capabilities. It allows users to create document collections, upload various file types (text, PDF, Markdown, CSV, Word docs), and engage in intelligent conversations with an AI assistant. The AI can reference and analyze uploaded documents for context-aware responses. The project aims to provide both independent chat conversations and collection-based conversations that leverage document context, with a vision towards becoming a community-focused social learning platform.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter\n- **State Management**: TanStack Query\n- **UI Components**: Radix UI primitives with shadcn/ui design system\n- **Styling**: Tailwind CSS with CSS variables\n- **Build Tool**: Vite\n- **UI/UX Decisions**: Responsive design, mobile-first approach, dashboard for collections and conversations, drag-and-drop file upload, clean chat interface with source attribution, consistent SnappyLearn branding with purple gradient colors and custom logo. Unified `CommunityLayout` for specific pages while preserving original home page design.\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM, hosted on Neon (serverless)\n- **AI Integration**: OpenAI GPT-4o\n- **File Handling**: Multer for in-memory file uploads, with automatic text extraction from supported file types.\n- **Session Management**: PostgreSQL-based sessions.\n- **System Design Choices**: Relational database schema for Users, Collections, Documents, Conversations, Messages. Supports user authentication, document collections, AI chat with source attribution, and conversation history. Artifacts (educational tools, interactive content) are integrated and persisted within chat conversations. Stateless backend design for scalability.\n\n### Technical Implementations\n- **Document Management**: Supports various file types, collection-based organization, content extraction for AI.\n- **AI Chat System**: Offers independent and collection-based chat, source attribution in AI responses, persistent conversation history.\n- **Authentication**: Replit OpenID Connect authentication with PostgreSQL-based session storage.\n- **Artifacts**: Dedicated `artifacts` table in DB, `artifacts` page with browse and create functionality. Educational tools like Code Playground, Math Visualizer, Quiz Builder are integrated. Artifacts can be embedded and managed within chat messages.\n- **Layout System**: UnifiedLayout component provides consistent header and sidebar structure across all pages. Header uses full-width container with centered content layout. Body sections use max-width centered container with auto margins for consistent alignment. Left sidebar maintains standard width across all pages.\n\n## External Dependencies\n\n### Core Dependencies\n- **OpenAI**: Used for GPT-4o model for AI responses and conversation generation.\n- **Neon Database**: Serverless PostgreSQL hosting.\n- **Drizzle ORM**: Type-safe database operations.\n- **TanStack Query**: Server state management and caching.\n- **Radix UI**: Accessible component primitives.\n- **PostHog**: React SDK integration for analytics and event tracking.\n\n### Development Tools\n- **Vite**: Build tool.\n- **TypeScript**: For type safety.\n- **Tailwind CSS**: Utility-first styling.\n- **ESBuild**: Fast JavaScript bundling.","size_bytes":3644},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"test_google_oauth.sh":{"content":"#!/bin/bash\n\necho \"=== Testing Google OAuth Integration ===\"\necho\n\n# Test 1: Check if backend endpoint exists\necho \"1. Testing backend endpoint availability...\"\ncurl -s -o /dev/null -w \"%{http_code}\" http://localhost:5000/api/auth/google -X POST -H \"Content-Type: application/json\" -d '{\"test\": \"data\"}' | grep -q \"405\\|400\" && echo \"✓ Endpoint exists\" || echo \"✗ Endpoint not available\"\n\n# Test 2: Test with valid JWT credential for existing user\necho \"2. Testing with existing user (test@example.com)...\"\nCREDENTIAL=$(node -e \"\nconst header = Buffer.from(JSON.stringify({\n  alg: 'RS256',\n  kid: 'a43429e8b13f5e0d7a5975d45475df28aa221b25',\n  typ: 'JWT'\n})).toString('base64');\n\nconst payload = Buffer.from(JSON.stringify({\n  iss: 'accounts.google.com',\n  azp: '559650623795-agqubhoo2gsalqluntni3gf943s5dtca.apps.googleusercontent.com',\n  aud: '559650623795-agqubhoo2gsalqluntni3gf943s5dtca.apps.googleusercontent.com',\n  sub: '107055789671328899999',\n  email: 'test@example.com',\n  email_verified: true,\n  at_hash: 'eRyF8DbPQlA1HEEK5ECbUA',\n  name: 'Test User',\n  picture: 'https://example.com/avatar.jpg',\n  given_name: 'Test',\n  family_name: 'User',\n  locale: 'en',\n  iat: Math.floor(Date.now() / 1000),\n  exp: Math.floor(Date.now() / 1000) + 3600,\n  jti: 'a1b2c3d4e5f6g7h8i9j0k1l2'\n})).toString('base64');\n\nconsole.log(header + '.' + payload + '.dummy_signature');\n\")\n\nRESPONSE=$(curl -s -X POST -H \"Content-Type: application/json\" -d \"{\\\"credential\\\":\\\"$CREDENTIAL\\\"}\" http://localhost:5000/api/auth/google)\necho \"$RESPONSE\" | grep -q \"access_token\" && echo \"✓ Existing user authentication successful\" || echo \"✗ Existing user authentication failed\"\n\n# Test 3: Check user data structure\necho \"3. Testing user data structure...\"\necho \"$RESPONSE\" | grep -q \"\\\"id\\\":\" && echo \"✓ User ID present\" || echo \"✗ User ID missing\"\necho \"$RESPONSE\" | grep -q \"\\\"email\\\":\" && echo \"✓ Email present\" || echo \"✗ Email missing\"\necho \"$RESPONSE\" | grep -q \"\\\"access_token\\\":\" && echo \"✓ Access token present\" || echo \"✗ Access token missing\"\n\n# Test 4: Check if Google OAuth button configuration exists\necho \"4. Testing frontend Google OAuth configuration...\"\ncurl -s http://localhost:5000 | grep -q \"559650623795-agqubhoo2gsalqluntni3gf943s5dtca.apps.googleusercontent.com\" && echo \"✓ Google Client ID configured\" || echo \"✗ Google Client ID missing\"\n\necho\necho \"=== Google OAuth Integration Test Complete ===\"","size_bytes":2424},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth-config.ts":{"content":"import { supabase } from \"./lib/supabase\";\n\n// Helper function to configure Supabase for development\nexport async function configureSupabaseForDevelopment() {\n  try {\n    // Note: Auth settings are typically configured in the Supabase dashboard\n    // For development, we'll handle email confirmation in the signup process\n    console.log('Supabase auth configured for development mode');\n  } catch (error) {\n    console.warn('Auth configuration warning:', error);\n  }\n}\n\n// Helper function to auto-confirm users for development\nexport async function autoConfirmUser(userId: string) {\n  try {\n    const { error } = await supabase.auth.admin.updateUserById(userId, {\n      email_confirm: true,\n    });\n    \n    if (error) {\n      console.warn('Could not auto-confirm user:', error.message);\n    } else {\n      console.log('User auto-confirmed for development');\n    }\n  } catch (error) {\n    console.warn('Auto-confirm warning:', error);\n  }\n}","size_bytes":942},"server/auth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4220},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// Make Supabase environment variables available for Vite\nprocess.env.VITE_SUPABASE_URL = process.env.SUPABASE_URL;\nprocess.env.VITE_SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2106},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy as OpenIDStrategy, type VerifyFunction } from \"openid-client/passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { Strategy as GitHubStrategy } from \"passport-github2\";\nimport { Strategy as FacebookStrategy } from \"passport-facebook\";\nimport { Strategy as TwitterStrategy } from \"passport-twitter\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport bcrypt from \"bcryptjs\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  userInfo: any,\n  provider: string = 'replit'\n) {\n  let userId: string;\n  let email: string;\n  let firstName: string | null = null;\n  let lastName: string | null = null;\n  let profileImageUrl: string | null = null;\n\n  // Handle different provider data formats\n  switch (provider) {\n    case 'replit':\n      userId = userInfo[\"sub\"];\n      email = userInfo[\"email\"];\n      firstName = userInfo[\"first_name\"];\n      lastName = userInfo[\"last_name\"];\n      profileImageUrl = userInfo[\"profile_image_url\"];\n      break;\n    case 'google':\n      userId = `google_${userInfo.id}`;\n      email = userInfo.emails?.[0]?.value || userInfo.email;\n      firstName = userInfo.name?.givenName;\n      lastName = userInfo.name?.familyName;\n      profileImageUrl = userInfo.photos?.[0]?.value;\n      break;\n    case 'github':\n      userId = `github_${userInfo.id}`;\n      email = userInfo.emails?.[0]?.value || userInfo.email;\n      firstName = userInfo.displayName?.split(' ')[0] || userInfo.username;\n      lastName = userInfo.displayName?.split(' ').slice(1).join(' ') || null;\n      profileImageUrl = userInfo.photos?.[0]?.value || userInfo.avatar_url;\n      break;\n    case 'facebook':\n      userId = `facebook_${userInfo.id}`;\n      email = userInfo.emails?.[0]?.value || userInfo.email;\n      firstName = userInfo.name?.givenName || userInfo.first_name;\n      lastName = userInfo.name?.familyName || userInfo.last_name;\n      profileImageUrl = userInfo.photos?.[0]?.value;\n      break;\n    case 'twitter':\n      userId = `twitter_${userInfo.id}`;\n      email = userInfo.emails?.[0]?.value || userInfo.email;\n      firstName = userInfo.displayName?.split(' ')[0] || userInfo.username;\n      lastName = userInfo.displayName?.split(' ').slice(1).join(' ') || null;\n      profileImageUrl = userInfo.photos?.[0]?.value;\n      break;\n    case 'local':\n      userId = `local_${userInfo.email}`;\n      email = userInfo.email;\n      firstName = userInfo.firstName;\n      lastName = userInfo.lastName;\n      break;\n    default:\n      throw new Error(`Unsupported provider: ${provider}`);\n  }\n\n  await storage.upsertUser({\n    id: userId,\n    email,\n    firstName,\n    lastName,\n    profileImageUrl,\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Replit OpenID Connect Strategy\n  if (process.env.REPLIT_DOMAINS) {\n    const config = await getOidcConfig();\n\n    const verify: VerifyFunction = async (\n      tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n      verified: passport.AuthenticateCallback\n    ) => {\n      const user = { provider: 'replit' };\n      updateUserSession(user, tokens);\n      await upsertUser(tokens.claims(), 'replit');\n      verified(null, user);\n    };\n\n    for (const domain of process.env.REPLIT_DOMAINS.split(\",\")) {\n      const strategy = new OpenIDStrategy(\n        {\n          name: `replitauth:${domain}`,\n          config,\n          scope: \"openid email profile offline_access\",\n          callbackURL: `https://${domain}/api/auth/replit/callback`,\n        },\n        verify,\n      );\n      passport.use(strategy);\n    }\n  }\n\n  // Google OAuth Strategy\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    passport.use(new GoogleStrategy({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL: \"/api/auth/google/callback\"\n    }, async (accessToken, refreshToken, profile, done) => {\n      try {\n        await upsertUser(profile, 'google');\n        done(null, { provider: 'google', profile });\n      } catch (error) {\n        done(error);\n      }\n    }));\n  }\n\n  // GitHub OAuth Strategy\n  if (process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET) {\n    passport.use(new GitHubStrategy({\n      clientID: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\n      callbackURL: \"/api/auth/github/callback\"\n    }, async (accessToken: any, refreshToken: any, profile: any, done: any) => {\n      try {\n        await upsertUser(profile, 'github');\n        done(null, { provider: 'github', profile });\n      } catch (error) {\n        done(error);\n      }\n    }));\n  }\n\n  // Facebook OAuth Strategy\n  if (process.env.FACEBOOK_CLIENT_ID && process.env.FACEBOOK_CLIENT_SECRET) {\n    passport.use(new FacebookStrategy({\n      clientID: process.env.FACEBOOK_CLIENT_ID,\n      clientSecret: process.env.FACEBOOK_CLIENT_SECRET,\n      callbackURL: \"/api/auth/facebook/callback\",\n      profileFields: ['id', 'emails', 'name', 'picture']\n    }, async (accessToken: any, refreshToken: any, profile: any, done: any) => {\n      try {\n        await upsertUser(profile, 'facebook');\n        done(null, { provider: 'facebook', profile });\n      } catch (error) {\n        done(error);\n      }\n    }));\n  }\n\n  // Twitter OAuth Strategy\n  if (process.env.TWITTER_CONSUMER_KEY && process.env.TWITTER_CONSUMER_SECRET) {\n    passport.use(new TwitterStrategy({\n      consumerKey: process.env.TWITTER_CONSUMER_KEY,\n      consumerSecret: process.env.TWITTER_CONSUMER_SECRET,\n      callbackURL: \"/api/auth/twitter/callback\",\n      includeEmail: true\n    }, async (token: any, tokenSecret: any, profile: any, done: any) => {\n      try {\n        await upsertUser(profile, 'twitter');\n        done(null, { provider: 'twitter', profile });\n      } catch (error) {\n        done(error);\n      }\n    }));\n  }\n\n  // Local Strategy (Email/Password)\n  passport.use(new LocalStrategy({\n    usernameField: 'email',\n    passwordField: 'password'\n  }, async (email, password, done) => {\n    try {\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.passwordHash) {\n        return done(null, false, { message: 'Invalid credentials' });\n      }\n      \n      const isValid = await bcrypt.compare(password, user.passwordHash);\n      if (!isValid) {\n        return done(null, false, { message: 'Invalid credentials' });\n      }\n      \n      done(null, { provider: 'local', profile: user });\n    } catch (error) {\n      done(error);\n    }\n  }));\n\n  passport.serializeUser((user: any, cb) => cb(null, user));\n  passport.deserializeUser((user: any, cb) => cb(null, user));\n\n  // Authentication routes\n  setupAuthRoutes(app);\n}\n\nfunction setupAuthRoutes(app: Express) {\n  // Replit Auth Routes\n  if (process.env.REPLIT_DOMAINS) {\n    app.get(\"/api/auth/replit\", (req, res, next) => {\n      passport.authenticate(`replitauth:${req.hostname}`, {\n        prompt: \"login consent\",\n        scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n      })(req, res, next);\n    });\n\n    app.get(\"/api/auth/replit/callback\", (req, res, next) => {\n      passport.authenticate(`replitauth:${req.hostname}`, {\n        successReturnToOrRedirect: \"/\",\n        failureRedirect: \"/auth?error=replit_failed\",\n      })(req, res, next);\n    });\n  }\n\n  // Google Auth Routes\n  app.get(\"/api/auth/google\", \n    passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] })\n  );\n\n  app.get(\"/api/auth/google/callback\", \n    passport.authenticate(\"google\", { \n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/auth?error=google_failed\" \n    })\n  );\n\n  // GitHub Auth Routes\n  app.get(\"/api/auth/github\", \n    passport.authenticate(\"github\", { scope: [\"user:email\"] })\n  );\n\n  app.get(\"/api/auth/github/callback\", \n    passport.authenticate(\"github\", { \n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/auth?error=github_failed\" \n    })\n  );\n\n  // Facebook Auth Routes\n  app.get(\"/api/auth/facebook\", \n    passport.authenticate(\"facebook\", { scope: [\"email\"] })\n  );\n\n  app.get(\"/api/auth/facebook/callback\", \n    passport.authenticate(\"facebook\", { \n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/auth?error=facebook_failed\" \n    })\n  );\n\n  // Twitter Auth Routes\n  app.get(\"/api/auth/twitter\", \n    passport.authenticate(\"twitter\")\n  );\n\n  app.get(\"/api/auth/twitter/callback\", \n    passport.authenticate(\"twitter\", { \n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/auth?error=twitter_failed\" \n    })\n  );\n\n  // Local Auth Routes (Email/Password)\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      // Hash password\n      const passwordHash = await bcrypt.hash(password, 12);\n      \n      // Create user\n      const user = await storage.createUser({\n        id: `local_${email}`,\n        email,\n        firstName,\n        lastName,\n        passwordHash,\n        emailVerified: false,\n      });\n\n      // Log user in\n      req.login({ provider: 'local', profile: user }, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Registration successful but login failed\" });\n        }\n        res.json({ message: \"Registration successful\", user });\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", \n    passport.authenticate(\"local\", { \n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/auth?error=login_failed\" \n    })\n  );\n\n  // Logout route\n  app.get(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.redirect(\"/\");\n    });\n  });\n\n  // Legacy routes for backward compatibility\n  app.get(\"/api/login\", (req, res) => {\n    res.redirect(\"/api/auth/replit\");\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    res.redirect(\"/api/auth/logout\");\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  // Handle Replit authentication with token refresh\n  if (user.provider === 'replit' && user.expires_at) {\n    const now = Math.floor(Date.now() / 1000);\n    if (now <= user.expires_at) {\n      return next();\n    }\n\n    const refreshToken = user.refresh_token;\n    if (!refreshToken) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    try {\n      const config = await getOidcConfig();\n      const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n      updateUserSession(user, tokenResponse);\n      return next();\n    } catch (error) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n  }\n\n  // Handle other OAuth providers (Google, GitHub, Facebook, Twitter) and local auth\n  if (user.provider && (user.profile || user.provider === 'local')) {\n    return next();\n  }\n\n  return res.status(401).json({ message: \"Unauthorized\" });\n};","size_bytes":12873},"server/routes-old.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertCollectionSchema, \n  insertDocumentSchema, \n  insertConversationSchema, \n  insertMessageSchema \n} from \"@shared/schema\";\nimport { generateIndependentResponse, generateCollectionResponse, generateConversationTitle } from \"./services/openai\";\nimport multer from \"multer\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Accept text files and PDFs\n    const allowedTypes = ['text/plain', 'text/markdown', 'application/pdf', 'text/csv'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Unsupported file type'));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Collections endpoints\n  app.get(\"/api/collections\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const collections = await storage.getCollections(userId);\n      res.json(collections);\n    } catch (error) {\n      console.error(\"Error fetching collections:\", error);\n      res.status(500).json({ error: \"Failed to fetch collections\" });\n    }\n  });\n\n  app.get(\"/api/collections/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const collection = await storage.getCollection(id, DEMO_USER_ID);\n      \n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n\n      res.json(collection);\n    } catch (error) {\n      console.error(\"Error fetching collection:\", error);\n      res.status(500).json({ error: \"Failed to fetch collection\" });\n    }\n  });\n\n  app.post(\"/api/collections\", async (req, res) => {\n    try {\n      const validatedData = insertCollectionSchema.parse({\n        ...req.body,\n        userId: DEMO_USER_ID,\n      });\n      \n      const collection = await storage.createCollection(validatedData);\n      res.status(201).json(collection);\n    } catch (error) {\n      console.error(\"Error creating collection:\", error);\n      res.status(400).json({ error: \"Failed to create collection\" });\n    }\n  });\n\n  app.delete(\"/api/collections/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteCollection(id, DEMO_USER_ID);\n      \n      if (!deleted) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting collection:\", error);\n      res.status(500).json({ error: \"Failed to delete collection\" });\n    }\n  });\n\n  // Documents endpoints\n  app.get(\"/api/collections/:id/documents\", async (req, res) => {\n    try {\n      const collectionId = parseInt(req.params.id);\n      const collection = await storage.getCollection(collectionId, DEMO_USER_ID);\n      \n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n\n      const documents = await storage.getDocuments(collectionId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ error: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.post(\"/api/collections/:id/documents\", upload.single('file'), async (req, res) => {\n    try {\n      const collectionId = parseInt(req.params.id);\n      const collection = await storage.getCollection(collectionId, DEMO_USER_ID);\n      \n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const validatedData = insertDocumentSchema.parse({\n        name: req.file.originalname,\n        content: req.file.buffer.toString('utf-8'),\n        mimeType: req.file.mimetype,\n        size: req.file.size,\n        collectionId,\n      });\n      \n      const document = await storage.createDocument(validatedData);\n      res.status(201).json(document);\n    } catch (error) {\n      console.error(\"Error uploading document:\", error);\n      res.status(400).json({ error: \"Failed to upload document\" });\n    }\n  });\n\n  app.delete(\"/api/documents/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteDocument(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ error: \"Document not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting document:\", error);\n      res.status(500).json({ error: \"Failed to delete document\" });\n    }\n  });\n\n  // Conversations endpoints\n  app.get(\"/api/conversations\", async (req, res) => {\n    try {\n      const conversations = await storage.getConversations(DEMO_USER_ID);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ error: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.get(\"/api/conversations/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const conversation = await storage.getConversation(id, DEMO_USER_ID);\n      \n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n\n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Error fetching conversation:\", error);\n      res.status(500).json({ error: \"Failed to fetch conversation\" });\n    }\n  });\n\n  app.post(\"/api/conversations\", async (req, res) => {\n    try {\n      const { message, collectionId, type } = req.body;\n\n      if (!message || !type) {\n        return res.status(400).json({ error: \"Message and type are required\" });\n      }\n\n      // Generate conversation title\n      const title = await generateConversationTitle(message);\n\n      // Create conversation\n      const validatedConversation = insertConversationSchema.parse({\n        title,\n        type,\n        collectionId: collectionId || null,\n        userId: DEMO_USER_ID,\n      });\n      \n      const conversation = await storage.createConversation(validatedConversation);\n\n      // Create user message\n      const userMessage = await storage.createMessage({\n        content: message,\n        role: \"user\",\n        conversationId: conversation.id,\n        sources: null,\n      });\n\n      // Generate AI response\n      let aiResponse;\n      if (type === \"collection\" && collectionId) {\n        const documents = await storage.getDocuments(collectionId);\n        const collection = await storage.getCollection(collectionId, DEMO_USER_ID);\n        aiResponse = await generateCollectionResponse(message, documents, collection?.name || \"Collection\");\n      } else {\n        aiResponse = await generateIndependentResponse(message);\n      }\n\n      // Create AI message\n      const aiMessage = await storage.createMessage({\n        content: aiResponse.content,\n        role: \"assistant\",\n        conversationId: conversation.id,\n        sources: aiResponse.sources || null,\n      });\n\n      res.status(201).json({\n        conversation,\n        messages: [userMessage, aiMessage],\n      });\n    } catch (error) {\n      console.error(\"Error creating conversation:\", error);\n      res.status(500).json({ error: \"Failed to create conversation\" });\n    }\n  });\n\n  // Messages endpoints\n  app.get(\"/api/conversations/:id/messages\", async (req, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const conversation = await storage.getConversation(conversationId, DEMO_USER_ID);\n      \n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n\n      const messages = await storage.getMessages(conversationId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ error: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/conversations/:id/messages\", async (req, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const { content } = req.body;\n\n      if (!content) {\n        return res.status(400).json({ error: \"Message content is required\" });\n      }\n\n      const conversation = await storage.getConversation(conversationId, DEMO_USER_ID);\n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n\n      // Create user message\n      const userMessage = await storage.createMessage({\n        content,\n        role: \"user\",\n        conversationId,\n        sources: null,\n      });\n\n      // Generate AI response\n      let aiResponse;\n      if (conversation.type === \"collection\" && conversation.collectionId) {\n        const documents = await storage.getDocuments(conversation.collectionId);\n        const collection = await storage.getCollection(conversation.collectionId, DEMO_USER_ID);\n        aiResponse = await generateCollectionResponse(content, documents, collection?.name || \"Collection\");\n      } else {\n        aiResponse = await generateIndependentResponse(content);\n      }\n\n      // Create AI message\n      const aiMessage = await storage.createMessage({\n        content: aiResponse.content,\n        role: \"assistant\",\n        conversationId,\n        sources: aiResponse.sources || null,\n      });\n\n      // Update conversation timestamp\n      await storage.updateConversation(conversationId, {});\n\n      res.status(201).json([userMessage, aiMessage]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      res.status(500).json({ error: \"Failed to send message\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10350},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupSupabaseAuth } from \"./supabaseAuth\";\nimport { setupAuthRoutes, jwtAuth, getJwtUserId } from \"./routes/auth\";\nimport { setupGoogleAuth } from \"./routes/googleAuth\";\nimport { registerAdminRoutes } from \"./routes/admin\";\nimport { \n  insertCollectionSchema, \n  insertDocumentSchema, \n  insertConversationSchema, \n  insertMessageSchema \n} from \"@shared/schema\";\nimport { generateIndependentResponse, generateCollectionResponse, generateConversationTitle } from \"./services/openai\";\nimport { registerPostRoutes } from \"./routes/posts\";\nimport { registerTopicRoutes } from \"./routes/topics\";\nimport { registerFollowRoutes } from \"./routes/follows\";\nimport { seedDatabase } from \"./seed\";\nimport { registerSubscriptionRoutes } from \"./routes/subscription\";\nimport multer from \"multer\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Accept only PDF and TXT files\n    const allowedTypes = [\n      'text/plain',\n      'application/pdf'\n    ];\n    \n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Unsupported file type'));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup Supabase authentication\n  await setupSupabaseAuth(app);\n  \n  // Setup custom auth routes\n  setupAuthRoutes(app);\n  \n  // Setup Google OAuth routes\n  setupGoogleAuth(app);\n\n  // Setup admin routes\n  registerAdminRoutes(app);\n\n  // Setup social platform routes\n  registerPostRoutes(app);\n  registerTopicRoutes(app);\n  registerFollowRoutes(app);\n  \n  // Setup subscription routes\n  registerSubscriptionRoutes(app);\n\n  // Seed database with demo data\n  await seedDatabase();\n\n  // Test route to make current user admin (for development)\n  app.post(\"/api/test/make-admin\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      await storage.updateUserRole(userId, 'admin', 'system');\n      res.json({ message: \"User is now admin\" });\n    } catch (error) {\n      console.error(\"Error making user admin:\", error);\n      res.status(500).json({ error: \"Failed to make user admin\" });\n    }\n  });\n\n  // Auth routes are handled by setupSupabaseAuth\n\n  // Public users endpoint for discover page\n  app.get(\"/api/users\", jwtAuth, async (req: any, res) => {\n    try {\n      // Get all users with their user type info for discover page\n      const users = await storage.getPublicUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  // Collections endpoints\n  app.get(\"/api/collections\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      let collections = await storage.getCollections(userId);\n      \n      // Ensure user has a Personal Collection (default collection)\n      const hasPersonalCollection = collections.some((c: any) => c.isDefault);\n      if (!hasPersonalCollection) {\n        try {\n          await storage.createCollection({\n            name: \"Personal Notebook\",\n            description: \"Your default notebook for saved posts and documents\",\n            userId: userId,\n            privateStatusTypeId: \"private\",\n            isDefault: true,\n          });\n          // Refetch collections to include the newly created Personal Collection\n          collections = await storage.getCollections(userId);\n        } catch (collectionError) {\n          console.error(\"Failed to create Personal Collection:\", collectionError);\n          // Don't fail the request if collection creation fails\n        }\n      }\n      \n      res.json(collections);\n    } catch (error) {\n      console.error(\"Error fetching collections:\", error);\n      res.status(500).json({ error: \"Failed to fetch collections\" });\n    }\n  });\n\n  app.get(\"/api/collections/:id\", jwtAuth, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n      const collection = await storage.getCollection(id, userId);\n      \n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n\n      res.json(collection);\n    } catch (error) {\n      console.error(\"Error fetching collection:\", error);\n      res.status(500).json({ error: \"Failed to fetch collection\" });\n    }\n  });\n\n  app.post(\"/api/collections\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const validatedData = insertCollectionSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const collection = await storage.createCollection(validatedData);\n      res.status(201).json(collection);\n    } catch (error) {\n      console.error(\"Error creating collection:\", error);\n      res.status(500).json({ error: \"Failed to create collection\" });\n    }\n  });\n\n  app.put(\"/api/collections/:id\", jwtAuth, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updates = insertCollectionSchema.partial().parse(req.body);\n      \n      const collection = await storage.updateCollection(id, updates);\n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n      \n      res.json(collection);\n    } catch (error) {\n      console.error(\"Error updating collection:\", error);\n      res.status(500).json({ error: \"Failed to update collection\" });\n    }\n  });\n\n  app.delete(\"/api/collections/:id\", jwtAuth, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n      const success = await storage.deleteCollection(id, userId);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting collection:\", error);\n      res.status(500).json({ error: \"Failed to delete collection\" });\n    }\n  });\n\n  // Document endpoints\n  app.get(\"/api/collections/:id/documents\", jwtAuth, async (req: any, res) => {\n    try {\n      const collectionId = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n      \n      // Verify user owns the collection\n      const collection = await storage.getCollection(collectionId, userId);\n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n      \n      const documents = await storage.getDocuments(collectionId, userId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ error: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.post(\"/api/collections/:id/documents\", jwtAuth, upload.single('file'), async (req: any, res) => {\n    try {\n      const collectionId = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n      \n      // Verify user owns the collection\n      const collection = await storage.getCollection(collectionId, userId);\n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n      \n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      let content = '';\n      \n      // Extract text based on file type\n      if (req.file.mimetype === 'application/pdf') {\n        try {\n          const pdf = await import('pdf-parse');\n          const pdfData = await pdf.default(req.file.buffer);\n          content = pdfData.text;\n        } catch (error) {\n          console.error(\"Error extracting PDF text:\", error);\n          return res.status(400).json({ error: \"Failed to extract text from PDF\" });\n        }\n      } else if (req.file.mimetype === 'text/plain') {\n        content = req.file.buffer.toString('utf-8');\n      } else {\n        return res.status(400).json({ error: \"Unsupported file type\" });\n      }\n\n      const validatedData = insertDocumentSchema.parse({\n        name: req.file.originalname,\n        content,\n        mimeType: req.file.mimetype,\n        size: req.file.size,\n        collectionId,\n      });\n\n      const document = await storage.createDocument(validatedData);\n      res.status(201).json(document);\n    } catch (error) {\n      console.error(\"Error uploading document:\", error);\n      res.status(500).json({ error: \"Failed to upload document\" });\n    }\n  });\n\n  app.delete(\"/api/documents/:id\", jwtAuth, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n      \n      const success = await storage.deleteDocument(id, userId);\n      if (!success) {\n        return res.status(404).json({ error: \"Document not found or access denied\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting document:\", error);\n      res.status(500).json({ error: \"Failed to delete document\" });\n    }\n  });\n\n  // Conversations endpoints\n  app.get(\"/api/conversations\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const conversations = await storage.getConversations(userId);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ error: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.get(\"/api/conversations/:id\", jwtAuth, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n      const conversation = await storage.getConversation(id, userId);\n      \n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n      \n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Error fetching conversation:\", error);\n      res.status(500).json({ error: \"Failed to fetch conversation\" });\n    }\n  });\n\n  // Update multer configuration to support more file types\n  const conversationUpload = multer({\n    storage: multer.memoryStorage(),\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      const allowedTypes = [\n        'text/plain',\n        'text/markdown',\n        'text/csv',\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      ];\n      \n      if (allowedTypes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error('Unsupported file type'));\n      }\n    },\n  });\n\n  app.post(\"/api/conversations\", jwtAuth, conversationUpload.array('attachments'), async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const { message, type, collectionId } = req.body;\n      const files = req.files as Express.Multer.File[] || [];\n\n      // Parse collectionId if it's a string from FormData\n      const parsedCollectionId = collectionId ? parseInt(collectionId) : undefined;\n\n      // Validate collection ownership if provided\n      if (parsedCollectionId) {\n        const collection = await storage.getCollection(parsedCollectionId, userId);\n        if (!collection) {\n          return res.status(404).json({ error: \"Collection not found\" });\n        }\n      }\n\n      // Process attached files if any\n      let attachmentContent = \"\";\n      if (files.length > 0) {\n        const attachmentParts: string[] = [];\n        \n        for (const file of files) {\n          let content = \"\";\n          \n          // Extract text based on file type\n          if (file.mimetype === 'application/pdf') {\n            try {\n              const pdf = await import('pdf-parse');\n              const pdfData = await pdf.default(file.buffer);\n              content = pdfData.text;\n            } catch (error) {\n              console.error(\"Error extracting PDF text:\", error);\n              return res.status(400).json({ error: `Failed to extract text from ${file.originalname}` });\n            }\n          } else if (file.mimetype === 'text/plain' || file.mimetype === 'text/markdown' || file.mimetype === 'text/csv') {\n            content = file.buffer.toString('utf-8');\n          } else {\n            return res.status(400).json({ error: `Unsupported file type: ${file.originalname}` });\n          }\n          \n          attachmentParts.push(`--- Content from ${file.originalname} ---\\n${content}\\n`);\n        }\n        \n        attachmentContent = attachmentParts.join('\\n');\n      }\n\n      // Combine message with attachment content\n      const fullMessage = attachmentContent \n        ? `${message}\\n\\n${attachmentContent}` \n        : message;\n\n      // Generate conversation title from first message\n      const title = await generateConversationTitle(message);\n\n      const conversationData = insertConversationSchema.parse({\n        title,\n        type,\n        collectionId: parsedCollectionId,\n        userId,\n      });\n\n      const conversation = await storage.createConversation(conversationData);\n\n      // Create user message\n      const userMessage = await storage.createMessage({\n        content: fullMessage,\n        role: \"user\",\n        conversationId: conversation.id,\n      });\n\n      // Generate AI response\n      let aiResponse;\n      if (type === \"collection\" && parsedCollectionId) {\n        const documents = await storage.getDocuments(parsedCollectionId, userId);\n        const collection = await storage.getCollection(parsedCollectionId, userId);\n        const collectionName = collection?.name || \"Collection\";\n        aiResponse = await generateCollectionResponse(fullMessage, documents, collectionName);\n      } else {\n        const content = await generateIndependentResponse(fullMessage);\n        aiResponse = { content, sources: null };\n      }\n\n      // Ensure aiResponse has content\n      if (!aiResponse || !aiResponse.content) {\n        aiResponse = { content: \"I'm sorry, I couldn't generate a response. Please try again.\", sources: null };\n      }\n\n      // Check if response contains artifact\n      const artifactMatch = aiResponse.content.match(/\\[ARTIFACT_START\\]([\\s\\S]*?)\\[ARTIFACT_END\\]/);\n      let artifactData = null;\n      \n      if (artifactMatch) {\n        const artifactHtml = artifactMatch[1];\n        const titleMatch = artifactHtml.match(/<!-- Artifact Title: (.*?) -->/);\n        const title = titleMatch ? titleMatch[1] : 'Interactive Content';\n        \n        // Determine artifact type based on content\n        let artifactType = 'interactive';\n        if (title.toLowerCase().includes('quiz')) artifactType = 'quiz_builder';\n        else if (title.toLowerCase().includes('calculator')) artifactType = 'math_visualizer';\n        else if (title.toLowerCase().includes('playground')) artifactType = 'code_playground';\n        else if (title.toLowerCase().includes('document')) artifactType = 'document_generator';\n        else if (title.toLowerCase().includes('presentation')) artifactType = 'presentation_maker';\n        else if (title.toLowerCase().includes('chart') || title.toLowerCase().includes('graph')) artifactType = 'data_visualizer';\n        else if (title.toLowerCase().includes('mind map')) artifactType = 'mind_map_creator';\n        \n        // Create artifact record\n        const artifact = await storage.createArtifact({\n          title,\n          type: artifactType,\n          content: artifactHtml,\n          userId,\n          collectionId: parsedCollectionId,\n          metadata: JSON.stringify({ \n            createdFrom: 'chat',\n            conversationId: conversation.id\n          })\n        });\n        \n        artifactData = {\n          artifactId: artifact.id,\n          title,\n          type: artifactType\n        };\n      }\n\n      // Create AI message\n      const aiMessage = await storage.createMessage({\n        content: aiResponse.content,\n        role: \"assistant\",\n        conversationId: conversation.id,\n        sources: aiResponse.sources ? JSON.stringify(aiResponse.sources) : null,\n        artifactData: artifactData ? JSON.stringify(artifactData) : null,\n      });\n\n      res.status(201).json({\n        conversation,\n        messages: [userMessage, aiMessage],\n      });\n    } catch (error) {\n      console.error(\"Error creating conversation:\", error);\n      res.status(500).json({ error: \"Failed to create conversation\" });\n    }\n  });\n\n  app.delete(\"/api/conversations/:id\", jwtAuth, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n      const success = await storage.deleteConversation(id, userId);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting conversation:\", error);\n      res.status(500).json({ error: \"Failed to delete conversation\" });\n    }\n  });\n\n  // Messages endpoints\n  app.get(\"/api/conversations/:id/messages\", jwtAuth, async (req: any, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n      \n      // Verify user owns the conversation\n      const conversation = await storage.getConversation(conversationId, userId);\n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n      \n      const messages = await storage.getMessages(conversationId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ error: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/conversations/:id/messages\", jwtAuth, async (req: any, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n      const { content } = req.body;\n\n      // Verify user owns the conversation\n      const conversation = await storage.getConversation(conversationId, userId);\n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n\n      // Create user message\n      const userMessage = await storage.createMessage({\n        content,\n        role: \"user\",\n        conversationId,\n      });\n\n      // Get conversation history for context\n      const existingMessages = await storage.getMessages(conversationId);\n      const conversationHistory = existingMessages.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n\n      // Generate AI response\n      let aiResponse;\n      if (conversation.type === \"collection\" && conversation.collectionId) {\n        const documents = await storage.getDocuments(conversation.collectionId, userId);\n        const collection = await storage.getCollection(conversation.collectionId, userId);\n        const collectionName = collection?.name || \"Collection\";\n        aiResponse = await generateCollectionResponse(content, documents, collectionName, conversationHistory);\n      } else {\n        const responseContent = await generateIndependentResponse(content);\n        aiResponse = { content: responseContent, sources: null };\n      }\n\n      // Ensure aiResponse has content\n      if (!aiResponse || !aiResponse.content) {\n        aiResponse = { content: \"I'm sorry, I couldn't generate a response. Please try again.\", sources: null };\n      }\n\n      // Check if response contains artifact\n      const artifactMatch = aiResponse.content.match(/\\[ARTIFACT_START\\]([\\s\\S]*?)\\[ARTIFACT_END\\]/);\n      let artifactData = null;\n      let artifactId = null;\n      \n      if (artifactMatch) {\n        const artifactHtml = artifactMatch[1];\n        const titleMatch = artifactHtml.match(/<!-- Artifact Title: (.*?) -->/);\n        const title = titleMatch ? titleMatch[1] : 'Interactive Content';\n        \n        // Determine artifact type based on content\n        let artifactType = 'interactive';\n        if (title.toLowerCase().includes('quiz')) artifactType = 'quiz_builder';\n        else if (title.toLowerCase().includes('calculator')) artifactType = 'math_visualizer';\n        else if (title.toLowerCase().includes('playground')) artifactType = 'code_playground';\n        else if (title.toLowerCase().includes('document')) artifactType = 'document_generator';\n        else if (title.toLowerCase().includes('presentation')) artifactType = 'presentation_maker';\n        else if (title.toLowerCase().includes('chart') || title.toLowerCase().includes('graph')) artifactType = 'data_visualizer';\n        else if (title.toLowerCase().includes('mind map')) artifactType = 'mind_map_creator';\n        \n        // Create artifact record\n        const artifact = await storage.createArtifact({\n          title,\n          type: artifactType,\n          content: artifactHtml,\n          userId,\n          collectionId: conversation.collectionId,\n          metadata: JSON.stringify({ \n            createdFrom: 'chat',\n            conversationId: conversationId\n          })\n        });\n        \n        artifactId = artifact.id;\n        artifactData = {\n          artifactId: artifact.id,\n          title,\n          type: artifactType\n        };\n      }\n\n      // Create AI message\n      const aiMessage = await storage.createMessage({\n        content: aiResponse.content,\n        role: \"assistant\",\n        conversationId,\n        sources: aiResponse.sources ? JSON.stringify(aiResponse.sources) : null,\n        artifactData: artifactData ? JSON.stringify(artifactData) : null,\n      });\n\n      res.status(201).json([userMessage, aiMessage]);\n    } catch (error) {\n      console.error(\"Error creating message:\", error);\n      res.status(500).json({ error: \"Failed to create message\" });\n    }\n  });\n\n  // Artifact endpoints\n  app.get(\"/api/artifacts\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const { type, collectionId } = req.query;\n      \n      const filters: any = {};\n      if (type) filters.type = type;\n      if (collectionId) filters.collectionId = parseInt(collectionId);\n      \n      const artifacts = await storage.getArtifacts(userId, filters);\n      res.json(artifacts);\n    } catch (error) {\n      console.error(\"Error fetching artifacts:\", error);\n      res.status(500).json({ error: \"Failed to fetch artifacts\" });\n    }\n  });\n\n  app.get(\"/api/artifacts/:id\", jwtAuth, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n      \n      const artifact = await storage.getArtifact(id, userId);\n      if (!artifact) {\n        return res.status(404).json({ error: \"Artifact not found\" });\n      }\n      \n      res.json(artifact);\n    } catch (error) {\n      console.error(\"Error fetching artifact:\", error);\n      res.status(500).json({ error: \"Failed to fetch artifact\" });\n    }\n  });\n\n  app.post(\"/api/artifacts\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const { title, type, content, description, collectionId, metadata } = req.body;\n      \n      // Validate collection ownership if provided\n      if (collectionId) {\n        const collection = await storage.getCollection(collectionId, userId);\n        if (!collection) {\n          return res.status(404).json({ error: \"Collection not found\" });\n        }\n      }\n      \n      const artifact = await storage.createArtifact({\n        title,\n        type,\n        content,\n        description,\n        collectionId,\n        metadata: metadata ? JSON.stringify(metadata) : null,\n        userId,\n      });\n      \n      res.status(201).json(artifact);\n    } catch (error) {\n      console.error(\"Error creating artifact:\", error);\n      res.status(500).json({ error: \"Failed to create artifact\" });\n    }\n  });\n\n  app.put(\"/api/artifacts/:id\", jwtAuth, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n      const { title, type, content, description, collectionId, metadata } = req.body;\n      \n      // Verify user owns the artifact\n      const existingArtifact = await storage.getArtifact(id, userId);\n      if (!existingArtifact) {\n        return res.status(404).json({ error: \"Artifact not found\" });\n      }\n      \n      // Validate collection ownership if provided\n      if (collectionId) {\n        const collection = await storage.getCollection(collectionId, userId);\n        if (!collection) {\n          return res.status(404).json({ error: \"Collection not found\" });\n        }\n      }\n      \n      const artifact = await storage.updateArtifact(id, {\n        title,\n        type,\n        content,\n        description,\n        collectionId,\n        metadata: metadata ? JSON.stringify(metadata) : null,\n      });\n      \n      res.json(artifact);\n    } catch (error) {\n      console.error(\"Error updating artifact:\", error);\n      res.status(500).json({ error: \"Failed to update artifact\" });\n    }\n  });\n\n  app.delete(\"/api/artifacts/:id\", jwtAuth, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n      \n      const success = await storage.deleteArtifact(id, userId);\n      if (!success) {\n        return res.status(404).json({ error: \"Artifact not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting artifact:\", error);\n      res.status(500).json({ error: \"Failed to delete artifact\" });\n    }\n  });\n\n  // User profile endpoints\n  app.patch(\"/api/users/profile\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const { firstName, lastName, email } = req.body;\n      \n      const updatedUser = await storage.updateUser(userId, {\n        firstName,\n        lastName,\n        email,\n      });\n      \n      if (!updatedUser) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({\n        id: updatedUser.id,\n        email: updatedUser.email,\n        firstName: updatedUser.firstName,\n        lastName: updatedUser.lastName,\n        profileImageUrl: updatedUser.profileImageUrl,\n        role: updatedUser.role,\n        createdAt: updatedUser.createdAt,\n        updatedAt: updatedUser.updatedAt,\n      });\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ error: \"Failed to update profile\" });\n    }\n  });\n\n  app.patch(\"/api/users/settings\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const settings = req.body;\n      \n      // For now, we'll just return success since we don't have a settings table\n      // In a real app, you'd store these in a user_settings table\n      res.json({ success: true, settings });\n    } catch (error) {\n      console.error(\"Error updating settings:\", error);\n      res.status(500).json({ error: \"Failed to update settings\" });\n    }\n  });\n\n  app.get(\"/api/users/export\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      \n      // Get all user data\n      const user = await storage.getUser(userId);\n      const collections = await storage.getCollections(userId);\n      const conversations = await storage.getConversations(userId);\n      const artifacts = await storage.getArtifacts(userId);\n      \n      const exportData = {\n        user: {\n          id: user?.id,\n          email: user?.email,\n          firstName: user?.firstName,\n          lastName: user?.lastName,\n          role: user?.role,\n          createdAt: user?.createdAt,\n        },\n        collections,\n        conversations,\n        artifacts,\n        exportedAt: new Date().toISOString(),\n      };\n      \n      res.json(exportData);\n    } catch (error) {\n      console.error(\"Error exporting user data:\", error);\n      res.status(500).json({ error: \"Failed to export data\" });\n    }\n  });\n\n  app.delete(\"/api/users/account\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      \n      // Delete user and all related data\n      // Note: In production, you might want to soft delete or archive data\n      const deleted = await storage.deleteUser(userId);\n      \n      if (!deleted) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({ success: true, message: \"Account deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting account:\", error);\n      res.status(500).json({ error: \"Failed to delete account\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":28746},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { topics, posts, follows, likes, comments, users, collections, documents } from \"@shared/schema\";\nimport { sql } from \"drizzle-orm\";\n\nexport async function seedDatabase() {\n  try {\n    console.log(\"Seeding database with demo data...\");\n\n    // First, seed topics\n    const defaultTopics = [\n      { name: \"AI & Machine Learning\", slug: \"ai-machine-learning\", color: \"#8B5CF6\", icon: \"Brain\" },\n      { name: \"Technology & Programming\", slug: \"technology-programming\", color: \"#3B82F6\", icon: \"Code\" },\n      { name: \"Business & Entrepreneurship\", slug: \"business-entrepreneurship\", color: \"#059669\", icon: \"TrendingUp\" },\n      { name: \"Design & Creativity\", slug: \"design-creativity\", color: \"#DC2626\", icon: \"Palette\" },\n      { name: \"Science & Research\", slug: \"science-research\", color: \"#7C3AED\", icon: \"Microscope\" },\n      { name: \"Education & Learning\", slug: \"education-learning\", color: \"#EA580C\", icon: \"BookOpen\" },\n      { name: \"Health & Wellness\", slug: \"health-wellness\", color: \"#16A34A\", icon: \"Heart\" },\n      { name: \"Philosophy & Ethics\", slug: \"philosophy-ethics\", color: \"#BE185D\", icon: \"Lightbulb\" },\n      { name: \"History & Culture\", slug: \"history-culture\", color: \"#B45309\", icon: \"Clock\" },\n      { name: \"Personal Development\", slug: \"personal-development\", color: \"#0891B2\", icon: \"User\" },\n      { name: \"Finance & Economics\", slug: \"finance-economics\", color: \"#65A30D\", icon: \"DollarSign\" },\n      { name: \"Environment & Sustainability\", slug: \"environment-sustainability\", color: \"#047857\", icon: \"Leaf\" }\n    ];\n\n    // Check if topics already exist\n    const existingTopics = await db.select().from(topics).limit(1);\n    \n    if (existingTopics.length === 0) {\n      await db.insert(topics).values(defaultTopics);\n      console.log(\"✓ Topics seeded\");\n    } else {\n      console.log(\"✓ Topics already exist\");\n    }\n\n    // Get all topics for post creation\n    const allTopics = await db.select().from(topics);\n    \n    // Create demo users if they don't exist\n    const existingDemoUsers = await db.select().from(users).where(sql`id LIKE 'demo-user-%'`);\n    let demoUsers = [];\n    \n    if (existingDemoUsers.length === 0) {\n      console.log(\"Creating demo users...\");\n      const demoUserData = [\n        {\n          id: \"demo-user-1\",\n          email: \"sarah.chen@example.com\",\n          firstName: \"Sarah\",\n          lastName: \"Chen\",\n          profileImageUrl: null\n        },\n        {\n          id: \"demo-user-2\", \n          email: \"alex.rodriguez@example.com\",\n          firstName: \"Alex\",\n          lastName: \"Rodriguez\",\n          profileImageUrl: null\n        },\n        {\n          id: \"demo-user-3\",\n          email: \"maya.patel@example.com\", \n          firstName: \"Maya\",\n          lastName: \"Patel\",\n          profileImageUrl: null\n        },\n        {\n          id: \"demo-user-4\",\n          email: \"jordan.kim@example.com\",\n          firstName: \"Jordan\", \n          lastName: \"Kim\",\n          profileImageUrl: null\n        }\n      ];\n      \n      demoUsers = await db.insert(users).values(demoUserData).returning();\n      console.log(\"✓ Demo users created\");\n    } else {\n      demoUsers = await db.select().from(users);\n      console.log(\"✓ Using existing users\");\n    }\n\n    if (demoUsers.length === 0) {\n      console.log(\"⚠ No users available - skipping content creation\");\n      return;\n    }\n\n    // Check if posts already exist\n    const existingPosts = await db.select().from(posts).limit(1);\n    \n    if (existingPosts.length === 0 && allTopics.length > 0) {\n      const demoPosts = [\n        {\n          title: \"The Future of AI in Education\",\n          content: \"Artificial Intelligence is revolutionizing how we learn and teach. From personalized learning paths to automated grading systems, AI is making education more accessible and effective than ever before.\\n\\nKey benefits I've observed:\\n• Personalized learning experiences\\n• Real-time feedback and assessment\\n• Accessibility for diverse learning needs\\n• 24/7 availability for support\\n\\nWhat are your thoughts on AI tutors vs human teachers? I believe the future lies in collaboration between both.\",\n          excerpt: \"Exploring how AI is transforming education with personalized learning and automated systems...\",\n          authorId: demoUsers[0].id,\n          topicId: allTopics.find(t => t.slug === \"ai-machine-learning\")?.id || allTopics[0].id,\n          type: \"text\"\n        },\n        {\n          title: \"Building Sustainable Startups in 2025\",\n          content: \"In today's world, sustainability isn't just a buzzword - it's a business imperative. After working with 50+ startups over the past 3 years, I've learned how to build companies that are both profitable and environmentally conscious.\\n\\n🌱 Key strategies that work:\\n1. Circular economy models from day one\\n2. Green technology integration\\n3. Sustainable supply chain partnerships\\n4. ESG metrics as core KPIs\\n\\nThe most successful sustainable startups I've seen don't treat environmental responsibility as an add-on - they make it central to their value proposition.\",\n          excerpt: \"Discover proven strategies for building profitable and environmentally conscious startups...\",\n          authorId: demoUsers[1].id,\n          topicId: allTopics.find(t => t.slug === \"business-entrepreneurship\")?.id || allTopics[1].id,\n          type: \"text\"\n        },\n        {\n          title: \"The Science Behind Habit Formation\",\n          content: \"Understanding how habits work can completely transform your life. After diving deep into neuroscience research for my psychology thesis, I discovered that habits follow a predictable neurological loop.\\n\\nThe Habit Loop:\\n🧠 Cue → Routine → Reward → Repeat\\n\\nWhat fascinated me most is that our brains physically change when we form new habits. The basal ganglia, responsible for automatic behaviors, literally rewires itself.\\n\\nPractical tips that work:\\n• Start ridiculously small (2-minute rule)\\n• Stack habits on existing routines\\n• Focus on identity, not just outcomes\\n• Track your streaks but don't break the chain\\n\\nI've used these principles to build a consistent meditation practice, learn Spanish, and maintain a workout routine for 2+ years.\",\n          excerpt: \"Learn the neuroscience behind habit formation and practical strategies for lasting change...\",\n          authorId: demoUsers[2].id,\n          topicId: allTopics.find(t => t.slug === \"personal-development\")?.id || allTopics[2].id,\n          type: \"text\"\n        },\n        {\n          title: \"Modern Web Development: What's Actually Important in 2025\",\n          content: \"The web development landscape is constantly evolving, but not every trend is worth your time. As a senior developer who's been in the industry for 8 years, here's what I think actually matters:\\n\\n✅ Worth learning:\\n• TypeScript (game-changer for large projects)\\n• React Server Components\\n• Edge computing patterns\\n• Web performance optimization\\n• Accessibility fundamentals\\n\\n❌ Skip for now:\\n• Framework hopping without reason\\n• Over-engineering simple solutions\\n• Chasing every new JS library\\n\\nThe key is building maintainable, performant applications that solve real problems. Focus on fundamentals first, then add complexity only when needed.\\n\\nWhat's your experience with the current web dev ecosystem?\",\n          excerpt: \"A senior developer's perspective on what really matters in modern web development...\",\n          authorId: demoUsers[3].id,\n          topicId: allTopics.find(t => t.slug === \"technology-programming\")?.id || allTopics[3].id,\n          type: \"text\"\n        },\n        {\n          title: \"My Journey Learning Machine Learning\",\n          content: \"Six months ago, I decided to transition from marketing to ML engineering. Here's what I wish I knew when starting:\\n\\n📚 Learning path that worked:\\n1. Python fundamentals (3 weeks)\\n2. Statistics & probability (2 weeks) \\n3. Pandas & NumPy (1 week)\\n4. Scikit-learn basics (2 weeks)\\n5. Deep learning with PyTorch (ongoing)\\n\\n💡 Key insights:\\n• Math anxiety is real but manageable\\n• Kaggle competitions teach practical skills\\n• Building projects > watching tutorials\\n• Community support is everything\\n\\nCurrently working on a computer vision project for medical imaging. The learning curve is steep but incredibly rewarding!\\n\\nAnyone else making a career transition? What's been your biggest challenge?\",\n          excerpt: \"A marketing professional's journey transitioning to machine learning engineering...\",\n          authorId: demoUsers[0].id,\n          topicId: allTopics.find(t => t.slug === \"ai-machine-learning\")?.id || allTopics[0].id,\n          type: \"text\"\n        },\n        {\n          title: \"Why I Started Reading Philosophy (And You Should Too)\",\n          content: \"Philosophy changed how I think about everything - from daily decisions to life's big questions.\\n\\nStarted with Stoicism during a particularly stressful period at work. Marcus Aurelius' 'Meditations' taught me that we can't control external events, only our responses to them.\\n\\n📖 Books that shifted my perspective:\\n• 'The Obstacle Is the Way' by Ryan Holiday\\n• 'Being and Time' by Heidegger (challenging but worth it)\\n• 'The Nicomachean Ethics' by Aristotle\\n• 'Sapiens' by Yuval Noah Harari\\n\\nPhilosophy isn't just abstract thinking - it's practical wisdom for navigating complexity, making ethical decisions, and understanding our place in the world.\\n\\nWhat philosophical ideas have influenced your thinking?\",\n          excerpt: \"How philosophy provided practical wisdom for navigating life's complexities...\",\n          authorId: demoUsers[2].id,\n          topicId: allTopics.find(t => t.slug === \"philosophy-ethics\")?.id || allTopics[7].id,\n          type: \"text\"\n        }\n      ];\n\n      await db.insert(posts).values(demoPosts);\n      console.log(\"✓ Demo posts created\");\n    } else {\n      console.log(\"✓ Posts already exist\");\n    }\n\n    // Create demo collections\n    const existingCollections = await db.select().from(collections).limit(1);\n    \n    if (existingCollections.length === 0) {\n      const demoCollections = [\n        {\n          name: \"AI Research Papers\",\n          description: \"Curated collection of groundbreaking AI research papers and insights\",\n          isPublic: true,\n          userId: demoUsers[0].id\n        },\n        {\n          name: \"Startup Playbook\",\n          description: \"Essential resources for building and scaling startups\",\n          isPublic: true,\n          userId: demoUsers[1].id\n        },\n        {\n          name: \"Psychology & Behavior\",\n          description: \"Understanding human psychology and behavior change\",\n          isPublic: true,\n          userId: demoUsers[2].id\n        },\n        {\n          name: \"Web Development Resources\",\n          description: \"Modern web development tutorials, tools, and best practices\",\n          isPublic: true,\n          userId: demoUsers[3].id\n        },\n        {\n          name: \"Philosophy Fundamentals\",\n          description: \"Essential philosophical texts and modern interpretations\",\n          isPublic: true,\n          userId: demoUsers[2].id\n        }\n      ];\n\n      const createdCollections = await db.insert(collections).values(demoCollections).returning();\n      console.log(\"✓ Demo collections created\");\n\n      // Add some demo documents to collections\n      const demoDocuments = [\n        {\n          name: \"Attention Is All You Need.pdf\",\n          originalName: \"attention-is-all-you-need.pdf\",\n          mimeType: \"application/pdf\",\n          size: 2048576,\n          content: \"This paper introduces the Transformer architecture, which has become the foundation for modern language models...\",\n          collectionId: createdCollections[0].id,\n          userId: demoUsers[0].id\n        },\n        {\n          name: \"The Lean Startup Methodology\",\n          originalName: \"lean-startup-notes.md\",\n          mimeType: \"text/markdown\", \n          size: 51200,\n          content: \"# The Lean Startup\\n\\nKey principles:\\n- Build-Measure-Learn feedback loop\\n- Minimum Viable Product (MVP)\\n- Validated learning\\n- Innovation accounting...\",\n          collectionId: createdCollections[1].id,\n          userId: demoUsers[1].id\n        },\n        {\n          name: \"Atomic Habits Summary\",\n          originalName: \"atomic-habits-summary.txt\",\n          mimeType: \"text/plain\",\n          size: 32768,\n          content: \"Atomic Habits by James Clear\\n\\nCore concepts:\\n1. The compound effect of small habits\\n2. The habit loop: cue, craving, response, reward\\n3. The four laws of behavior change...\",\n          collectionId: createdCollections[2].id,\n          userId: demoUsers[2].id\n        },\n        {\n          name: \"React Best Practices 2025\",\n          originalName: \"react-best-practices.md\", \n          mimeType: \"text/markdown\",\n          size: 76800,\n          content: \"# React Best Practices for 2025\\n\\n## Component Architecture\\n- Use functional components with hooks\\n- Keep components small and focused\\n- Implement proper error boundaries...\",\n          collectionId: createdCollections[3].id,\n          userId: demoUsers[3].id\n        }\n      ];\n\n      await db.insert(documents).values(demoDocuments);\n      console.log(\"✓ Demo documents added to collections\");\n    } else {\n      console.log(\"✓ Collections already exist\");\n    }\n\n    console.log(\"Database seeding completed!\");\n    \n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n  }\n}","size_bytes":13604},"server/storage-old.ts":{"content":"import {\n  users,\n  collections,\n  documents,\n  conversations,\n  messages,\n  type User,\n  type InsertUser,\n  type UpsertUser,\n  type Collection,\n  type InsertCollection,\n  type Document,\n  type InsertDocument,\n  type Conversation,\n  type InsertConversation,\n  type Message,\n  type InsertMessage,\n  type CollectionWithStats,\n  type ConversationWithPreview,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, count, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods - required for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Collection methods\n  getCollections(userId: string): Promise<CollectionWithStats[]>;\n  getCollection(id: number, userId: string): Promise<Collection | undefined>;\n  createCollection(collection: InsertCollection): Promise<Collection>;\n  updateCollection(id: number, updates: Partial<InsertCollection>): Promise<Collection | undefined>;\n  deleteCollection(id: number, userId: string): Promise<boolean>;\n\n  // Document methods\n  getDocuments(collectionId: number): Promise<Document[]>;\n  getDocument(id: number): Promise<Document | undefined>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  deleteDocument(id: number): Promise<boolean>;\n\n  // Conversation methods\n  getConversations(userId: string): Promise<ConversationWithPreview[]>;\n  getConversation(id: number, userId: string): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: number, updates: Partial<InsertConversation>): Promise<Conversation | undefined>;\n  deleteConversation(id: number, userId: string): Promise<boolean>;\n\n  // Message methods\n  getMessages(conversationId: number): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private collections: Map<number, Collection>;\n  private documents: Map<number, Document>;\n  private conversations: Map<number, Conversation>;\n  private messages: Map<number, Message>;\n  private currentId: { users: number; collections: number; documents: number; conversations: number; messages: number };\n\n  constructor() {\n    this.users = new Map();\n    this.collections = new Map();\n    this.documents = new Map();\n    this.conversations = new Map();\n    this.messages = new Map();\n    this.currentId = {\n      users: 1,\n      collections: 1,\n      documents: 1,\n      conversations: 1,\n      messages: 1,\n    };\n\n    // Create a default user for demo purposes\n    this.createUser({ username: \"demo\", password: \"demo\" });\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find((user) => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId.users++;\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Collection methods\n  async getCollections(userId: number): Promise<CollectionWithStats[]> {\n    const userCollections = Array.from(this.collections.values()).filter(\n      (collection) => collection.userId === userId\n    );\n\n    return userCollections.map((collection) => {\n      const documentCount = Array.from(this.documents.values()).filter(\n        (doc) => doc.collectionId === collection.id\n      ).length;\n\n      const collectionConversations = Array.from(this.conversations.values()).filter(\n        (conv) => conv.collectionId === collection.id\n      );\n\n      const lastUsed = collectionConversations.length > 0\n        ? collectionConversations\n            .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())[0]\n            .updatedAt.toISOString()\n        : undefined;\n\n      return {\n        ...collection,\n        documentCount,\n        lastUsed,\n      };\n    });\n  }\n\n  async getCollection(id: number, userId: number): Promise<Collection | undefined> {\n    const collection = this.collections.get(id);\n    return collection && collection.userId === userId ? collection : undefined;\n  }\n\n  async createCollection(insertCollection: InsertCollection): Promise<Collection> {\n    const id = this.currentId.collections++;\n    const now = new Date();\n    const collection: Collection = {\n      id,\n      name: insertCollection.name,\n      description: insertCollection.description ?? null,\n      userId: insertCollection.userId,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.collections.set(id, collection);\n    return collection;\n  }\n\n  async updateCollection(id: number, updates: Partial<InsertCollection>): Promise<Collection | undefined> {\n    const existing = this.collections.get(id);\n    if (!existing) return undefined;\n\n    const updated: Collection = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.collections.set(id, updated);\n    return updated;\n  }\n\n  async deleteCollection(id: number, userId: number): Promise<boolean> {\n    const collection = this.collections.get(id);\n    if (!collection || collection.userId !== userId) return false;\n\n    this.collections.delete(id);\n    // Also delete associated documents and conversations\n    Array.from(this.documents.entries()).forEach(([docId, doc]) => {\n      if (doc.collectionId === id) {\n        this.documents.delete(docId);\n      }\n    });\n    Array.from(this.conversations.entries()).forEach(([convId, conv]) => {\n      if (conv.collectionId === id) {\n        this.conversations.delete(convId);\n      }\n    });\n    return true;\n  }\n\n  // Document methods\n  async getDocuments(collectionId: number): Promise<Document[]> {\n    return Array.from(this.documents.values()).filter(\n      (document) => document.collectionId === collectionId\n    );\n  }\n\n  async getDocument(id: number): Promise<Document | undefined> {\n    return this.documents.get(id);\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const id = this.currentId.documents++;\n    const document: Document = {\n      ...insertDocument,\n      id,\n      uploadedAt: new Date(),\n    };\n    this.documents.set(id, document);\n    return document;\n  }\n\n  async deleteDocument(id: number): Promise<boolean> {\n    return this.documents.delete(id);\n  }\n\n  // Conversation methods\n  async getConversations(userId: number): Promise<ConversationWithPreview[]> {\n    const userConversations = Array.from(this.conversations.values()).filter(\n      (conversation) => conversation.userId === userId\n    );\n\n    return userConversations.map((conversation) => {\n      const conversationMessages = Array.from(this.messages.values()).filter(\n        (message) => message.conversationId === conversation.id\n      );\n\n      const lastMessage = conversationMessages.length > 0\n        ? conversationMessages.sort((a, b) => \n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n          )[0]\n        : undefined;\n\n      return {\n        ...conversation,\n        preview: lastMessage?.content.substring(0, 100) || \"No messages yet\",\n        messageCount: conversationMessages.length,\n        lastMessage: lastMessage?.createdAt.toISOString(),\n      };\n    }).sort((a, b) => \n      new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\n    );\n  }\n\n  async getConversation(id: number, userId: number): Promise<Conversation | undefined> {\n    const conversation = this.conversations.get(id);\n    return conversation && conversation.userId === userId ? conversation : undefined;\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const id = this.currentId.conversations++;\n    const now = new Date();\n    const conversation: Conversation = {\n      id,\n      title: insertConversation.title,\n      type: insertConversation.type,\n      collectionId: insertConversation.collectionId ?? null,\n      userId: insertConversation.userId,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.conversations.set(id, conversation);\n    return conversation;\n  }\n\n  async updateConversation(id: number, updates: Partial<InsertConversation>): Promise<Conversation | undefined> {\n    const existing = this.conversations.get(id);\n    if (!existing) return undefined;\n\n    const updated: Conversation = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.conversations.set(id, updated);\n    return updated;\n  }\n\n  async deleteConversation(id: number, userId: number): Promise<boolean> {\n    const conversation = this.conversations.get(id);\n    if (!conversation || conversation.userId !== userId) return false;\n\n    this.conversations.delete(id);\n    // Also delete associated messages\n    Array.from(this.messages.entries()).forEach(([msgId, msg]) => {\n      if (msg.conversationId === id) {\n        this.messages.delete(msgId);\n      }\n    });\n    return true;\n  }\n\n  // Message methods\n  async getMessages(conversationId: number): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter((message) => message.conversationId === conversationId)\n      .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = this.currentId.messages++;\n    const message: Message = {\n      id,\n      content: insertMessage.content,\n      role: insertMessage.role,\n      conversationId: insertMessage.conversationId,\n      sources: insertMessage.sources || null,\n      createdAt: new Date(),\n    };\n    this.messages.set(id, message);\n    return message;\n  }\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getCollections(userId: number): Promise<CollectionWithStats[]> {\n    const collectionsWithStats = await db\n      .select({\n        id: collections.id,\n        name: collections.name,\n        description: collections.description,\n        userId: collections.userId,\n        createdAt: collections.createdAt,\n        updatedAt: collections.updatedAt,\n        documentCount: count(documents.id),\n      })\n      .from(collections)\n      .leftJoin(documents, eq(collections.id, documents.collectionId))\n      .where(eq(collections.userId, userId))\n      .groupBy(collections.id)\n      .orderBy(desc(collections.updatedAt));\n\n    return collectionsWithStats.map(collection => ({\n      ...collection,\n      documentCount: Number(collection.documentCount),\n    }));\n  }\n\n  async getCollection(id: number, userId: number): Promise<Collection | undefined> {\n    const [collection] = await db\n      .select()\n      .from(collections)\n      .where(sql`${collections.id} = ${id} AND ${collections.userId} = ${userId}`);\n    return collection || undefined;\n  }\n\n  async createCollection(insertCollection: InsertCollection): Promise<Collection> {\n    const [collection] = await db\n      .insert(collections)\n      .values(insertCollection)\n      .returning();\n    return collection;\n  }\n\n  async updateCollection(id: number, updates: Partial<InsertCollection>): Promise<Collection | undefined> {\n    const [collection] = await db\n      .update(collections)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(collections.id, id))\n      .returning();\n    return collection || undefined;\n  }\n\n  async deleteCollection(id: number, userId: number): Promise<boolean> {\n    const result = await db\n      .delete(collections)\n      .where(sql`${collections.id} = ${id} AND ${collections.userId} = ${userId}`);\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getDocuments(collectionId: number): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.collectionId, collectionId))\n      .orderBy(desc(documents.uploadedAt));\n  }\n\n  async getDocument(id: number): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document || undefined;\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const [document] = await db\n      .insert(documents)\n      .values(insertDocument)\n      .returning();\n    return document;\n  }\n\n  async deleteDocument(id: number): Promise<boolean> {\n    const result = await db.delete(documents).where(eq(documents.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getConversations(userId: number): Promise<ConversationWithPreview[]> {\n    const conversationsWithPreview = await db\n      .select({\n        id: conversations.id,\n        title: conversations.title,\n        type: conversations.type,\n        collectionId: conversations.collectionId,\n        userId: conversations.userId,\n        createdAt: conversations.createdAt,\n        updatedAt: conversations.updatedAt,\n        messageCount: count(messages.id),\n        lastMessage: sql<string>`MAX(${messages.createdAt})`,\n      })\n      .from(conversations)\n      .leftJoin(messages, eq(conversations.id, messages.conversationId))\n      .where(eq(conversations.userId, userId))\n      .groupBy(conversations.id)\n      .orderBy(desc(conversations.updatedAt));\n\n    return await Promise.all(\n      conversationsWithPreview.map(async (conv) => {\n        const [lastMessage] = await db\n          .select({ content: messages.content })\n          .from(messages)\n          .where(eq(messages.conversationId, conv.id))\n          .orderBy(desc(messages.createdAt))\n          .limit(1);\n\n        return {\n          ...conv,\n          messageCount: Number(conv.messageCount),\n          preview: lastMessage?.content?.substring(0, 100) || \"No messages yet\",\n          lastMessage: conv.lastMessage,\n        };\n      })\n    );\n  }\n\n  async getConversation(id: number, userId: number): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .select()\n      .from(conversations)\n      .where(sql`${conversations.id} = ${id} AND ${conversations.userId} = ${userId}`);\n    return conversation || undefined;\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const [conversation] = await db\n      .insert(conversations)\n      .values(insertConversation)\n      .returning();\n    return conversation;\n  }\n\n  async updateConversation(id: number, updates: Partial<InsertConversation>): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .update(conversations)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(conversations.id, id))\n      .returning();\n    return conversation || undefined;\n  }\n\n  async deleteConversation(id: number, userId: number): Promise<boolean> {\n    const result = await db\n      .delete(conversations)\n      .where(sql`${conversations.id} = ${id} AND ${conversations.userId} = ${userId}`);\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getMessages(conversationId: number): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":15941},"server/storage.ts":{"content":"import {\n  users,\n  collections,\n  documents,\n  collectionDocuments,\n  conversations,\n  messages,\n  artifacts,\n  tenants,\n  adminAuditLog,\n  subscriptionPlans,\n  userSubscriptions,\n  creditTransactions,\n  userCredits,\n  creditGifts,\n  type User,\n  type UpsertUser,\n  type InsertUser,\n  type Collection,\n  type InsertCollection,\n  type Document,\n  type InsertDocument,\n  type Conversation,\n  type InsertConversation,\n  type Message,\n  type InsertMessage,\n  type Artifact,\n  type InsertArtifact,\n  type Tenant,\n  type InsertTenant,\n  type AdminAuditLog,\n  type InsertAdminAuditLog,\n  type CollectionWithStats,\n  type ConversationWithPreview,\n  type TenantWithStats,\n  type UserWithTenant,\n  type AdminDashboardStats,\n  type SubscriptionPlan,\n  type UserSubscription,\n  type UserSubscriptionWithPlan,\n  type CreditTransaction,\n  type UserCredits,\n  type CreditGift,\n  type InsertUserSubscription,\n  type InsertCreditTransaction,\n  type InsertUserCredits,\n  type InsertCreditGift,\n  tags,\n  communities,\n  communityTags,\n  userCommunities,\n  type Tag,\n  type Community,\n  type InsertCommunity,\n  type CommunityWithStats,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, count, sql, and, ilike, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods - required for multi-provider Auth\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  createUser(user: UpsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<UpsertUser>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  getPublicUsers(): Promise<User[]>;\n\n  // Collection methods\n  getCollections(userId: string): Promise<CollectionWithStats[]>;\n  getCollection(id: number, userId: string): Promise<Collection | undefined>;\n  createCollection(collection: InsertCollection): Promise<Collection>;\n  updateCollection(id: number, updates: Partial<InsertCollection>): Promise<Collection | undefined>;\n  deleteCollection(id: number, userId: string): Promise<boolean>;\n\n  // Document methods\n  getDocuments(collectionId: number, userId?: string): Promise<Document[]>;\n  getDocument(id: number): Promise<Document | undefined>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  deleteDocument(id: number, userId?: string): Promise<boolean>;\n\n  // Conversation methods\n  getConversations(userId: string): Promise<ConversationWithPreview[]>;\n  getConversation(id: number, userId: string): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: number, updates: Partial<InsertConversation>): Promise<Conversation | undefined>;\n  deleteConversation(id: number, userId: string): Promise<boolean>;\n\n  // Message methods\n  getMessages(conversationId: number): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n\n  // Artifact methods\n  getArtifacts(userId: string, filters?: { type?: string; collectionId?: number }): Promise<Artifact[]>;\n  getArtifact(id: number, userId?: string): Promise<Artifact | undefined>;\n  createArtifact(artifact: InsertArtifact): Promise<Artifact>;\n  updateArtifact(id: number, updates: Partial<InsertArtifact>): Promise<Artifact | undefined>;\n  deleteArtifact(id: number, userId: string): Promise<boolean>;\n\n  // Admin methods\n  isAdmin(userId: string): Promise<boolean>;\n  getAdminDashboardStats(): Promise<AdminDashboardStats>;\n  getTenants(): Promise<TenantWithStats[]>;\n  getTenant(id: string): Promise<Tenant | undefined>;\n  createTenant(tenant: InsertTenant): Promise<Tenant>;\n  updateTenant(id: string, updates: Partial<InsertTenant>): Promise<Tenant | undefined>;\n  activateTenant(id: string, adminId: string): Promise<boolean>;\n  deactivateTenant(id: string, adminId: string): Promise<boolean>;\n  getAllUsers(filters?: { tenantId?: string; isActive?: boolean }): Promise<UserWithTenant[]>;\n  updateUserStatus(userId: string, isActive: boolean, adminId: string): Promise<boolean>;\n  updateUserRole(userId: string, role: string, adminId: string): Promise<boolean>;\n  logAdminAction(log: InsertAdminAuditLog): Promise<AdminAuditLog>;\n  getAdminAuditLogs(filters?: { adminId?: string; targetType?: string; limit?: number }): Promise<AdminAuditLog[]>;\n\n  // Subscription methods\n  getUserSubscription(userId: string): Promise<UserSubscriptionWithPlan | undefined>;\n  createOrUpdateSubscription(userId: string, data: { planId: string; status: string; stripeCustomerId?: string; stripePaymentIntentId?: string; isYearly?: boolean }): Promise<UserSubscription>;\n  getStripeCustomerId(userId: string): Promise<string | undefined>;\n  updateStripeCustomerId(userId: string, stripeCustomerId: string): Promise<void>;\n  \n  // Credit methods\n  getUserCredits(userId: string): Promise<UserCredits | undefined>;\n  addCredits(userId: string, amount: number, type: string, description: string, referenceId?: string): Promise<void>;\n  deductCredits(userId: string, amount: number, type: string, description: string, referenceId?: string): Promise<void>;\n  giftCredits(fromUserId: string, toUserId: string, amount: number, message?: string): Promise<void>;\n  getCreditTransactions(userId: string, limit?: number): Promise<CreditTransaction[]>;\n  getMonthlyUsage(userId: string): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations - required for Replit Auth\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    try {\n      // First try to find existing user by email or id\n      let existingUser = await this.getUser(userData.id);\n      if (!existingUser && userData.email) {\n        existingUser = await this.getUserByEmail(userData.email);\n      }\n\n      if (existingUser) {\n        // Update existing user\n        const [user] = await db\n          .update(users)\n          .set({\n            ...userData,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.id, existingUser.id))\n          .returning();\n        return user;\n      } else {\n        // Create new user\n        const [user] = await db\n          .insert(users)\n          .values(userData)\n          .returning();\n        return user;\n      }\n    } catch (error) {\n      console.error(\"Error upserting user:\", error);\n      // If it's a duplicate key error, try to get the existing user\n      if ((error as any).code === '23505') {\n        const existingUser = userData.email ? \n          await this.getUserByEmail(userData.email) : \n          await this.getUser(userData.id);\n        if (existingUser) {\n          return existingUser;\n        }\n      }\n      throw error;\n    }\n  }\n\n  async createUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<UpsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db\n      .delete(users)\n      .where(eq(users.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async getPublicUsers(): Promise<User[]> {\n    const publicUsers = await db\n      .select()\n      .from(users)\n      .where(eq(users.isActive, true))\n      .orderBy(desc(users.createdAt));\n    return publicUsers;\n  }\n\n  // Collection methods\n  async getCollections(userId: string): Promise<CollectionWithStats[]> {\n    const collectionsWithStats = await db\n      .select({\n        id: collections.id,\n        name: collections.name,\n        description: collections.description,\n        userId: collections.userId,\n        visibilityTypeId: collections.visibilityTypeId,\n        isDefault: collections.isDefault,\n        createdAt: collections.createdAt,\n        updatedAt: collections.updatedAt,\n        documentCount: count(collectionDocuments.documentId),\n      })\n      .from(collections)\n      .leftJoin(collectionDocuments, eq(collections.id, collectionDocuments.collectionId))\n      .where(eq(collections.userId, userId))\n      .groupBy(collections.id)\n      .orderBy(desc(collections.updatedAt));\n\n    return collectionsWithStats.map(collection => ({\n      ...collection,\n      documentCount: collection.documentCount || 0,\n    }));\n  }\n\n  async getCollection(id: number, userId: string): Promise<Collection | undefined> {\n    const [collection] = await db\n      .select()\n      .from(collections)\n      .where(and(eq(collections.id, id), eq(collections.userId, userId)));\n    return collection || undefined;\n  }\n\n  async createCollection(insertCollection: InsertCollection): Promise<Collection> {\n    const [collection] = await db\n      .insert(collections)\n      .values(insertCollection)\n      .returning();\n    return collection;\n  }\n\n  async updateCollection(id: number, updates: Partial<InsertCollection>): Promise<Collection | undefined> {\n    const [collection] = await db\n      .update(collections)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(collections.id, id))\n      .returning();\n    return collection || undefined;\n  }\n\n  async deleteCollection(id: number, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(collections)\n      .where(and(eq(collections.id, id), eq(collections.userId, userId)));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Document methods\n  async getDocuments(collectionId: number, userId?: string): Promise<Document[]> {\n    // If userId is provided, validate collection ownership\n    if (userId) {\n      const collection = await this.getCollection(collectionId, userId);\n      if (!collection) {\n        return []; // Return empty array if user doesn't own the collection\n      }\n    }\n    \n    return await db\n      .select({\n        id: documents.id,\n        name: documents.name,\n        content: documents.content,\n        mimeType: documents.mimeType,\n        size: documents.size,\n        type: documents.type,\n        sourcePostId: documents.sourcePostId,\n        userId: documents.userId,\n        uploadedAt: documents.uploadedAt,\n      })\n      .from(documents)\n      .innerJoin(collectionDocuments, eq(documents.id, collectionDocuments.documentId))\n      .where(eq(collectionDocuments.collectionId, collectionId))\n      .orderBy(desc(documents.uploadedAt));\n  }\n\n  async getDocument(id: number): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document || undefined;\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const [document] = await db\n      .insert(documents)\n      .values(insertDocument)\n      .returning();\n    return document;\n  }\n\n  async deleteDocument(id: number, userId?: string): Promise<boolean> {\n    // If userId is provided, validate document ownership\n    if (userId) {\n      const document = await this.getDocument(id);\n      if (!document || document.userId !== userId) {\n        return false; // Document doesn't exist or user doesn't own it\n      }\n    }\n    \n    // Delete from junction table first\n    await db.delete(collectionDocuments).where(eq(collectionDocuments.documentId, id));\n    \n    // Then delete the document\n    const result = await db.delete(documents).where(eq(documents.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Conversation methods\n  async getConversations(userId: string): Promise<ConversationWithPreview[]> {\n    const conversationsWithPreview = await db\n      .select({\n        id: conversations.id,\n        title: conversations.title,\n        type: conversations.type,\n        collectionId: conversations.collectionId,\n        userId: conversations.userId,\n        createdAt: conversations.createdAt,\n        updatedAt: conversations.updatedAt,\n        messageCount: count(messages.id),\n        lastMessage: sql<string>`(\n          SELECT content \n          FROM ${messages} \n          WHERE ${messages.conversationId} = ${conversations.id} \n          ORDER BY ${messages.createdAt} DESC \n          LIMIT 1\n        )`,\n      })\n      .from(conversations)\n      .leftJoin(messages, eq(conversations.id, messages.conversationId))\n      .where(eq(conversations.userId, userId))\n      .groupBy(conversations.id)\n      .orderBy(desc(conversations.updatedAt));\n\n    return conversationsWithPreview.map(conv => ({\n      ...conv,\n      preview: conv.lastMessage || \"No messages yet\",\n      messageCount: conv.messageCount || 0,\n      lastMessage: conv.lastMessage || undefined,\n    }));\n  }\n\n  async getConversation(id: number, userId: string): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.id, id) && eq(conversations.userId, userId));\n    return conversation || undefined;\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const [conversation] = await db\n      .insert(conversations)\n      .values(insertConversation)\n      .returning();\n    return conversation;\n  }\n\n  async updateConversation(id: number, updates: Partial<InsertConversation>): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .update(conversations)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(conversations.id, id))\n      .returning();\n    return conversation || undefined;\n  }\n\n  async deleteConversation(id: number, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(conversations)\n      .where(eq(conversations.id, id) && eq(conversations.userId, userId));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Message methods\n  async getMessages(conversationId: number): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n\n  // Artifact methods\n  async getArtifacts(userId: string, filters?: { type?: string; collectionId?: number }): Promise<Artifact[]> {\n    let query = db\n      .select()\n      .from(artifacts)\n      .where(eq(artifacts.userId, userId));\n    \n    if (filters?.type) {\n      query = query.where(eq(artifacts.type, filters.type));\n    }\n    \n    if (filters?.collectionId) {\n      query = query.where(eq(artifacts.collectionId, filters.collectionId));\n    }\n    \n    const results = await query.orderBy(desc(artifacts.createdAt));\n    return results;\n  }\n\n  async getArtifact(id: number, userId?: string): Promise<Artifact | undefined> {\n    let query = db\n      .select()\n      .from(artifacts)\n      .where(eq(artifacts.id, id));\n    \n    if (userId) {\n      query = query.where(eq(artifacts.userId, userId));\n    }\n    \n    const [artifact] = await query;\n    return artifact || undefined;\n  }\n\n  async createArtifact(insertArtifact: InsertArtifact): Promise<Artifact> {\n    const [artifact] = await db\n      .insert(artifacts)\n      .values(insertArtifact)\n      .returning();\n    return artifact;\n  }\n\n  async updateArtifact(id: number, updates: Partial<InsertArtifact>): Promise<Artifact | undefined> {\n    const [artifact] = await db\n      .update(artifacts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(artifacts.id, id))\n      .returning();\n    return artifact || undefined;\n  }\n\n  async deleteArtifact(id: number, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(artifacts)\n      .where(and(eq(artifacts.id, id), eq(artifacts.userId, userId)));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Admin methods implementation\n  async isAdmin(userId: string): Promise<boolean> {\n    const [user] = await db\n      .select({ role: users.role })\n      .from(users)\n      .where(eq(users.id, userId));\n    return user?.role === 'admin' || user?.role === 'super_admin';\n  }\n\n  async getAdminDashboardStats(): Promise<AdminDashboardStats> {\n    const [tenantsCount] = await db\n      .select({ count: count() })\n      .from(tenants);\n    \n    const [activeTenantsCount] = await db\n      .select({ count: count() })\n      .from(tenants)\n      .where(eq(tenants.isActive, true));\n    \n    const [usersCount] = await db\n      .select({ count: count() })\n      .from(users);\n    \n    const [activeUsersCount] = await db\n      .select({ count: count() })\n      .from(users)\n      .where(eq(users.isActive, true));\n    \n    const [collectionsCount] = await db\n      .select({ count: count() })\n      .from(collections);\n    \n    const [documentsCount] = await db\n      .select({ count: count() })\n      .from(documents);\n    \n    const [conversationsCount] = await db\n      .select({ count: count() })\n      .from(conversations);\n    \n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    \n    const [newUsersCount] = await db\n      .select({ count: count() })\n      .from(users)\n      .where(sql`${users.createdAt} >= ${thirtyDaysAgo}`);\n\n    return {\n      totalTenants: tenantsCount.count,\n      activeTenants: activeTenantsCount.count,\n      totalUsers: usersCount.count,\n      activeUsers: activeUsersCount.count,\n      totalCollections: collectionsCount.count,\n      totalDocuments: documentsCount.count,\n      totalConversations: conversationsCount.count,\n      newUsersThisMonth: newUsersCount.count,\n      recentActivity: []\n    };\n  }\n\n  async getTenants(): Promise<TenantWithStats[]> {\n    const tenantsList = await db\n      .select()\n      .from(tenants)\n      .orderBy(desc(tenants.createdAt));\n\n    const tenantsWithStats = await Promise.all(\n      tenantsList.map(async (tenant) => {\n        const [userCount] = await db\n          .select({ count: count() })\n          .from(users)\n          .where(eq(users.tenantId, tenant.id));\n        \n        const [collectionCount] = await db\n          .select({ count: count() })\n          .from(collections)\n          .leftJoin(users, eq(users.id, collections.userId))\n          .where(eq(users.tenantId, tenant.id));\n        \n        const [documentCount] = await db\n          .select({ count: count() })\n          .from(documents)\n          .leftJoin(collections, eq(collections.id, documents.collectionId))\n          .leftJoin(users, eq(users.id, collections.userId))\n          .where(eq(users.tenantId, tenant.id));\n        \n        const [conversationCount] = await db\n          .select({ count: count() })\n          .from(conversations)\n          .leftJoin(users, eq(users.id, conversations.userId))\n          .where(eq(users.tenantId, tenant.id));\n\n        return {\n          ...tenant,\n          userCount: userCount.count,\n          collectionCount: collectionCount.count,\n          documentCount: documentCount.count,\n          conversationCount: conversationCount.count,\n        };\n      })\n    );\n\n    return tenantsWithStats;\n  }\n\n  async getTenant(id: string): Promise<Tenant | undefined> {\n    const [tenant] = await db\n      .select()\n      .from(tenants)\n      .where(eq(tenants.id, id));\n    return tenant;\n  }\n\n  async createTenant(tenant: InsertTenant): Promise<Tenant> {\n    const [newTenant] = await db\n      .insert(tenants)\n      .values(tenant)\n      .returning();\n    return newTenant;\n  }\n\n  async updateTenant(id: string, updates: Partial<InsertTenant>): Promise<Tenant | undefined> {\n    const [updatedTenant] = await db\n      .update(tenants)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(tenants.id, id))\n      .returning();\n    return updatedTenant;\n  }\n\n  async activateTenant(id: string, adminId: string): Promise<boolean> {\n    const [result] = await db\n      .update(tenants)\n      .set({ isActive: true, updatedAt: new Date() })\n      .where(eq(tenants.id, id))\n      .returning();\n    \n    if (result) {\n      await this.logAdminAction({\n        adminId,\n        action: 'activate_tenant',\n        targetType: 'tenant',\n        targetId: id,\n        details: { tenantName: result.name }\n      });\n    }\n    \n    return !!result;\n  }\n\n  async deactivateTenant(id: string, adminId: string): Promise<boolean> {\n    const [result] = await db\n      .update(tenants)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(tenants.id, id))\n      .returning();\n    \n    if (result) {\n      await this.logAdminAction({\n        adminId,\n        action: 'deactivate_tenant',\n        targetType: 'tenant',\n        targetId: id,\n        details: { tenantName: result.name }\n      });\n    }\n    \n    return !!result;\n  }\n\n  async getAllUsers(filters?: { tenantId?: string; isActive?: boolean }): Promise<UserWithTenant[]> {\n    let query = db\n      .select({\n        id: users.id,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        role: users.role,\n        isActive: users.isActive,\n        tenantId: users.tenantId,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        tenant: {\n          id: tenants.id,\n          name: tenants.name,\n          domain: tenants.domain,\n          isActive: tenants.isActive,\n          plan: tenants.plan,\n        }\n      })\n      .from(users)\n      .leftJoin(tenants, eq(tenants.id, users.tenantId))\n      .orderBy(desc(users.createdAt));\n\n    if (filters?.tenantId) {\n      query = query.where(eq(users.tenantId, filters.tenantId));\n    }\n    if (filters?.isActive !== undefined) {\n      query = query.where(eq(users.isActive, filters.isActive));\n    }\n\n    const result = await query;\n    return result.map(row => ({\n      ...row,\n      tenant: row.tenant.id ? row.tenant : undefined\n    })) as UserWithTenant[];\n  }\n\n  async updateUserStatus(userId: string, isActive: boolean, adminId: string): Promise<boolean> {\n    const [result] = await db\n      .update(users)\n      .set({ isActive, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (result) {\n      await this.logAdminAction({\n        adminId,\n        action: isActive ? 'activate_user' : 'deactivate_user',\n        targetType: 'user',\n        targetId: userId,\n        details: { email: result.email }\n      });\n    }\n    \n    return !!result;\n  }\n\n  async updateUserRole(userId: string, role: string, adminId: string): Promise<boolean> {\n    const [result] = await db\n      .update(users)\n      .set({ role, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (result) {\n      await this.logAdminAction({\n        adminId,\n        action: 'update_user_role',\n        targetType: 'user',\n        targetId: userId,\n        details: { email: result.email, newRole: role }\n      });\n    }\n    \n    return !!result;\n  }\n\n  async logAdminAction(log: InsertAdminAuditLog): Promise<AdminAuditLog> {\n    const [newLog] = await db\n      .insert(adminAuditLog)\n      .values(log)\n      .returning();\n    return newLog;\n  }\n\n  async getAdminAuditLogs(filters?: { adminId?: string; targetType?: string; limit?: number }): Promise<AdminAuditLog[]> {\n    let query = db\n      .select()\n      .from(adminAuditLog)\n      .orderBy(desc(adminAuditLog.createdAt));\n\n    if (filters?.adminId) {\n      query = query.where(eq(adminAuditLog.adminId, filters.adminId));\n    }\n    if (filters?.targetType) {\n      query = query.where(eq(adminAuditLog.targetType, filters.targetType));\n    }\n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n\n    return await query;\n  }\n\n  // Subscription methods\n  async getUserSubscription(userId: string): Promise<UserSubscriptionWithPlan | undefined> {\n    const [result] = await db\n      .select({\n        subscription: userSubscriptions,\n        plan: subscriptionPlans\n      })\n      .from(userSubscriptions)\n      .leftJoin(subscriptionPlans, eq(userSubscriptions.planId, subscriptionPlans.id))\n      .where(eq(userSubscriptions.userId, userId))\n      .orderBy(desc(userSubscriptions.createdAt))\n      .limit(1);\n\n    if (!result) return undefined;\n\n    return {\n      ...result.subscription,\n      plan: result.plan!\n    };\n  }\n\n  async createOrUpdateSubscription(userId: string, data: { planId: string; status: string; stripeCustomerId?: string; stripePaymentIntentId?: string; isYearly?: boolean }): Promise<UserSubscription> {\n    // Check if user already has a subscription\n    const [existing] = await db\n      .select()\n      .from(userSubscriptions)\n      .where(eq(userSubscriptions.userId, userId));\n\n    const subscriptionData = {\n      userId,\n      planId: parseInt(data.planId) || 1, // Default to free plan if invalid\n      stripeCustomerId: data.stripeCustomerId,\n      status: data.status,\n      currentPeriodStart: new Date(),\n      currentPeriodEnd: new Date(Date.now() + (data.isYearly ? 365 : 30) * 24 * 60 * 60 * 1000),\n      updatedAt: new Date()\n    };\n\n    if (existing) {\n      // Update existing subscription\n      const [updated] = await db\n        .update(userSubscriptions)\n        .set(subscriptionData)\n        .where(eq(userSubscriptions.userId, userId))\n        .returning();\n      return updated;\n    } else {\n      // Create new subscription\n      const [created] = await db\n        .insert(userSubscriptions)\n        .values(subscriptionData)\n        .returning();\n      return created;\n    }\n  }\n\n  async getStripeCustomerId(userId: string): Promise<string | undefined> {\n    const [result] = await db\n      .select({ stripeCustomerId: userSubscriptions.stripeCustomerId })\n      .from(userSubscriptions)\n      .where(eq(userSubscriptions.userId, userId));\n    \n    return result?.stripeCustomerId || undefined;\n  }\n\n  async updateStripeCustomerId(userId: string, stripeCustomerId: string): Promise<void> {\n    await db\n      .update(userSubscriptions)\n      .set({ stripeCustomerId, updatedAt: new Date() })\n      .where(eq(userSubscriptions.userId, userId));\n  }\n\n  // Credit methods\n  async getUserCredits(userId: string): Promise<UserCredits | undefined> {\n    const [result] = await db\n      .select()\n      .from(userCredits)\n      .where(eq(userCredits.userId, userId));\n    \n    return result || undefined;\n  }\n\n  async addCredits(userId: string, amount: number, type: string, description: string, referenceId?: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Get current balance or create new record\n      const [currentCredits] = await tx\n        .select()\n        .from(userCredits)\n        .where(eq(userCredits.userId, userId));\n      \n      const currentBalance = currentCredits?.balance || 0;\n      const newBalance = currentBalance + amount;\n\n      // Update or create user credits\n      if (currentCredits) {\n        await tx\n          .update(userCredits)\n          .set({ balance: newBalance, updatedAt: new Date() })\n          .where(eq(userCredits.userId, userId));\n      } else {\n        await tx\n          .insert(userCredits)\n          .values({ userId, balance: newBalance, monthlyAllowance: amount });\n      }\n\n      // Record transaction\n      await tx\n        .insert(creditTransactions)\n        .values({\n          userId,\n          type,\n          amount,\n          balance: newBalance,\n          description,\n          referenceId\n        });\n    });\n  }\n\n  async deductCredits(userId: string, amount: number, type: string, description: string, referenceId?: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Get current balance\n      const [currentCredits] = await tx\n        .select()\n        .from(userCredits)\n        .where(eq(userCredits.userId, userId));\n      \n      if (!currentCredits || currentCredits.balance < amount) {\n        throw new Error(\"Insufficient credits\");\n      }\n\n      const newBalance = currentCredits.balance - amount;\n\n      // Update user credits\n      await tx\n        .update(userCredits)\n        .set({ balance: newBalance, updatedAt: new Date() })\n        .where(eq(userCredits.userId, userId));\n\n      // Record transaction (negative amount)\n      await tx\n        .insert(creditTransactions)\n        .values({\n          userId,\n          type,\n          amount: -amount,\n          balance: newBalance,\n          description,\n          referenceId\n        });\n    });\n  }\n\n  async giftCredits(fromUserId: string, toUserId: string, amount: number, message?: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Deduct from sender\n      await this.deductCredits(fromUserId, amount, \"gift_sent\", `Gift to user ${toUserId}`);\n      \n      // Add to recipient\n      await this.addCredits(toUserId, amount, \"gift_received\", `Gift from user ${fromUserId}: ${message || ''}`);\n      \n      // Record gift\n      await tx\n        .insert(creditGifts)\n        .values({\n          fromUserId,\n          toUserId,\n          amount,\n          message,\n          status: \"accepted\",\n          acceptedAt: new Date()\n        });\n    });\n  }\n\n  async getCreditTransactions(userId: string, limit: number = 20): Promise<CreditTransaction[]> {\n    return await db\n      .select()\n      .from(creditTransactions)\n      .where(eq(creditTransactions.userId, userId))\n      .orderBy(desc(creditTransactions.createdAt))\n      .limit(limit);\n  }\n\n  async getMonthlyUsage(userId: string): Promise<any> {\n    const startOfMonth = new Date();\n    startOfMonth.setDate(1);\n    startOfMonth.setHours(0, 0, 0, 0);\n\n    const transactions = await db\n      .select()\n      .from(creditTransactions)\n      .where(\n        and(\n          eq(creditTransactions.userId, userId),\n          sql`${creditTransactions.createdAt} >= ${startOfMonth}`\n        )\n      );\n\n    const usage = {\n      thisMonth: {\n        aiPosts: 0,\n        agentInteractions: 0,\n        taskRuns: 0,\n        creditsUsed: 0\n      },\n      breakdown: [] as Array<{ feature: string; creditsUsed: number; percentage: number }>\n    };\n\n    const featureUsage: Record<string, number> = {};\n    let totalUsed = 0;\n\n    transactions.forEach(tx => {\n      if (tx.amount < 0) { // Only negative amounts (usage)\n        const credits = Math.abs(tx.amount);\n        totalUsed += credits;\n        \n        // Categorize usage based on description or type\n        if (tx.description.includes('post')) {\n          usage.thisMonth.aiPosts += credits;\n          featureUsage['AI Posts'] = (featureUsage['AI Posts'] || 0) + credits;\n        } else if (tx.description.includes('agent')) {\n          usage.thisMonth.agentInteractions += credits;\n          featureUsage['Agent Interactions'] = (featureUsage['Agent Interactions'] || 0) + credits;\n        } else if (tx.description.includes('task')) {\n          usage.thisMonth.taskRuns += credits;\n          featureUsage['Task Runs'] = (featureUsage['Task Runs'] || 0) + credits;\n        } else {\n          featureUsage['Other'] = (featureUsage['Other'] || 0) + credits;\n        }\n      }\n    });\n\n    usage.thisMonth.creditsUsed = totalUsed;\n\n    // Calculate breakdown percentages\n    usage.breakdown = Object.entries(featureUsage).map(([feature, creditsUsed]) => ({\n      feature,\n      creditsUsed,\n      percentage: totalUsed > 0 ? Math.round((creditsUsed / totalUsed) * 100) : 0\n    }));\n\n    return usage;\n  }\n\n  // Tags methods\n  async getAllTags(): Promise<Tag[]> {\n    return await db.select().from(tags).where(eq(tags.isActive, true)).orderBy(tags.name);\n  }\n\n  async searchTags(query: string): Promise<Tag[]> {\n    return await db.select().from(tags)\n      .where(and(\n        eq(tags.isActive, true),\n        ilike(tags.name, `%${query}%`)\n      ))\n      .orderBy(tags.name);\n  }\n\n  // Communities methods\n  async getCommunitiesWithStats(userId?: string): Promise<CommunityWithStats[]> {\n    const query = db\n      .select({\n        community: communities,\n        creator: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        },\n        memberCount: sql<number>`COALESCE(COUNT(DISTINCT ${userCommunities.id}), 0)`,\n        postCount: sql<number>`0`, // TODO: Implement posts for communities\n      })\n      .from(communities)\n      .leftJoin(users, eq(communities.createdBy, users.id))\n      .leftJoin(userCommunities, eq(communities.id, userCommunities.communityId))\n      .where(eq(communities.isActive, true))\n      .groupBy(communities.id, users.id);\n\n    const results = await query;\n    \n    // Get tags for each community\n    const communityIds = results.map(r => r.community.id);\n    const communityTagsData = await db\n      .select({\n        communityId: communityTags.communityId,\n        tag: tags,\n      })\n      .from(communityTags)\n      .innerJoin(tags, eq(communityTags.tagId, tags.id))\n      .where(inArray(communityTags.communityId, communityIds));\n\n    // Get user memberships if userId provided\n    let userMemberships: { communityId: number }[] = [];\n    if (userId) {\n      userMemberships = await db\n        .select({ communityId: userCommunities.communityId })\n        .from(userCommunities)\n        .where(eq(userCommunities.userId, userId));\n    }\n\n    return results.map(result => ({\n      ...result.community,\n      creator: result.creator,\n      memberCount: result.memberCount,\n      postCount: result.postCount,\n      tags: communityTagsData\n        .filter(ct => ct.communityId === result.community.id)\n        .map(ct => ct.tag),\n      isJoined: userMemberships.some(um => um.communityId === result.community.id),\n    }));\n  }\n\n  async createCommunity(data: InsertCommunity & { tagIds: number[] }, userId: string): Promise<Community> {\n    return await db.transaction(async (tx) => {\n      // Create community\n      const [community] = await tx\n        .insert(communities)\n        .values({ ...data, createdBy: userId })\n        .returning();\n\n      // Add tags\n      if (data.tagIds.length > 0) {\n        await tx.insert(communityTags).values(\n          data.tagIds.map(tagId => ({\n            communityId: community.id,\n            tagId,\n          }))\n        );\n      }\n\n      // Add creator as member\n      await tx.insert(userCommunities).values({\n        userId,\n        communityId: community.id,\n      });\n\n      return community;\n    });\n  }\n\n  async joinCommunity(userId: string, communityId: number): Promise<void> {\n    await db.insert(userCommunities).values({\n      userId,\n      communityId,\n    }).onConflictDoNothing();\n  }\n\n  async leaveCommunity(userId: string, communityId: number): Promise<void> {\n    await db.delete(userCommunities).where(\n      and(\n        eq(userCommunities.userId, userId),\n        eq(userCommunities.communityId, communityId)\n      )\n    );\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":35167},"server/supabaseAuth.ts":{"content":"import { type Express, type Request, type Response, type NextFunction, type RequestHandler } from \"express\";\nimport { supabase, supabaseUser } from \"./lib/supabase\";\nimport { storage } from \"./storage\";\nimport { configureSupabaseForDevelopment } from \"./auth-config\";\n\n// Enhanced request type with user info\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n  };\n}\n\n// Get user ID from request (supports both Replit and Supabase auth)\nexport function getUserId(req: AuthenticatedRequest): string {\n  if (req.user?.id) {\n    return req.user.id;\n  }\n  \n  // Fallback to session-based auth if available\n  const session = (req as any).session;\n  if (session?.user?.id) {\n    return session.user.id;\n  }\n  \n  throw new Error(\"User not authenticated\");\n}\n\n// Middleware to authenticate requests using Supabase\nexport const isAuthenticated: RequestHandler = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader?.startsWith('Bearer ')) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const token = authHeader.split(' ')[1];\n    \n    const { data: { user }, error } = await supabaseUser.auth.getUser(token);\n    \n    if (error || !user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    // Ensure user exists in our database\n    let dbUser = await storage.getUser(user.id);\n    if (!dbUser) {\n      const userData = {\n        id: user.id,\n        email: user.email || '',\n        firstName: user.user_metadata?.name?.split(' ')[0] || user.email?.split('@')[0] || 'User',\n        lastName: user.user_metadata?.name?.split(' ').slice(1).join(' ') || null,\n        profileImageUrl: user.user_metadata?.avatar_url || null,\n      };\n      dbUser = await storage.upsertUser(userData);\n    }\n\n    // Add user to request\n    (req as AuthenticatedRequest).user = {\n      id: user.id,\n      email: user.email || '',\n    };\n\n    next();\n  } catch (error) {\n    console.error(\"Authentication error:\", error);\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n};\n\n// Setup Supabase auth routes\nexport async function setupSupabaseAuth(app: Express) {\n  // Configure Supabase for development\n  await configureSupabaseForDevelopment();\n  // Get current user\n  app.get(\"/api/auth/user\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const userId = getUserId(req as AuthenticatedRequest);\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        profileImageUrl: user.profileImageUrl,\n        role: user.role,\n        isActive: user.isActive,\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  // Sign out (client-side handled, but we can add server cleanup if needed)\n  app.post(\"/api/auth/signout\", (req: Request, res: Response) => {\n    res.json({ message: \"Signed out successfully\" });\n  });\n}","size_bytes":3266},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb, varchar, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User types table for Human and Assistant classifications\nexport const userTypes = pgTable(\"user_types\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 50 }).notNull().unique(), // 'human', 'assistant'\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User storage table for multi-provider auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  passwordHash: varchar(\"password_hash\"), // For email/password auth\n  emailVerified: boolean(\"email_verified\").default(false),\n  role: varchar(\"role\").default(\"user\"), // 'user', 'admin', 'super_admin'\n  isActive: boolean(\"is_active\").default(true),\n  tenantId: varchar(\"tenant_id\"), // For multi-tenant support\n  userTypeId: integer(\"user_type_id\").default(1), // Foreign key to user_types, defaults to 'human'\n  agentCategoryId: integer(\"agent_category_id\"), // Foreign key to agent_categories, for assistants only\n  about: text(\"about\"), // Bio/description for assistants\n  systemPrompt: text(\"system_prompt\"), // AI persona prompt for assistants\n  createdBy: varchar(\"created_by\"), // User ID who created this assistant (null for humans)\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Tenants table for multi-tenant SaaS management\nexport const tenants = pgTable(\"tenants\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  name: varchar(\"name\").notNull(),\n  domain: varchar(\"domain\").unique(),\n  isActive: boolean(\"is_active\").default(true),\n  plan: varchar(\"plan\").default(\"free\"), // 'free', 'pro', 'enterprise'\n  maxUsers: integer(\"max_users\").default(5),\n  maxCollections: integer(\"max_collections\").default(10),\n  maxDocuments: integer(\"max_documents\").default(100),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Admin audit log for tracking admin actions\nexport const adminAuditLog = pgTable(\"admin_audit_log\", {\n  id: serial(\"id\").primaryKey(),\n  adminId: varchar(\"admin_id\").notNull(),\n  action: varchar(\"action\").notNull(), // 'activate_tenant', 'deactivate_tenant', 'delete_user', etc.\n  targetType: varchar(\"target_type\").notNull(), // 'tenant', 'user', 'system'\n  targetId: varchar(\"target_id\").notNull(),\n  details: jsonb(\"details\").default(null),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const collections = pgTable(\"collections\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  userId: varchar(\"user_id\").notNull(),\n  visibilityTypeId: integer(\"visibility_type_id\").default(1), // Foreign key to visibility_types, defaults to Private\n  isDefault: boolean(\"is_default\").default(false), // For Personal Collection\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => [\n  // Ensure only one default (Personal) notebook per user\n  index(\"idx_user_default_collection\").on(table.userId, table.isDefault),\n]);\n\nexport const documents = pgTable(\"documents\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  content: text(\"content\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  size: integer(\"size\").notNull(),\n  type: varchar(\"type\", { length: 20 }).default(\"upload\"), // 'upload', 'bookmark'\n  sourcePostId: integer(\"source_post_id\"), // For bookmarked posts\n  userId: varchar(\"user_id\").notNull(), // Owner of the document\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow().notNull(),\n});\n\n// Junction table for many-to-many relationship between collections and documents\nexport const collectionDocuments = pgTable(\"collection_documents\", {\n  id: serial(\"id\").primaryKey(),\n  collectionId: integer(\"collection_id\").notNull(),\n  documentId: integer(\"document_id\").notNull(),\n  addedAt: timestamp(\"added_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_collection_documents_collection\").on(table.collectionId),\n  index(\"idx_collection_documents_document\").on(table.documentId),\n]);\n\nexport const conversations = pgTable(\"conversations\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  type: text(\"type\").notNull(), // 'independent' or 'collection'\n  collectionId: integer(\"collection_id\"),\n  userId: varchar(\"user_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  content: text(\"content\").notNull(),\n  role: text(\"role\").notNull(), // 'user' or 'assistant'\n  conversationId: integer(\"conversation_id\").notNull(),\n  sources: jsonb(\"sources\").default(null), // For collection-based responses with document references\n  artifactData: jsonb(\"artifact_data\").default(null), // For storing artifact metadata\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// New artifacts table for dedicated artifact storage\nexport const artifacts = pgTable(\"artifacts\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // 'code_playground', 'math_visualizer', 'document_generator', etc.\n  content: text(\"content\").notNull(), // The actual HTML/CSS/JS content\n  metadata: jsonb(\"metadata\").default(null), // Type-specific metadata\n  userId: varchar(\"user_id\").notNull(),\n  messageId: integer(\"message_id\"), // Optional link to original message\n  collectionId: integer(\"collection_id\"), // Optional link to collection\n  version: integer(\"version\").default(1),\n  isPublic: boolean(\"is_public\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Agent categories table for organizing AI assistants\nexport const agentCategories = pgTable(\"agent_categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull().unique(),\n  description: text(\"description\"),\n  slug: varchar(\"slug\", { length: 100 }).notNull().unique(),\n  color: varchar(\"color\", { length: 7 }).default(\"#3b82f6\"), // Hex color for category\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Visibility types table for collection privacy settings\nexport const visibilityTypes = pgTable(\"visibility_types\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 50 }).notNull().unique(), // 'private', 'shared', 'public'\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserTypeSchema = createInsertSchema(userTypes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCollectionSchema = createInsertSchema(collections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertCollectionDocumentSchema = createInsertSchema(collectionDocuments).omit({\n  id: true,\n  addedAt: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertArtifactSchema = createInsertSchema(artifacts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAgentCategorySchema = createInsertSchema(agentCategories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVisibilityTypeSchema = createInsertSchema(visibilityTypes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTenantSchema = createInsertSchema(tenants).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAdminAuditLogSchema = createInsertSchema(adminAuditLog).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UserType = typeof userTypes.$inferSelect;\nexport type InsertUserType = z.infer<typeof insertUserTypeSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpsertUser = typeof users.$inferInsert;\n\nexport type Tenant = typeof tenants.$inferSelect;\nexport type InsertTenant = z.infer<typeof insertTenantSchema>;\n\nexport type AdminAuditLog = typeof adminAuditLog.$inferSelect;\nexport type InsertAdminAuditLog = z.infer<typeof insertAdminAuditLogSchema>;\n\nexport type Collection = typeof collections.$inferSelect;\nexport type InsertCollection = z.infer<typeof insertCollectionSchema>;\n\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\n\nexport type CollectionDocument = typeof collectionDocuments.$inferSelect;\nexport type InsertCollectionDocument = z.infer<typeof insertCollectionDocumentSchema>;\n\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\n\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\nexport type Artifact = typeof artifacts.$inferSelect;\nexport type InsertArtifact = z.infer<typeof insertArtifactSchema>;\n\nexport type AgentCategory = typeof agentCategories.$inferSelect;\nexport type InsertAgentCategory = z.infer<typeof insertAgentCategorySchema>;\n\nexport type VisibilityType = typeof visibilityTypes.$inferSelect;\nexport type InsertVisibilityType = z.infer<typeof insertVisibilityTypeSchema>;\n\n// Topics table for categorizing posts and content\nexport const topics = pgTable(\"topics\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull().unique(),\n  slug: varchar(\"slug\", { length: 100 }).notNull().unique(),\n  description: text(\"description\"),\n  color: varchar(\"color\", { length: 7 }).default(\"#6366f1\"), // Hex color\n  icon: varchar(\"icon\", { length: 50 }), // Icon name\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Posts table for user-generated content\nexport const posts = pgTable(\"posts\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\"),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\"), // Auto-generated or manual excerpt\n  authorId: varchar(\"author_id\").notNull(),\n  topicId: integer(\"topic_id\").notNull(),\n  communityId: integer(\"community_id\"), // Optional association with community\n  type: varchar(\"type\", { length: 20 }).default(\"text\"), // 'text', 'link', 'highlight', 'question'\n  metadata: jsonb(\"metadata\").default(null), // For links, highlights, etc.\n  isPublished: boolean(\"is_published\").default(true),\n  isPinned: boolean(\"is_pinned\").default(false),\n  viewCount: integer(\"view_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Follows table for user connections\nexport const follows = pgTable(\"follows\", {\n  id: serial(\"id\").primaryKey(),\n  followerId: varchar(\"follower_id\").notNull(),\n  followingId: varchar(\"following_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_follows_follower\").on(table.followerId),\n  index(\"idx_follows_following\").on(table.followingId),\n]);\n\n// Likes table for posts, comments, etc.\nexport const likes = pgTable(\"likes\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  targetType: varchar(\"target_type\", { length: 20 }).notNull(), // 'post', 'comment'\n  targetId: integer(\"target_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_likes_user\").on(table.userId),\n  index(\"idx_likes_target\").on(table.targetType, table.targetId),\n]);\n\n// Comments table for post discussions\nexport const comments = pgTable(\"comments\", {\n  id: serial(\"id\").primaryKey(),\n  content: text(\"content\").notNull(),\n  authorId: varchar(\"author_id\").notNull(),\n  postId: integer(\"post_id\").notNull(),\n  parentId: integer(\"parent_id\"), // For nested comments\n  isEdited: boolean(\"is_edited\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_comments_post\").on(table.postId),\n  index(\"idx_comments_author\").on(table.authorId),\n]);\n\n// Bookmarks table for saved posts\nexport const bookmarks = pgTable(\"bookmarks\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  postId: integer(\"post_id\").notNull(),\n  collectionId: integer(\"collection_id\").notNull(), // Required: which notebook this bookmark is saved to\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_bookmarks_user\").on(table.userId),\n  index(\"idx_bookmarks_post\").on(table.postId),\n]);\n\n// Reposts table for sharing/reposting content\nexport const reposts = pgTable(\"reposts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  postId: integer(\"post_id\").notNull(),\n  comment: text(\"comment\"), // Optional comment when reposting\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_reposts_user\").on(table.userId),\n  index(\"idx_reposts_post\").on(table.postId),\n]);\n\n// User topic interests for personalization\nexport const userTopicInterests = pgTable(\"user_topic_interests\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  topicId: integer(\"topic_id\").notNull(),\n  interestLevel: integer(\"interest_level\").default(1), // 1-5 scale\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_user_topics\").on(table.userId, table.topicId),\n]);\n\n// Insert schemas for new tables\nexport const insertTopicSchema = createInsertSchema(topics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPostSchema = createInsertSchema(posts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  viewCount: true,\n});\n\nexport const insertFollowSchema = createInsertSchema(follows).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLikeSchema = createInsertSchema(likes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBookmarkSchema = createInsertSchema(bookmarks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRepostSchema = createInsertSchema(reposts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserTopicInterestSchema = createInsertSchema(userTopicInterests).omit({\n  id: true,\n  createdAt: true,\n});\n\n\n// Types for new tables\nexport type Topic = typeof topics.$inferSelect;\nexport type InsertTopic = z.infer<typeof insertTopicSchema>;\n\nexport type Post = typeof posts.$inferSelect;\nexport type InsertPost = z.infer<typeof insertPostSchema>;\n\nexport type Follow = typeof follows.$inferSelect;\nexport type InsertFollow = z.infer<typeof insertFollowSchema>;\n\nexport type Like = typeof likes.$inferSelect;\nexport type InsertLike = z.infer<typeof insertLikeSchema>;\n\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\n\nexport type Bookmark = typeof bookmarks.$inferSelect;\nexport type InsertBookmark = z.infer<typeof insertBookmarkSchema>;\n\nexport type Repost = typeof reposts.$inferSelect;\nexport type InsertRepost = z.infer<typeof insertRepostSchema>;\n\nexport type UserTopicInterest = typeof userTopicInterests.$inferSelect;\nexport type InsertUserTopicInterest = z.infer<typeof insertUserTopicInterestSchema>;\n\n\n// Tags table for organizing content\nexport const tags = pgTable(\"tags\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 50 }).notNull().unique(),\n  description: text(\"description\"),\n  color: varchar(\"color\", { length: 7 }).default(\"#3B82F6\"), // Hex color code\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Communities table for user-created discussion groups\nexport const communities = pgTable(\"communities\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  bannerImage: varchar(\"banner_image\"),\n  visibility: varchar(\"visibility\", { length: 20 }).default(\"public\"), // 'public', 'private', 'invite_only'\n  createdBy: varchar(\"created_by\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_communities_creator\").on(table.createdBy),\n  index(\"idx_communities_active\").on(table.isActive),\n]);\n\n// Community tags junction table\nexport const communityTags = pgTable(\"community_tags\", {\n  id: serial(\"id\").primaryKey(),\n  communityId: integer(\"community_id\").notNull(),\n  tagId: integer(\"tag_id\").notNull(),\n}, (table) => [\n  index(\"idx_community_tags_community\").on(table.communityId),\n  index(\"idx_community_tags_tag\").on(table.tagId),\n]);\n\n// User communities junction table for membership\nexport const userCommunities = pgTable(\"user_communities\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  communityId: integer(\"community_id\").notNull(),\n  joinDate: timestamp(\"join_date\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_user_communities_user\").on(table.userId),\n  index(\"idx_user_communities_community\").on(table.communityId),\n]);\n\n// Tasks table for scheduled AI tasks\nexport const tasks = pgTable(\"tasks\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  prompt: text(\"prompt\").notNull(), // AI prompt to execute\n  schedule: varchar(\"schedule\"), // Cron expression or schedule\n  isActive: boolean(\"is_active\").default(true),\n  lastRun: timestamp(\"last_run\"),\n  nextRun: timestamp(\"next_run\"),\n  userId: varchar(\"user_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_tasks_user\").on(table.userId),\n  index(\"idx_tasks_next_run\").on(table.nextRun),\n]);\n\n// Insert schemas for tags, communities and tasks  \nexport const insertTagSchema = createInsertSchema(tags).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCommunitySchema = createInsertSchema(communities).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCommunityTagSchema = createInsertSchema(communityTags).omit({\n  id: true,\n});\n\nexport const insertUserCommunitySchema = createInsertSchema(userCommunities).omit({\n  id: true,\n  joinDate: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastRun: true,\n});\n\n// Types for tags, communities and tasks\nexport type Tag = typeof tags.$inferSelect;\nexport type InsertTag = z.infer<typeof insertTagSchema>;\n\nexport type Community = typeof communities.$inferSelect;\nexport type InsertCommunity = z.infer<typeof insertCommunitySchema>;\n\nexport type CommunityTag = typeof communityTags.$inferSelect;\nexport type InsertCommunityTag = z.infer<typeof insertCommunityTagSchema>;\n\nexport type UserCommunity = typeof userCommunities.$inferSelect;\nexport type InsertUserCommunity = z.infer<typeof insertUserCommunitySchema>;\n\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n\n// Extended types for API responses\nexport type CollectionWithStats = Collection & {\n  documentCount: number;\n  lastUsed?: string;\n};\n\nexport type ConversationWithPreview = Conversation & {\n  preview: string;\n  messageCount: number;\n  lastMessage?: string;\n};\n\n// Admin dashboard types\nexport type TenantWithStats = Tenant & {\n  userCount: number;\n  collectionCount: number;\n  documentCount: number;\n  conversationCount: number;\n  lastActivity?: string;\n};\n\nexport type UserWithTenant = User & {\n  tenant?: Tenant;\n  activityStats?: {\n    collectionCount: number;\n    conversationCount: number;\n    lastActivity?: string;\n  };\n};\n\nexport type AdminDashboardStats = {\n  totalTenants: number;\n  activeTenants: number;\n  totalUsers: number;\n  activeUsers: number;\n  totalCollections: number;\n  totalDocuments: number;\n  totalConversations: number;\n  newUsersThisMonth: number;\n  recentActivity: Array<{\n    type: string;\n    description: string;\n    timestamp: string;\n    userId?: string;\n    tenantId?: string;\n  }>;\n};\n\n// Enhanced types for social features\nexport type PostWithDetails = Post & {\n  author: {\n    id: string;\n    firstName: string | null;\n    lastName: string | null;\n    profileImageUrl: string | null;\n  };\n  topic: Topic;\n  collection?: Collection;\n  stats: {\n    likeCount: number;\n    commentCount: number;\n    repostCount: number;\n    bookmarkCount: number;\n  };\n  userActions: {\n    isLiked: boolean;\n    isBookmarked: boolean;\n    isReposted: boolean;\n    isFollowing: boolean;\n  };\n};\n\nexport type CommentWithDetails = Comment & {\n  author: {\n    id: string;\n    firstName: string | null;\n    lastName: string | null;\n    profileImageUrl: string | null;\n  };\n  stats: {\n    likeCount: number;\n    replyCount: number;\n  };\n  userActions: {\n    isLiked: boolean;\n  };\n  replies?: CommentWithDetails[];\n};\n\nexport type UserProfile = User & {\n  stats: {\n    postCount: number;\n    followerCount: number;\n    followingCount: number;\n    likeCount: number;\n  };\n  userActions: {\n    isFollowing: boolean;\n    isFollowedBy: boolean;\n  };\n  topInterests: Topic[];\n};\n\nexport type FeedItem = {\n  id: string;\n  type: 'post' | 'repost' | 'like' | 'follow' | 'comment';\n  post?: PostWithDetails;\n  actor?: {\n    id: string;\n    firstName: string | null;\n    lastName: string | null;\n    profileImageUrl: string | null;\n  };\n  action?: string;\n  createdAt: string;\n};\n\n// Community types with stats\nexport type CommunityWithStats = Community & {\n  memberCount: number;\n  postCount: number;\n  isJoined?: boolean;\n  tags: Tag[];\n  creator: {\n    id: string;\n    firstName: string | null;\n    lastName: string | null;\n    profileImageUrl: string | null;\n  };\n};\n\n// Subscription Plans table for Premium/Pro tiers\nexport const subscriptionPlans = pgTable(\"subscription_plans\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 50 }).notNull().unique(), // 'free', 'pro', 'premium'\n  displayName: varchar(\"display_name\", { length: 100 }).notNull(), // 'Free', 'Pro', 'Premium'\n  description: text(\"description\"),\n  price: integer(\"price\").notNull(), // Price in cents (e.g., 999 for $9.99)\n  interval: varchar(\"interval\", { length: 20 }).default(\"month\"), // 'month', 'year'\n  credits: integer(\"credits\").notNull(), // Monthly credit allowance\n  maxNotebooks: integer(\"max_notebooks\").default(1),\n  maxTasks: integer(\"max_tasks\").default(1),\n  maxAgents: integer(\"max_agents\").default(1),\n  maxCommunities: integer(\"max_communities\").default(1),\n  features: text(\"features\").array(), // Array of feature descriptions\n  isActive: boolean(\"is_active\").default(true),\n  stripePriceId: varchar(\"stripe_price_id\"), // Stripe price ID for payments\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User Subscriptions table for tracking current plans\nexport const userSubscriptions = pgTable(\"user_subscriptions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  planId: integer(\"plan_id\").notNull(),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  status: varchar(\"status\", { length: 20 }).default(\"active\"), // 'active', 'canceled', 'past_due', 'unpaid'\n  currentPeriodStart: timestamp(\"current_period_start\"),\n  currentPeriodEnd: timestamp(\"current_period_end\"),\n  cancelAtPeriodEnd: boolean(\"cancel_at_period_end\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_user_subscriptions_user\").on(table.userId),\n  index(\"idx_user_subscriptions_stripe\").on(table.stripeSubscriptionId),\n]);\n\n// Credit Transactions table for tracking credit usage and purchases\nexport const creditTransactions = pgTable(\"credit_transactions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  type: varchar(\"type\", { length: 30 }).notNull(), // 'subscription_grant', 'purchase', 'usage', 'gift_sent', 'gift_received'\n  amount: integer(\"amount\").notNull(), // Positive for credits added, negative for usage\n  balance: integer(\"balance\").notNull(), // User's balance after this transaction\n  description: text(\"description\").notNull(),\n  metadata: jsonb(\"metadata\").default(null), // Additional context (feature used, gift sender, etc.)\n  referenceId: varchar(\"reference_id\"), // Reference to subscription, purchase, or gift\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_credit_transactions_user\").on(table.userId),\n  index(\"idx_credit_transactions_type\").on(table.type),\n]);\n\n// User Credits table for current balances\nexport const userCredits = pgTable(\"user_credits\", {\n  userId: varchar(\"user_id\").primaryKey(),\n  balance: integer(\"balance\").default(0),\n  monthlyAllowance: integer(\"monthly_allowance\").default(0), // From subscription\n  lastRefreshDate: timestamp(\"last_refresh_date\").defaultNow(), // When monthly credits were last added\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_user_credits_balance\").on(table.balance),\n]);\n\n// Credit Gifts table for peer-to-peer credit transfers\nexport const creditGifts = pgTable(\"credit_gifts\", {\n  id: serial(\"id\").primaryKey(),\n  fromUserId: varchar(\"from_user_id\").notNull(),\n  toUserId: varchar(\"to_user_id\").notNull(),\n  amount: integer(\"amount\").notNull(),\n  message: text(\"message\"),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"), // 'pending', 'accepted', 'declined'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  acceptedAt: timestamp(\"accepted_at\"),\n}, (table) => [\n  index(\"idx_credit_gifts_to_user\").on(table.toUserId),\n  index(\"idx_credit_gifts_from_user\").on(table.fromUserId),\n]);\n\n// Insert schemas for subscription tables\nexport const insertSubscriptionPlanSchema = createInsertSchema(subscriptionPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSubscriptionSchema = createInsertSchema(userSubscriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCreditTransactionSchema = createInsertSchema(creditTransactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserCreditsSchema = createInsertSchema(userCredits).omit({\n  lastRefreshDate: true,\n  updatedAt: true,\n});\n\nexport const insertCreditGiftSchema = createInsertSchema(creditGifts).omit({\n  id: true,\n  createdAt: true,\n  acceptedAt: true,\n});\n\n// Types for subscription tables\nexport type SubscriptionPlan = typeof subscriptionPlans.$inferSelect;\nexport type InsertSubscriptionPlan = z.infer<typeof insertSubscriptionPlanSchema>;\n\nexport type UserSubscription = typeof userSubscriptions.$inferSelect;\nexport type InsertUserSubscription = z.infer<typeof insertUserSubscriptionSchema>;\n\nexport type CreditTransaction = typeof creditTransactions.$inferSelect;\nexport type InsertCreditTransaction = z.infer<typeof insertCreditTransactionSchema>;\n\nexport type UserCredits = typeof userCredits.$inferSelect;\nexport type InsertUserCredits = z.infer<typeof insertUserCreditsSchema>;\n\nexport type CreditGift = typeof creditGifts.$inferSelect;\nexport type InsertCreditGift = z.infer<typeof insertCreditGiftSchema>;\n\n// Enhanced types for subscription management\nexport type UserSubscriptionWithPlan = UserSubscription & {\n  plan: SubscriptionPlan;\n};\n\nexport type UserDashboardData = {\n  subscription: UserSubscriptionWithPlan;\n  credits: UserCredits;\n  usage: {\n    thisMonth: {\n      aiPosts: number;\n      agentInteractions: number;\n      taskRuns: number;\n      creditsUsed: number;\n    };\n    breakdown: Array<{\n      feature: string;\n      creditsUsed: number;\n      percentage: number;\n    }>;\n  };\n  recentTransactions: CreditTransaction[];\n};\n","size_bytes":29135},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/contexts/AuthContext\";\nimport { GoogleOAuthWrapper } from \"@/providers/GoogleOAuthProvider\";\nimport { AuthPage } from \"@/components/auth/AuthPage\";\n\nimport SimpleLanding from \"@/pages/simple-landing\";\nimport ModernLanding from \"@/pages/modern-landing\";\nimport SocialLanding from \"@/pages/social-landing\";\nimport Community from \"@/pages/community\";\nimport Home from \"@/pages/home\";\nimport Chat from \"@/pages/chat\";\nimport MyCollections from \"@/pages/my-collections\";\nimport Discover from \"@/pages/discover\";\nimport Collections from \"@/pages/collections\";\nimport CollectionDetail from \"@/pages/collection-detail\";\nimport Communities from \"@/pages/communities\";\nimport CommunityDetail from \"@/pages/community-detail\";\nimport Tasks from \"@/pages/tasks\";\nimport Conversations from \"@/pages/conversations\";\nimport Conversation from \"@/pages/conversation\";\nimport ArtifactsPage from \"@/pages/artifacts\";\nimport Agents from \"@/pages/agents\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport Profile from \"@/pages/profile\";\nimport UsageDashboard from \"@/pages/usage-dashboard\";\nimport NotFound from \"@/pages/not-found\";\nimport { MainLayout } from \"@/components/layout/MainLayout\";\n\nfunction Router() {\n  const { user, loading } = useAuth();\n\n  console.log('Router state:', { user: !!user, loading, showAuth: !user && !loading });\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    console.log('Showing landing page');\n    return (\n      <Switch>\n        <Route path=\"/\" component={SocialLanding} />\n        <Route path=\"/auth\">{(props) => <AuthPage embedded={false} />}</Route>\n        <Route path=\"/simple\" component={SimpleLanding} />\n        <Route path=\"/modern\" component={ModernLanding} />\n        <Route component={NotFound} />\n      </Switch>\n    );\n  }\n\n  console.log('Showing authenticated routes');\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/chat\" component={Chat} />\n      <Route path=\"/my-collections\" component={MyCollections} />\n      <Route path=\"/discover\" component={Discover} />\n      <Route path=\"/agents\" component={Agents} />\n      <Route path=\"/collections\" component={Collections} />\n      <Route path=\"/collections/:id\" component={CollectionDetail} />\n      <Route path=\"/communities\" component={Communities} />\n      <Route path=\"/communities/:id\" component={CommunityDetail} />\n      <Route path=\"/tasks\" component={Tasks} />\n      <Route path=\"/conversations\" component={Conversations} />\n      <Route path=\"/conversations/:id\" component={Conversation} />\n      <Route path=\"/artifacts\" component={ArtifactsPage} />\n      <Route path=\"/billing\" component={UsageDashboard} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <GoogleOAuthWrapper>\n        <AuthProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </AuthProvider>\n      </GoogleOAuthWrapper>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3819},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Container utility for Bootstrap-style centering */\n.container {\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n@media (min-width: 640px) {\n  .container {\n    padding-left: 1.5rem;\n    padding-right: 1.5rem;\n  }\n}\n\n@media (min-width: 1024px) {\n  .container {\n    padding-left: 2rem;\n    padding-right: 2rem;\n  }\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(248, 100%, 67%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(248, 100%, 67%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-gray-50 text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  }\n}\n\n@layer utilities {\n  .gradient-primary {\n    background: linear-gradient(135deg, hsl(248, 100%, 67%) 0%, hsl(271, 81%, 56%) 100%);\n  }\n  \n  .gradient-bg {\n    background: linear-gradient(135deg, hsl(248, 100%, 67%) 0%, hsl(271, 81%, 56%) 100%);\n  }\n\n  .gradient-card {\n    background: linear-gradient(135deg, rgba(248, 250, 252, 0.8) 0%, rgba(255, 255, 255, 0.9) 100%);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(139, 92, 246, 0.1);\n  }\n\n  .gradient-sidebar {\n    background: linear-gradient(180deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 250, 252, 0.9) 100%);\n    backdrop-filter: blur(8px);\n  }\n}\n","size_bytes":2762},"client/src/main.tsx":{"content":"import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport posthog from 'posthog-js';\n\n// Initialize PostHog with the provided API key and host\nposthog.init('phc_2jUnDMt7gEMy2NZgH6e09AhCS7UbusZYfqRg9bgW906', {\n  api_host: 'https://us.i.posthog.com',\n});\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","size_bytes":435},"server/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.SUPABASE_URL\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY\nconst supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseServiceKey) {\n  throw new Error('Missing Supabase environment variables')\n}\n\n// Admin client for backend operations (user creation, etc.)\nexport const supabase = createClient(supabaseUrl, supabaseServiceKey)\n\n// User client for token validation - uses same keys as frontend\nexport const supabaseUser = createClient(supabaseUrl, supabaseAnonKey || supabaseServiceKey)","size_bytes":619},"server/routes/admin.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport { storage } from \"../storage\";\nimport { insertTenantSchema } from \"@shared/schema\";\nimport { isAuthenticated, getUserId } from \"../supabaseAuth\";\n\n// Admin authentication middleware\nexport const requireAdmin = async (req: Request, res: Response, next: Function) => {\n  try {\n    const userId = getUserId(req);\n    if (!userId) {\n      return res.status(401).json({ error: \"Unauthorized\" });\n    }\n\n    const isAdmin = await storage.isAdmin(userId);\n    if (!isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n\n    next();\n  } catch (error) {\n    console.error(\"Admin auth error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\nexport function registerAdminRoutes(app: Express) {\n  // Admin dashboard stats\n  app.get(\"/api/admin/dashboard\", isAuthenticated, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const stats = await storage.getAdminDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Dashboard stats error:\", error);\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Tenant management\n  app.get(\"/api/admin/tenants\", isAuthenticated, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const tenants = await storage.getTenants();\n      res.json(tenants);\n    } catch (error) {\n      console.error(\"Fetch tenants error:\", error);\n      res.status(500).json({ error: \"Failed to fetch tenants\" });\n    }\n  });\n\n  app.post(\"/api/admin/tenants\", isAuthenticated, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const tenantData = insertTenantSchema.parse(req.body);\n      const tenant = await storage.createTenant(tenantData);\n      \n      // Log admin action\n      await storage.logAdminAction({\n        adminId: getUserId(req),\n        action: 'create_tenant',\n        targetType: 'tenant',\n        targetId: tenant.id,\n        details: { tenantName: tenant.name }\n      });\n      \n      res.json(tenant);\n    } catch (error) {\n      console.error(\"Create tenant error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid tenant data\" });\n      }\n      res.status(500).json({ error: \"Failed to create tenant\" });\n    }\n  });\n\n  app.put(\"/api/admin/tenants/:id\", isAuthenticated, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const tenant = await storage.updateTenant(id, updates);\n      \n      if (!tenant) {\n        return res.status(404).json({ error: \"Tenant not found\" });\n      }\n      \n      // Log admin action\n      await storage.logAdminAction({\n        adminId: getUserId(req),\n        action: 'update_tenant',\n        targetType: 'tenant',\n        targetId: id,\n        details: { tenantName: tenant.name, updates }\n      });\n      \n      res.json(tenant);\n    } catch (error) {\n      console.error(\"Update tenant error:\", error);\n      res.status(500).json({ error: \"Failed to update tenant\" });\n    }\n  });\n\n  app.post(\"/api/admin/tenants/:id/activate\", isAuthenticated, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const adminId = getUserId(req);\n      const success = await storage.activateTenant(id, adminId);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Tenant not found\" });\n      }\n      \n      res.json({ message: \"Tenant activated successfully\" });\n    } catch (error) {\n      console.error(\"Activate tenant error:\", error);\n      res.status(500).json({ error: \"Failed to activate tenant\" });\n    }\n  });\n\n  app.post(\"/api/admin/tenants/:id/deactivate\", isAuthenticated, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const adminId = getUserId(req);\n      const success = await storage.deactivateTenant(id, adminId);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Tenant not found\" });\n      }\n      \n      res.json({ message: \"Tenant deactivated successfully\" });\n    } catch (error) {\n      console.error(\"Deactivate tenant error:\", error);\n      res.status(500).json({ error: \"Failed to deactivate tenant\" });\n    }\n  });\n\n  // User management\n  app.get(\"/api/admin/users\", isAuthenticated, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const { tenantId, isActive } = req.query;\n      const filters: any = {};\n      \n      if (tenantId) filters.tenantId = tenantId as string;\n      if (isActive !== undefined) filters.isActive = isActive === 'true';\n      \n      const users = await storage.getAllUsers(filters);\n      res.json(users);\n    } catch (error) {\n      console.error(\"Fetch users error:\", error);\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/admin/users/:id/activate\", isAuthenticated, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const adminId = getUserId(req);\n      const success = await storage.updateUserStatus(id, true, adminId);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({ message: \"User activated successfully\" });\n    } catch (error) {\n      console.error(\"Activate user error:\", error);\n      res.status(500).json({ error: \"Failed to activate user\" });\n    }\n  });\n\n  app.post(\"/api/admin/users/:id/deactivate\", isAuthenticated, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const adminId = getUserId(req);\n      const success = await storage.updateUserStatus(id, false, adminId);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({ message: \"User deactivated successfully\" });\n    } catch (error) {\n      console.error(\"Deactivate user error:\", error);\n      res.status(500).json({ error: \"Failed to deactivate user\" });\n    }\n  });\n\n  app.post(\"/api/admin/users/:id/role\", isAuthenticated, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { role } = req.body;\n      const adminId = getUserId(req);\n      \n      if (!['user', 'admin', 'super_admin'].includes(role)) {\n        return res.status(400).json({ error: \"Invalid role\" });\n      }\n      \n      const success = await storage.updateUserRole(id, role, adminId);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({ message: \"User role updated successfully\" });\n    } catch (error) {\n      console.error(\"Update user role error:\", error);\n      res.status(500).json({ error: \"Failed to update user role\" });\n    }\n  });\n\n  // Audit logs\n  app.get(\"/api/admin/audit-logs\", isAuthenticated, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const { adminId, targetType, limit } = req.query;\n      const filters: any = {};\n      \n      if (adminId) filters.adminId = adminId as string;\n      if (targetType) filters.targetType = targetType as string;\n      if (limit) filters.limit = parseInt(limit as string);\n      \n      const logs = await storage.getAdminAuditLogs(filters);\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Fetch audit logs error:\", error);\n      res.status(500).json({ error: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  // System health check\n  app.get(\"/api/admin/health\", isAuthenticated, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const stats = await storage.getAdminDashboardStats();\n      res.json({\n        status: \"healthy\",\n        timestamp: new Date().toISOString(),\n        version: \"1.0.0\",\n        environment: process.env.NODE_ENV || \"development\",\n        stats: {\n          totalTenants: stats.totalTenants,\n          totalUsers: stats.totalUsers,\n          activeUsers: stats.activeUsers,\n        }\n      });\n    } catch (error) {\n      console.error(\"Health check error:\", error);\n      res.status(500).json({ \n        status: \"unhealthy\", \n        error: \"Database connection failed\",\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n}","size_bytes":8366},"server/routes/auth.ts":{"content":"import { type Express, type Request, type Response } from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"../storage\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst signUpSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nconst signInSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';\n\nexport function setupAuthRoutes(app: Express) {\n  // Sign up route - creates user in our database\n  app.post(\"/api/auth/signup\", async (req: Request, res: Response) => {\n    try {\n      const { email, password } = signUpSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User with this email already exists\" });\n      }\n\n      // Hash the password\n      const saltRounds = 12;\n      const passwordHash = await bcrypt.hash(password, saltRounds);\n\n      // Create user in our database\n      const userId = crypto.randomUUID();\n      const newUser = await storage.createUser({\n        id: userId,\n        email,\n        passwordHash,\n        emailVerified: true, // Auto-verify for development\n        role: \"user\",\n        isActive: true,\n      });\n\n      console.log(\"User created successfully:\", newUser.email);\n\n      res.json({ \n        success: true, \n        message: \"Account created successfully! You can now sign in.\",\n        userId: newUser.id \n      });\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input data\" });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Sign in route - authenticates user and returns JWT\n  app.post(\"/api/auth/signin\", async (req: Request, res: Response) => {\n    try {\n      const { email, password } = signInSchema.parse(req.body);\n      \n      // Get user from database\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid email or password\" });\n      }\n\n      // Check if user has a password hash\n      if (!user.passwordHash) {\n        return res.status(401).json({ error: \"Please use Google sign-in for this account\" });\n      }\n\n      // Verify password\n      const isPasswordValid = await bcrypt.compare(password, user.passwordHash);\n      if (!isPasswordValid) {\n        return res.status(401).json({ error: \"Invalid email or password\" });\n      }\n\n      // Check if user is active\n      if (!user.isActive) {\n        return res.status(401).json({ error: \"Account is deactivated\" });\n      }\n\n      // Generate JWT token\n      const token = jwt.sign(\n        { \n          userId: user.id, \n          email: user.email,\n          role: user.role \n        },\n        JWT_SECRET,\n        { expiresIn: '7d' }\n      );\n\n      console.log(\"User signed in successfully:\", user.email);\n\n      res.json({ \n        success: true,\n        token,\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n          role: user.role,\n        }\n      });\n    } catch (error) {\n      console.error(\"Signin error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input data\" });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // User endpoint - validates JWT and returns user data\n  app.get(\"/api/auth/user\", async (req: Request, res: Response) => {\n    try {\n      const authHeader = req.headers.authorization;\n      console.log(\"Auth header received:\", authHeader ? `Bearer ${authHeader.substring(7, 20)}...` : \"None\");\n      \n      if (!authHeader?.startsWith('Bearer ')) {\n        console.log(\"Invalid auth header format\");\n        return res.status(401).json({ error: \"Unauthorized\" });\n      }\n\n      const token = authHeader.split(' ')[1];\n      console.log(\"Token received, attempting JWT verification\");\n      \n      // Verify JWT token\n      let decoded;\n      try {\n        decoded = jwt.verify(token, JWT_SECRET) as { userId: string; email: string; role: string };\n        console.log(\"JWT verified successfully for user:\", decoded.email);\n      } catch (jwtError: any) {\n        console.log(\"JWT verification failed:\", jwtError.message);\n        return res.status(401).json({ error: \"Invalid or expired token\" });\n      }\n\n      // Get user from database\n      const user = await storage.getUser(decoded.userId);\n      if (!user) {\n        console.log(\"User not found in database:\", decoded.userId);\n        return res.status(401).json({ error: \"User not found\" });\n      }\n\n      // Check if user is still active\n      if (!user.isActive) {\n        console.log(\"User account is deactivated:\", user.email);\n        return res.status(401).json({ error: \"Account is deactivated\" });\n      }\n\n      console.log(\"Authentication successful for user:\", user.email);\n      res.json({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        profileImageUrl: user.profileImageUrl,\n        role: user.role,\n      });\n    } catch (error) {\n      console.error(\"User validation error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Sign out route (for completeness)\n  app.post(\"/api/auth/signout\", async (req: Request, res: Response) => {\n    // With JWT, we don't need to do anything server-side for logout\n    // The client will simply remove the token\n    res.json({ success: true, message: \"Signed out successfully\" });\n  });\n}\n\n// JWT Authentication Middleware\nexport const jwtAuth = async (req: any, res: any, next: any) => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader?.startsWith('Bearer ')) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const token = authHeader.split(' ')[1];\n    \n    // Verify JWT token\n    let decoded;\n    try {\n      decoded = jwt.verify(token, JWT_SECRET) as { userId: string; email: string; role: string };\n    } catch (jwtError: any) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    // Get user from database\n    const user = await storage.getUser(decoded.userId);\n    if (!user || !user.isActive) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    // Add user to request object\n    req.user = user;\n    req.userId = user.id;\n    next();\n  } catch (error) {\n    console.error(\"JWT auth error:\", error);\n    res.status(401).json({ message: \"Unauthorized\" });\n  }\n};\n\n// Get user ID helper function  \nexport const getJwtUserId = (req: any): string => {\n  return req.userId;\n};","size_bytes":7017},"server/routes/follows.ts":{"content":"import type { Express } from \"express\";\nimport { db } from \"../db\";\nimport { follows, users, insertFollowSchema } from \"@shared/schema\";\nimport { eq, and, sql } from \"drizzle-orm\";\n\nexport function registerFollowRoutes(app: Express) {\n  \n  // Follow/unfollow a user\n  app.post(\"/api/users/:id/follow\", async (req, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      if (!userId) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const followingId = req.params.id;\n\n      if (userId === followingId) {\n        return res.status(400).json({ error: \"Cannot follow yourself\" });\n      }\n\n      // Check if already following\n      const existingFollow = await db\n        .select()\n        .from(follows)\n        .where(and(\n          eq(follows.followerId, userId),\n          eq(follows.followingId, followingId)\n        ))\n        .limit(1);\n\n      if (existingFollow.length > 0) {\n        // Unfollow\n        await db\n          .delete(follows)\n          .where(and(\n            eq(follows.followerId, userId),\n            eq(follows.followingId, followingId)\n          ));\n        res.json({ following: false });\n      } else {\n        // Follow\n        await db\n          .insert(follows)\n          .values({\n            followerId: userId,\n            followingId,\n          });\n        res.json({ following: true });\n      }\n    } catch (error) {\n      console.error(\"Error toggling follow:\", error);\n      res.status(500).json({ error: \"Failed to toggle follow\" });\n    }\n  });\n\n  // Get user's followers\n  app.get(\"/api/users/:id/followers\", async (req, res) => {\n    try {\n      const userId = req.params.id;\n\n      const followers = await db\n        .select({\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n          followedAt: follows.createdAt,\n        })\n        .from(follows)\n        .leftJoin(users, eq(follows.followerId, users.id))\n        .where(eq(follows.followingId, userId));\n\n      res.json(followers);\n    } catch (error) {\n      console.error(\"Error fetching followers:\", error);\n      res.status(500).json({ error: \"Failed to fetch followers\" });\n    }\n  });\n\n  // Get user's following\n  app.get(\"/api/users/:id/following\", async (req, res) => {\n    try {\n      const userId = req.params.id;\n\n      const following = await db\n        .select({\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n          followedAt: follows.createdAt,\n        })\n        .from(follows)\n        .leftJoin(users, eq(follows.followingId, users.id))\n        .where(eq(follows.followerId, userId));\n\n      res.json(following);\n    } catch (error) {\n      console.error(\"Error fetching following:\", error);\n      res.status(500).json({ error: \"Failed to fetch following\" });\n    }\n  });\n\n  // Get follow statistics for a user\n  app.get(\"/api/users/:id/follow-stats\", async (req, res) => {\n    try {\n      const userId = req.params.id;\n\n      const [followerCount, followingCount] = await Promise.all([\n        db\n          .select({ count: sql<number>`CAST(COUNT(*) as INTEGER)` })\n          .from(follows)\n          .where(eq(follows.followingId, userId)),\n        \n        db\n          .select({ count: sql<number>`CAST(COUNT(*) as INTEGER)` })\n          .from(follows)\n          .where(eq(follows.followerId, userId))\n      ]);\n\n      res.json({\n        followerCount: followerCount[0]?.count || 0,\n        followingCount: followingCount[0]?.count || 0,\n      });\n    } catch (error) {\n      console.error(\"Error fetching follow stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch follow stats\" });\n    }\n  });\n}","size_bytes":3792},"server/routes/googleAuth.ts":{"content":"import type { Express } from \"express\";\nimport { supabase } from \"../lib/supabase\";\nimport { storage } from \"../storage\";\n\nexport function setupGoogleAuth(app: Express) {\n  app.post(\"/api/auth/google\", async (req, res) => {\n    try {\n      const { credential } = req.body;\n      \n      if (!credential) {\n        return res.status(400).json({ error: \"Google credential is required\" });\n      }\n\n      // Decode the JWT credential from Google\n      let userInfo;\n      try {\n        console.log(\"Received credential:\", credential.substring(0, 100) + \"...\");\n        \n        // JWT has 3 parts separated by dots: header.payload.signature\n        const parts = credential.split('.');\n        console.log(\"JWT parts count:\", parts.length);\n        \n        if (parts.length !== 3) {\n          throw new Error('Invalid JWT format');\n        }\n        \n        // Decode the payload (middle part) - JWT uses base64url encoding\n        const payload = parts[1];\n        console.log(\"Payload length:\", payload.length);\n        \n        // Convert base64url to base64 by replacing URL-safe characters\n        const base64Payload = payload.replace(/-/g, '+').replace(/_/g, '/');\n        // Add padding if needed for base64 decoding\n        const paddedPayload = base64Payload + '='.repeat((4 - base64Payload.length % 4) % 4);\n        \n        console.log(\"Attempting to decode payload...\");\n        const decodedPayload = Buffer.from(paddedPayload, 'base64').toString();\n        console.log(\"Decoded payload:\", decodedPayload.substring(0, 100) + \"...\");\n        \n        userInfo = JSON.parse(decodedPayload);\n        console.log(\"Parsed user info:\", { email: userInfo.email, name: userInfo.name });\n      } catch (error) {\n        console.error(\"Failed to decode JWT credential:\", error);\n        return res.status(400).json({ error: \"Invalid credential format\" });\n      }\n\n      console.log(\"Processing Google login for user:\", userInfo.email);\n\n      // First, check if a user with this email already exists in our database\n      console.log(\"Checking for existing user with email:\", userInfo.email);\n      const existingUserByEmail = await storage.getUserByEmail(userInfo.email || '');\n      console.log(\"Found existing user by email:\", !!existingUserByEmail, existingUserByEmail?.id);\n      \n      if (existingUserByEmail) {\n        // User exists with this email, use the existing one\n        const dbUser = existingUserByEmail;\n        console.log(\"Using existing user by email:\", dbUser.email);\n        \n        // For existing users, we'll use the database user and create a simple session\n        console.log(\"Returning session for existing user\");\n        \n        try {\n          // Return session for existing user\n          const responseData = {\n            access_token: `snappy_${dbUser.id}_${Date.now()}`, // Simple token for existing users\n            refresh_token: `refresh_${dbUser.id}_${Date.now()}`,\n            user: {\n              id: dbUser.id,\n              email: dbUser.email,\n              firstName: dbUser.firstName,\n              lastName: dbUser.lastName,\n              profileImageUrl: dbUser.profileImageUrl,\n            },\n          };\n          \n          console.log(\"Sending response:\", JSON.stringify(responseData, null, 2));\n          res.json(responseData);\n          return;\n        } catch (error) {\n          console.error(\"Error generating session for existing user:\", error);\n          return res.status(500).json({ error: \"Failed to generate session for existing user\" });\n        }\n      }\n      \n      // For new users, continue with Supabase authentication\n      console.log(\"New user, continuing with Supabase auth\");\n      \n      // Try to sign in with existing user in Supabase\n      console.log(\"Attempting to sign in with email:\", userInfo.email);\n      const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({\n        email: userInfo.email,\n        password: userInfo.sub // Use Google sub as a unique identifier\n      });\n\n      console.log(\"Sign in error:\", !!signInError, signInError?.message);\n      console.log(\"Sign in data:\", !!signInData, !!signInData?.user, !!signInData?.session);\n\n      let user;\n      let sessionData;\n\n      if (signInError) {\n        // User doesn't exist, create a new one\n        console.log(\"Creating new user with email:\", userInfo.email);\n        const { data: signUpData, error: signUpError } = await supabase.auth.signUp({\n          email: userInfo.email,\n          password: userInfo.sub, // Use Google sub as a unique identifier\n          options: {\n            data: {\n              name: userInfo.name,\n              avatar_url: userInfo.picture,\n              provider: 'google',\n            }\n          }\n        });\n\n        console.log(\"Sign up error:\", !!signUpError, signUpError?.message);\n        console.log(\"Sign up data:\", !!signUpData, !!signUpData?.user, !!signUpData?.session);\n\n        if (signUpError) {\n          console.error(\"User creation error:\", signUpError);\n          return res.status(500).json({ error: \"Failed to create user\" });\n        }\n\n        user = signUpData.user;\n        sessionData = signUpData.session;\n      } else {\n        user = signInData.user;\n        sessionData = signInData.session;\n      }\n\n      if (!user) {\n        return res.status(500).json({ error: \"Authentication failed\" });\n      }\n      \n      // Check if Supabase user exists in our database\n      let dbUser = await storage.getUser(user.id);\n      console.log(\"Supabase user lookup by ID:\", user.id, \"found:\", !!dbUser);\n      \n      if (!dbUser) {\n        // Create new user in our database\n        console.log(\"Creating new user with ID:\", user.id);\n        dbUser = await storage.upsertUser({\n          id: user.id,\n          email: user.email || '',\n          firstName: userInfo.given_name || userInfo.name?.split(' ')[0] || user.email?.split('@')[0] || 'User',\n          lastName: userInfo.family_name || userInfo.name?.split(' ').slice(1).join(' ') || '',\n          profileImageUrl: userInfo.picture || null,\n        });\n      }\n      \n      if (!sessionData) {\n        return res.status(500).json({ error: \"Failed to generate session\" });\n      }\n\n      // Return the session tokens for the frontend\n      // Use the database user instead of the Supabase user for consistency\n      res.json({\n        access_token: sessionData.access_token,\n        refresh_token: sessionData.refresh_token,\n        user: {\n          id: dbUser.id,\n          email: dbUser.email,\n          firstName: dbUser.firstName,\n          lastName: dbUser.lastName,\n          profileImageUrl: dbUser.profileImageUrl,\n        },\n      });\n    } catch (error) {\n      console.error(\"Google auth error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n}","size_bytes":6805},"server/routes/posts.ts":{"content":"import type { Express } from \"express\";\nimport { db } from \"../db\";\nimport { \n  posts, \n  topics, \n  users, \n  collections,\n  documents,\n  collectionDocuments,\n  likes,\n  comments,\n  bookmarks,\n  reposts,\n  follows,\n  insertPostSchema,\n  insertLikeSchema,\n  insertCommentSchema,\n  insertBookmarkSchema,\n  insertRepostSchema,\n  type PostWithDetails\n} from \"@shared/schema\";\nimport { jwtAuth, getJwtUserId } from \"../routes/auth\";\nimport { eq, desc, and, sql, inArray } from \"drizzle-orm\";\nimport { generateTopicFromContent, generatePostExcerpt } from \"../services/openai\";\n\nexport function registerPostRoutes(app: Express) {\n  \n  // Get feed posts with pagination\n  app.get(\"/api/posts\", async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const offset = (page - 1) * limit;\n\n      // Get posts with all details\n      const postsData = await db\n        .select({\n          id: posts.id,\n          title: posts.title,\n          content: posts.content,\n          excerpt: posts.excerpt,\n          authorId: posts.authorId,\n          topicId: posts.topicId,\n          communityId: posts.communityId,\n          type: posts.type,\n          metadata: posts.metadata,\n          isPublished: posts.isPublished,\n          isPinned: posts.isPinned,\n          viewCount: posts.viewCount,\n          createdAt: posts.createdAt,\n          updatedAt: posts.updatedAt,\n          author: {\n            id: users.id,\n            firstName: users.firstName,\n            lastName: users.lastName,\n            profileImageUrl: users.profileImageUrl,\n          },\n          topic: {\n            id: topics.id,\n            name: topics.name,\n            slug: topics.slug,\n            color: topics.color,\n            icon: topics.icon,\n          }\n        })\n        .from(posts)\n        .leftJoin(users, eq(posts.authorId, users.id))\n        .leftJoin(topics, eq(posts.topicId, topics.id))\n        .where(eq(posts.isPublished, true))\n        .orderBy(desc(posts.isPinned), desc(posts.createdAt))\n        .limit(limit)\n        .offset(offset);\n\n      // Get stats and user actions for each post\n      const postIds = postsData.map(p => p.id);\n      \n      const [likeCounts, commentCounts, repostCounts, bookmarkCounts] = await Promise.all([\n        db.select({\n          postId: sql<number>`CAST(${likes.targetId} as INTEGER)`,\n          count: sql<number>`CAST(COUNT(*) as INTEGER)`\n        })\n        .from(likes)\n        .where(and(\n          eq(likes.targetType, 'post'),\n          inArray(likes.targetId, postIds)\n        ))\n        .groupBy(likes.targetId),\n\n        db.select({\n          postId: comments.postId,\n          count: sql<number>`CAST(COUNT(*) as INTEGER)`\n        })\n        .from(comments)\n        .where(inArray(comments.postId, postIds))\n        .groupBy(comments.postId),\n\n        db.select({\n          postId: reposts.postId,\n          count: sql<number>`CAST(COUNT(*) as INTEGER)`\n        })\n        .from(reposts)\n        .where(inArray(reposts.postId, postIds))\n        .groupBy(reposts.postId),\n\n        db.select({\n          postId: bookmarks.postId,\n          count: sql<number>`CAST(COUNT(*) as INTEGER)`\n        })\n        .from(bookmarks)\n        .where(inArray(bookmarks.postId, postIds))\n        .groupBy(bookmarks.postId)\n      ]);\n\n      // Get user actions if authenticated\n      let userLikes: any[] = [];\n      let userBookmarks: any[] = [];\n      let userReposts: any[] = [];\n      let userFollows: any[] = [];\n\n      if (userId) {\n        [userLikes, userBookmarks, userReposts, userFollows] = await Promise.all([\n          db.select({ targetId: likes.targetId })\n            .from(likes)\n            .where(and(\n              eq(likes.userId, userId),\n              eq(likes.targetType, 'post'),\n              inArray(likes.targetId, postIds)\n            )),\n\n          db.select({ postId: bookmarks.postId })\n            .from(bookmarks)\n            .where(and(\n              eq(bookmarks.userId, userId),\n              inArray(bookmarks.postId, postIds)\n            )),\n\n          db.select({ postId: reposts.postId })\n            .from(reposts)\n            .where(and(\n              eq(reposts.userId, userId),\n              inArray(reposts.postId, postIds)\n            )),\n\n          db.select({ followingId: follows.followingId })\n            .from(follows)\n            .where(and(\n              eq(follows.followerId, userId),\n              inArray(follows.followingId, postsData.map(p => p.authorId))\n            ))\n        ]);\n      }\n\n      // Combine data - filter out posts without authors and ensure proper type structure\n      const postsWithDetails = postsData\n        .filter(post => post.author) // Filter out posts without authors\n        .map(post => {\n        const stats = {\n          likeCount: likeCounts.find(l => l.postId === post.id)?.count || 0,\n          commentCount: commentCounts.find(c => c.postId === post.id)?.count || 0,\n          repostCount: repostCounts.find(r => r.postId === post.id)?.count || 0,\n          bookmarkCount: bookmarkCounts.find(b => b.postId === post.id)?.count || 0,\n        };\n\n        const userActions = {\n          isLiked: userLikes.some(l => l.targetId === post.id),\n          isBookmarked: userBookmarks.some(b => b.postId === post.id),\n          isReposted: userReposts.some(r => r.postId === post.id),\n          isFollowing: userFollows.some(f => f.followingId === post.authorId),\n        };\n\n        return {\n          ...post,\n          author: post.author!, // Type assertion since we've filtered out null authors\n          stats,\n          userActions\n        };\n      });\n\n      res.json(postsWithDetails);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      res.status(500).json({ error: \"Failed to fetch posts\" });\n    }\n  });\n\n  // Create new post\n  app.post(\"/api/posts\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      if (!userId) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const { title, content, topicId, communityId, type = 'text', metadata } = req.body;\n\n      // Generate excerpt\n      const excerpt = await generatePostExcerpt(content);\n\n      // Auto-assign topic if not provided\n      let finalTopicId = topicId;\n      if (!finalTopicId) {\n        const topicSuggestion = await generateTopicFromContent(content, title);\n        \n        // Find or create topic\n        const existingTopic = await db\n          .select()\n          .from(topics)\n          .where(eq(topics.name, topicSuggestion.topic))\n          .limit(1);\n\n        if (existingTopic.length > 0) {\n          finalTopicId = existingTopic[0].id;\n        } else {\n          // Create new topic\n          const [newTopic] = await db\n            .insert(topics)\n            .values({\n              name: topicSuggestion.topic,\n              slug: topicSuggestion.topic.toLowerCase().replace(/[^a-z0-9]+/g, '-'),\n              description: `Content related to ${topicSuggestion.topic}`,\n            })\n            .returning();\n          finalTopicId = newTopic.id;\n        }\n      }\n\n      const [post] = await db\n        .insert(posts)\n        .values({\n          title,\n          content,\n          excerpt,\n          authorId: userId,\n          topicId: finalTopicId,\n          communityId,\n          type,\n          metadata,\n        })\n        .returning();\n\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n      res.status(500).json({ error: \"Failed to create post\" });\n    }\n  });\n\n  // Like/unlike post\n  app.post(\"/api/posts/:id/like\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      if (!userId) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const postId = parseInt(req.params.id);\n\n      // Check if already liked\n      const existingLike = await db\n        .select()\n        .from(likes)\n        .where(and(\n          eq(likes.userId, userId),\n          eq(likes.targetType, 'post'),\n          eq(likes.targetId, postId)\n        ))\n        .limit(1);\n\n      if (existingLike.length > 0) {\n        // Unlike\n        await db\n          .delete(likes)\n          .where(and(\n            eq(likes.userId, userId),\n            eq(likes.targetType, 'post'),\n            eq(likes.targetId, postId)\n          ));\n        res.json({ liked: false });\n      } else {\n        // Like\n        await db\n          .insert(likes)\n          .values({\n            userId,\n            targetType: 'post',\n            targetId: postId,\n          });\n        res.json({ liked: true });\n      }\n    } catch (error) {\n      console.error(\"Error toggling like:\", error);\n      res.status(500).json({ error: \"Failed to toggle like\" });\n    }\n  });\n\n  // Bookmark/unbookmark post\n  app.post(\"/api/posts/:id/bookmark\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      if (!userId) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const postId = parseInt(req.params.id);\n\n      // Check if already bookmarked\n      const existingBookmark = await db\n        .select()\n        .from(bookmarks)\n        .where(and(\n          eq(bookmarks.userId, userId),\n          eq(bookmarks.postId, postId)\n        ))\n        .limit(1);\n\n      if (existingBookmark.length > 0) {\n        // Remove bookmark\n        await db\n          .delete(bookmarks)\n          .where(and(\n            eq(bookmarks.userId, userId),\n            eq(bookmarks.postId, postId)\n          ));\n        res.json({ bookmarked: false });\n      } else {\n        // Get user's Personal Notebook (default collection)\n        const [personalCollection] = await db\n          .select({ id: collections.id })\n          .from(collections)\n          .where(and(\n            eq(collections.userId, userId),\n            eq(collections.isDefault, true)\n          ))\n          .limit(1);\n\n        if (!personalCollection) {\n          return res.status(400).json({ error: \"No default notebook found\" });\n        }\n\n        // Add bookmark to Personal Notebook\n        await db\n          .insert(bookmarks)\n          .values({\n            userId,\n            postId,\n            collectionId: personalCollection.id,\n          });\n        res.json({ bookmarked: true });\n      }\n    } catch (error) {\n      console.error(\"Error toggling bookmark:\", error);\n      res.status(500).json({ error: \"Failed to toggle bookmark\" });\n    }\n  });\n\n  // New Pinterest-style bookmarking endpoint\n  app.post(\"/api/bookmarks\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      if (!userId) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const { postId, collectionIds } = req.body;\n\n      if (!postId || !Array.isArray(collectionIds) || collectionIds.length === 0) {\n        return res.status(400).json({ error: \"Post ID and collection IDs are required\" });\n      }\n\n      // Verify the user owns all the specified collections\n      const userCollections = await db\n        .select({ id: collections.id })\n        .from(collections)\n        .where(and(\n          eq(collections.userId, userId),\n          inArray(collections.id, collectionIds)\n        ));\n\n      if (userCollections.length !== collectionIds.length) {\n        return res.status(403).json({ error: \"You can only save to your own collections\" });\n      }\n\n      // Get the post to create a document from it\n      const [post] = await db\n        .select()\n        .from(posts)\n        .where(eq(posts.id, postId))\n        .limit(1);\n\n      if (!post) {\n        return res.status(404).json({ error: \"Post not found\" });\n      }\n\n      // Remove existing bookmarks for this post/user to avoid duplicates\n      await db\n        .delete(bookmarks)\n        .where(and(\n          eq(bookmarks.userId, userId),\n          eq(bookmarks.postId, postId)\n        ));\n\n      // Remove existing documents for this bookmarked post to avoid duplicates\n      const existingDocuments = await db\n        .select({ id: documents.id })\n        .from(documents)\n        .where(and(\n          eq(documents.sourcePostId, postId),\n          eq(documents.userId, userId),\n          eq(documents.type, \"bookmark\")\n        ));\n\n      if (existingDocuments.length > 0) {\n        const documentIds = existingDocuments.map(d => d.id);\n        await db\n          .delete(collectionDocuments)\n          .where(inArray(collectionDocuments.documentId, documentIds));\n        \n        await db\n          .delete(documents)\n          .where(inArray(documents.id, documentIds));\n      }\n\n      // Create bookmark entries for each collection (for stats)\n      const bookmarkEntries = collectionIds.map(collectionId => ({\n        userId,\n        postId,\n        collectionId,\n      }));\n\n      await db\n        .insert(bookmarks)\n        .values(bookmarkEntries);\n\n      // Create a document from the bookmarked post\n      const [document] = await db\n        .insert(documents)\n        .values({\n          name: post.title || \"Untitled Post\",\n          content: post.content,\n          mimeType: \"text/plain\",\n          size: post.content.length,\n          type: \"bookmark\",\n          sourcePostId: postId,\n          userId: userId,\n        })\n        .returning();\n\n      // Link the document to all selected collections\n      const collectionDocumentEntries = collectionIds.map(collectionId => ({\n        collectionId: collectionId,\n        documentId: document.id,\n      }));\n\n      await db\n        .insert(collectionDocuments)\n        .values(collectionDocumentEntries);\n\n      res.json({ \n        success: true, \n        document,\n        savedToCollections: collectionIds.length \n      });\n    } catch (error) {\n      console.error(\"Error saving post to collections:\", error);\n      res.status(500).json({ error: \"Failed to save post to collections\" });\n    }\n  });\n\n  // Get collections a post is saved to\n  app.get(\"/api/bookmarks/:postId\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const postId = parseInt(req.params.postId);\n\n      // Get collections from bookmarks table for accurate stats\n      const savedCollections = await db\n        .select({\n          collectionId: bookmarks.collectionId,\n          collectionName: collections.name,\n        })\n        .from(bookmarks)\n        .innerJoin(collections, eq(bookmarks.collectionId, collections.id))\n        .where(and(\n          eq(bookmarks.postId, postId),\n          eq(bookmarks.userId, userId)\n        ));\n\n      res.json(savedCollections);\n    } catch (error) {\n      console.error(\"Error fetching bookmark collections:\", error);\n      res.status(500).json({ error: \"Failed to fetch bookmark collections\" });\n    }\n  });\n\n  // Repost\n  app.post(\"/api/posts/:id/repost\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      if (!userId) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const postId = parseInt(req.params.id);\n      const { comment } = req.body;\n\n      // Check if already reposted\n      const existingRepost = await db\n        .select()\n        .from(reposts)\n        .where(and(\n          eq(reposts.userId, userId),\n          eq(reposts.postId, postId)\n        ))\n        .limit(1);\n\n      if (existingRepost.length > 0) {\n        return res.status(400).json({ error: \"Already reposted\" });\n      }\n\n      const [repost] = await db\n        .insert(reposts)\n        .values({\n          userId,\n          postId,\n          comment,\n        })\n        .returning();\n\n      res.json(repost);\n    } catch (error) {\n      console.error(\"Error creating repost:\", error);\n      res.status(500).json({ error: \"Failed to create repost\" });\n    }\n  });\n\n  // Get individual post by ID\n  app.get(\"/api/posts/:id\", async (req: any, res) => {\n    try {\n      const postId = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n\n      // Get the individual post with all details including user actions\n      const [postData] = await db\n        .select({\n          id: posts.id,\n          title: posts.title,\n          content: posts.content,\n          excerpt: posts.excerpt,\n          authorId: posts.authorId,\n          topicId: posts.topicId,\n          communityId: posts.communityId,\n          type: posts.type,\n          metadata: posts.metadata,\n          isPublished: posts.isPublished,\n          isPinned: posts.isPinned,\n          viewCount: posts.viewCount,\n          createdAt: posts.createdAt,\n          updatedAt: posts.updatedAt,\n          author: {\n            id: users.id,\n            firstName: users.firstName,\n            lastName: users.lastName,\n            profileImageUrl: users.profileImageUrl,\n          },\n          topic: {\n            id: topics.id,\n            name: topics.name,\n            slug: topics.slug,\n            color: topics.color,\n            icon: topics.icon,\n          }\n        })\n        .from(posts)\n        .leftJoin(users, eq(posts.authorId, users.id))\n        .leftJoin(topics, eq(posts.topicId, topics.id))\n        .where(and(eq(posts.id, postId), eq(posts.isPublished, true)))\n        .limit(1);\n\n      if (!postData || !postData.author) {\n        return res.status(404).json({ error: \"Post not found\" });\n      }\n\n      // Get user actions for this specific post\n      let userActions = {\n        isLiked: false,\n        isBookmarked: false,\n        isReposted: false,\n        isFollowing: false,\n      };\n\n      if (userId) {\n        // Check if user liked this post\n        const likeExists = await db\n          .select()\n          .from(likes)\n          .where(and(eq(likes.userId, userId), eq(likes.targetId, postId), eq(likes.targetType, 'post')))\n          .limit(1);\n\n        // Check if user bookmarked this post\n        const bookmarkExists = await db\n          .select()\n          .from(bookmarks)\n          .where(and(eq(bookmarks.userId, userId), eq(bookmarks.postId, postId)))\n          .limit(1);\n\n        // Check if user reposted this post\n        const repostExists = await db\n          .select()\n          .from(reposts)\n          .where(and(eq(reposts.userId, userId), eq(reposts.postId, postId)))\n          .limit(1);\n\n        userActions.isLiked = likeExists.length > 0;\n        userActions.isBookmarked = bookmarkExists.length > 0;\n        userActions.isReposted = repostExists.length > 0;\n      }\n\n      // Get post statistics\n      const [postStats] = await db\n        .select({\n          likeCount: sql<number>`count(distinct ${likes.id})`,\n          commentCount: sql<number>`count(distinct ${comments.id})`,\n          bookmarkCount: sql<number>`count(distinct ${bookmarks.id})`,\n          repostCount: sql<number>`count(distinct ${reposts.id})`,\n        })\n        .from(posts)\n        .leftJoin(likes, and(eq(posts.id, likes.targetId), eq(likes.targetType, 'post')))\n        .leftJoin(comments, eq(posts.id, comments.postId))\n        .leftJoin(bookmarks, eq(posts.id, bookmarks.postId))\n        .leftJoin(reposts, eq(posts.id, reposts.postId))\n        .where(eq(posts.id, postId))\n        .groupBy(posts.id);\n\n      const result = {\n        ...postData,\n        userActions,\n        stats: postStats || {\n          likeCount: 0,\n          commentCount: 0,\n          bookmarkCount: 0,\n          repostCount: 0,\n        },\n      };\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching post:\", error);\n      res.status(500).json({ error: \"Failed to fetch post\" });\n    }\n  });\n\n  // Get comments for a post\n  app.get(\"/api/posts/:id/comments\", async (req: any, res) => {\n    try {\n      const postId = parseInt(req.params.id);\n      const userId = getJwtUserId(req);\n\n      const commentsData = await db\n        .select({\n          id: comments.id,\n          content: comments.content,\n          authorId: comments.authorId,\n          postId: comments.postId,\n          parentId: comments.parentId,\n          isEdited: comments.isEdited,\n          createdAt: comments.createdAt,\n          updatedAt: comments.updatedAt,\n          author: {\n            id: users.id,\n            firstName: users.firstName,\n            lastName: users.lastName,\n            profileImageUrl: users.profileImageUrl,\n          },\n        })\n        .from(comments)\n        .leftJoin(users, eq(comments.authorId, users.id))\n        .where(eq(comments.postId, postId))\n        .orderBy(desc(comments.createdAt));\n\n      res.json(commentsData);\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      res.status(500).json({ error: \"Failed to fetch comments\" });\n    }\n  });\n\n  // Add comment to post\n  app.post(\"/api/posts/:id/comments\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      if (!userId) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const postId = parseInt(req.params.id);\n      const { content, parentId } = req.body;\n\n      const [comment] = await db\n        .insert(comments)\n        .values({\n          content,\n          authorId: userId,\n          postId,\n          parentId,\n        })\n        .returning();\n\n      res.json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      res.status(500).json({ error: \"Failed to create comment\" });\n    }\n  });\n}","size_bytes":21515},"server/routes/topics.ts":{"content":"import type { Express } from \"express\";\nimport { db } from \"../db\";\nimport { topics, insertTopicSchema } from \"@shared/schema\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport function registerTopicRoutes(app: Express) {\n  \n  // Get all topics\n  app.get(\"/api/topics\", async (req, res) => {\n    try {\n      const allTopics = await db\n        .select()\n        .from(topics)\n        .where(eq(topics.isActive, true))\n        .orderBy(topics.name);\n\n      res.json(allTopics);\n    } catch (error) {\n      console.error(\"Error fetching topics:\", error);\n      res.status(500).json({ error: \"Failed to fetch topics\" });\n    }\n  });\n\n  // Create new topic (admin only)\n  app.post(\"/api/topics\", async (req, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      if (!userId) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const validatedData = insertTopicSchema.parse(req.body);\n      \n      const [topic] = await db\n        .insert(topics)\n        .values(validatedData)\n        .returning();\n\n      res.json(topic);\n    } catch (error) {\n      console.error(\"Error creating topic:\", error);\n      res.status(500).json({ error: \"Failed to create topic\" });\n    }\n  });\n\n  // Get topic by slug\n  app.get(\"/api/topics/:slug\", async (req, res) => {\n    try {\n      const { slug } = req.params;\n\n      const [topic] = await db\n        .select()\n        .from(topics)\n        .where(eq(topics.slug, slug))\n        .limit(1);\n\n      if (!topic) {\n        return res.status(404).json({ error: \"Topic not found\" });\n      }\n\n      res.json(topic);\n    } catch (error) {\n      console.error(\"Error fetching topic:\", error);\n      res.status(500).json({ error: \"Failed to fetch topic\" });\n    }\n  });\n}","size_bytes":1748},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport async function generateTopicFromContent(content: string, title?: string): Promise<{\n  topic: string;\n  confidence: number;\n}> {\n  try {\n    const prompt = `Analyze the following content and suggest the most appropriate topic category for a social learning platform.\n\nContent: ${title ? `Title: ${title}\\n` : ''}${content}\n\nAvailable topics:\n- AI & Machine Learning\n- Technology & Programming  \n- Business & Entrepreneurship\n- Design & Creativity\n- Science & Research\n- Education & Learning\n- Health & Wellness\n- Philosophy & Ethics\n- History & Culture\n- Personal Development\n- Finance & Economics\n- Environment & Sustainability\n\nRespond with JSON in this format: { \"topic\": \"most_appropriate_topic\", \"confidence\": 0.85 }\nThe confidence should be a number between 0 and 1 indicating how certain you are about the topic assignment.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert content categorizer for a social learning platform. Analyze content and suggest the most appropriate topic category.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.3,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      topic: result.topic || 'General',\n      confidence: Math.max(0, Math.min(1, result.confidence || 0.5))\n    };\n  } catch (error) {\n    console.error('Error generating topic:', error);\n    return {\n      topic: 'General',\n      confidence: 0.1\n    };\n  }\n}\n\nexport async function generatePostExcerpt(content: string, maxLength: number = 150): Promise<string> {\n  try {\n    const prompt = `Create a compelling excerpt from this content for a social media post. Keep it under ${maxLength} characters and make it engaging.\n\nContent: ${content}\n\nRespond with just the excerpt text, no JSON or formatting.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert content writer who creates engaging social media excerpts.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      temperature: 0.7,\n      max_tokens: 100,\n    });\n\n    const excerpt = response.choices[0].message.content?.trim() || '';\n    return excerpt.length > maxLength ? excerpt.substring(0, maxLength - 3) + '...' : excerpt;\n  } catch (error) {\n    console.error('Error generating excerpt:', error);\n    return content.length > maxLength ? content.substring(0, maxLength - 3) + '...' : content;\n  }\n}\n\nexport async function generateIndependentResponse(message: string): Promise<string> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a helpful AI assistant for a social learning platform. Provide thoughtful, educational responses.\"\n        },\n        {\n          role: \"user\",\n          content: message\n        }\n      ],\n      temperature: 0.7,\n    });\n\n    return response.choices[0].message.content || \"I'm sorry, I couldn't generate a response.\";\n  } catch (error) {\n    console.error('Error generating response:', error);\n    return \"I'm experiencing technical difficulties. Please try again later.\";\n  }\n}\n\nexport async function generateConversationTitle(firstMessage: string): Promise<string> {\n  try {\n    const prompt = `Generate a short, descriptive title (max 50 characters) for a conversation that starts with: \"${firstMessage}\"`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert at creating concise, descriptive conversation titles.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      temperature: 0.3,\n      max_tokens: 20,\n    });\n\n    const title = response.choices[0].message.content?.trim() || '';\n    return title.length > 50 ? title.substring(0, 47) + '...' : title || 'New Conversation';\n  } catch (error) {\n    console.error('Error generating title:', error);\n    return 'New Conversation';\n  }\n}","size_bytes":4576},"client/src/components/FloatingChatWidget.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { \n  Bot, \n  ChevronUp, \n  ChevronDown, \n  Send, \n  BarChart3, \n  Sparkles,\n  Plus,\n  History,\n  MessageSquare,\n  Maximize2\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface Message {\n  id: string;\n  text: string;\n  isUser: boolean;\n  timestamp: Date;\n}\n\nexport function FloatingChatWidget() {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [position, setPosition] = useState<Position>({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragOffset, setDragOffset] = useState<Position>({ x: 0, y: 0 });\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      text: \"Hello! I'm your AI assistant. How can I help you today?\",\n      isUser: false,\n      timestamp: new Date()\n    }\n  ]);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const widgetRef = useRef<HTMLDivElement>(null);\n  const dragRef = useRef<HTMLDivElement>(null);\n\n  // Initialize position at bottom center\n  useEffect(() => {\n    const updatePosition = () => {\n      if (typeof window !== \"undefined\") {\n        const centerX = window.innerWidth / 2 - (isExpanded ? 200 : 150);\n        const bottomY = window.innerHeight - (isExpanded ? 400 : 80) - 20;\n        setPosition({ x: centerX, y: bottomY });\n      }\n    };\n\n    updatePosition();\n    window.addEventListener(\"resize\", updatePosition);\n    return () => window.removeEventListener(\"resize\", updatePosition);\n  }, [isExpanded]);\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    if (!dragRef.current?.contains(e.target as Node)) return;\n    \n    setIsDragging(true);\n    const rect = widgetRef.current?.getBoundingClientRect();\n    if (rect) {\n      setDragOffset({\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top\n      });\n    }\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (!isDragging) return;\n\n    const newX = e.clientX - dragOffset.x;\n    const newY = e.clientY - dragOffset.y;\n\n    // Keep within viewport bounds\n    const maxX = window.innerWidth - (isExpanded ? 400 : 300);\n    const maxY = window.innerHeight - (isExpanded ? 500 : 120);\n\n    setPosition({\n      x: Math.max(0, Math.min(newX, maxX)),\n      y: Math.max(0, Math.min(newY, maxY))\n    });\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener(\"mousemove\", handleMouseMove);\n      document.addEventListener(\"mouseup\", handleMouseUp);\n      return () => {\n        document.removeEventListener(\"mousemove\", handleMouseMove);\n        document.removeEventListener(\"mouseup\", handleMouseUp);\n      };\n    }\n  }, [isDragging, dragOffset]);\n\n  const handleSendMessage = async () => {\n    if (!message.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text: message,\n      isUser: true,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setMessage(\"\");\n    setIsLoading(true);\n\n    // Simulate AI response\n    setTimeout(() => {\n      const aiResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        text: `I received your message: \"${userMessage.text}\". This is a simulated response. In the full version, this would connect to your AI service.`,\n        isUser: false,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiResponse]);\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const handleQuickAction = (action: string) => {\n    const prompts = {\n      \"insights\": \"Analyze my task performance and provide insights on productivity patterns\",\n      \"summary\": \"Summarize my current task status, priorities, and what I should focus on today\"\n    };\n\n    const prompt = prompts[action as keyof typeof prompts];\n    if (prompt) {\n      setMessage(prompt);\n      handleSendMessage();\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div\n      ref={widgetRef}\n      className={`fixed z-50 transition-all duration-300 ${\n        isDragging ? \"cursor-move\" : \"\"\n      }`}\n      style={{\n        left: `${position.x}px`,\n        top: `${position.y}px`,\n        width: isExpanded ? \"400px\" : \"320px\",\n        height: isExpanded ? \"500px\" : \"auto\"\n      }}\n      onMouseDown={handleMouseDown}\n    >\n      <Card className=\"bg-white/95 backdrop-blur-sm shadow-2xl border border-gray-200\">\n        {isExpanded && (\n          <CardHeader \n            ref={dragRef}\n            className=\"bg-gradient-to-r from-blue-50 to-purple-50 cursor-move p-4 flex-row items-center justify-between\"\n          >\n            <div className=\"flex items-center space-x-3\">\n              <Avatar className=\"h-8 w-8 bg-gradient-to-r from-blue-500 to-purple-500\">\n                <AvatarFallback>\n                  <Bot className=\"h-4 w-4 text-white\" />\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h3 className=\"font-semibold text-gray-900\">AI Assistant</h3>\n                <p className=\"text-xs text-gray-600\">{messages.length} messages</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\">\n                <History className=\"h-4 w-4\" />\n              </Button>\n              <Link href=\"/chat\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Maximize2 className=\"h-4 w-4\" />\n                </Button>\n              </Link>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsExpanded(false)}\n              >\n                <ChevronDown className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n        )}\n\n        <CardContent className=\"p-4\">\n          {isExpanded && (\n            <ScrollArea className=\"h-80 mb-4\">\n              <div className=\"space-y-4 pr-4\">\n                {messages.map((msg) => (\n                  <div\n                    key={msg.id}\n                    className={`flex ${msg.isUser ? \"justify-end\" : \"justify-start\"}`}\n                  >\n                    <div\n                      className={`max-w-[80%] p-3 rounded-lg ${\n                        msg.isUser\n                          ? \"bg-blue-500 text-white\"\n                          : \"bg-gray-100 text-gray-900\"\n                      }`}\n                    >\n                      <p className=\"text-sm\">{msg.text}</p>\n                      <p className={`text-xs mt-1 ${\n                        msg.isUser ? \"text-blue-100\" : \"text-gray-500\"\n                      }`}>\n                        {msg.timestamp.toLocaleTimeString([], { \n                          hour: '2-digit', \n                          minute: '2-digit' \n                        })}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                {isLoading && (\n                  <div className=\"flex justify-start\">\n                    <div className=\"bg-gray-100 p-3 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"animate-pulse h-2 w-2 bg-blue-500 rounded-full\"></div>\n                        <div className=\"animate-pulse h-2 w-2 bg-blue-500 rounded-full delay-75\"></div>\n                        <div className=\"animate-pulse h-2 w-2 bg-blue-500 rounded-full delay-150\"></div>\n                        <span className=\"text-xs text-gray-500 ml-2\">AI is thinking...</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </ScrollArea>\n          )}\n\n          {/* Command Bar */}\n          <div className=\"space-y-3\">\n            {!isExpanded && (\n              <div \n                ref={dragRef}\n                className=\"flex items-center space-x-3 cursor-move p-2 rounded-lg hover:bg-gray-50\"\n              >\n                <Avatar className=\"h-10 w-10 bg-gradient-to-r from-blue-500 to-purple-500\">\n                  <AvatarFallback>\n                    <Bot className=\"h-5 w-5 text-white\" />\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-medium text-gray-900\">AI Assistant</h3>\n                  <p className=\"text-xs text-gray-600\">Ready to help</p>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                placeholder=\"Ask your AI assistant anything...\"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                disabled={isLoading}\n                className=\"flex-1\"\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!message.trim() || isLoading}\n                size=\"sm\"\n                className=\"bg-gradient-to-r from-blue-500 to-purple-500\"\n              >\n                <Send className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleQuickAction(\"insights\")}\n                disabled={isLoading}\n                className=\"flex-1\"\n              >\n                <BarChart3 className=\"h-3 w-3 mr-1\" />\n                Give Insights\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleQuickAction(\"summary\")}\n                disabled={isLoading}\n                className=\"flex-1\"\n              >\n                <Sparkles className=\"h-3 w-3 mr-1\" />\n                Summarize Tasks\n              </Button>\n            </div>\n\n            {!isExpanded && (\n              <div className=\"flex justify-center\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsExpanded(true)}\n                  className=\"text-gray-500\"\n                >\n                  <ChevronUp className=\"h-4 w-4 mr-1\" />\n                  Show Chat History\n                </Button>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11092},"client/src/components/add-document-dropdown.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Upload, File, X, Loader2, Plus, FileText, PlusCircle, ChevronDown } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { documentsApi } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\ninterface AddDocumentDropdownProps {\n  collectionId: number;\n  onComplete?: () => void;\n}\n\nconst textContentSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  content: z.string().min(1, \"Content is required\"),\n});\n\ntype TextContentForm = z.infer<typeof textContentSchema>;\n\nexport function AddDocumentDropdown({ collectionId, onComplete }: AddDocumentDropdownProps) {\n  const [showUploadDialog, setShowUploadDialog] = useState(false);\n  const [showTextDialog, setShowTextDialog] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [savingText, setSavingText] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const form = useForm<TextContentForm>({\n    resolver: zodResolver(textContentSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n    },\n  });\n\n  const handleDragEnter = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    const validFiles = files.filter(file => {\n      const allowedTypes = ['text/plain', 'application/pdf'];\n      return allowedTypes.includes(file.type);\n    });\n\n    if (validFiles.length !== files.length) {\n      toast({\n        title: \"Some files were skipped\",\n        description: \"Only PDF and TXT files are supported\",\n        variant: \"destructive\",\n      });\n    }\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const files = Array.from(e.target.files);\n      const validFiles = files.filter(file => {\n        const allowedTypes = ['text/plain', 'application/pdf'];\n        return allowedTypes.includes(file.type);\n      });\n\n      if (validFiles.length !== files.length) {\n        toast({\n          title: \"Some files were skipped\",\n          description: \"Only PDF and TXT files are supported\",\n          variant: \"destructive\",\n        });\n      }\n\n      setSelectedFiles(prev => [...prev, ...validFiles]);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const uploadFiles = async () => {\n    if (selectedFiles.length === 0) return;\n\n    setUploading(true);\n    let successCount = 0;\n\n    try {\n      for (const file of selectedFiles) {\n        try {\n          await documentsApi.upload(collectionId, file);\n          successCount++;\n        } catch (error) {\n          console.error(`Failed to upload ${file.name}:`, error);\n        }\n      }\n\n      if (successCount > 0) {\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/collections\", collectionId, \"documents\"] \n        });\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/collections\"] \n        });\n        \n        toast({\n          title: \"Upload completed\",\n          description: `${successCount} of ${selectedFiles.length} files uploaded successfully`,\n        });\n\n        setSelectedFiles([]);\n        setShowUploadDialog(false);\n        onComplete?.();\n      }\n\n      if (successCount < selectedFiles.length) {\n        toast({\n          title: \"Some uploads failed\",\n          description: `${selectedFiles.length - successCount} files failed to upload`,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload files. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleTextContentSubmit = async (data: TextContentForm) => {\n    setSavingText(true);\n    try {\n      // Create a text file from the form data\n      const textContent = data.content;\n      const blob = new Blob([textContent], { type: 'text/plain' });\n      const file = new File([blob], `${data.title}.txt`, { type: 'text/plain' });\n      \n      await documentsApi.upload(collectionId, file);\n      \n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/collections\", collectionId, \"documents\"] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/collections\"] \n      });\n      \n      toast({\n        title: \"Text content added\",\n        description: \"Your text content has been saved successfully\",\n      });\n\n      form.reset();\n      setShowTextDialog(false);\n      onComplete?.();\n    } catch (error) {\n      toast({\n        title: \"Failed to save\",\n        description: \"Failed to save text content. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSavingText(false);\n    }\n  };\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button className=\"bg-primary hover:bg-primary/90 text-white\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Document\n            <ChevronDown className=\"w-4 h-4 ml-2\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuItem onClick={() => setShowUploadDialog(true)}>\n            <Upload className=\"w-4 h-4 mr-2\" />\n            Upload Document\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => setShowTextDialog(true)}>\n            <FileText className=\"w-4 h-4 mr-2\" />\n            Add Text Content\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Upload Document Dialog */}\n      <Dialog open={showUploadDialog} onOpenChange={setShowUploadDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Upload Document</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Card \n              className={`border-2 border-dashed transition-colors ${\n                isDragging ? \"border-primary bg-primary/5\" : \"border-gray-300 hover:border-gray-400\"\n              }`}\n              onDragEnter={handleDragEnter}\n              onDragLeave={handleDragLeave}\n              onDragOver={handleDragOver}\n              onDrop={handleDrop}\n            >\n              <CardContent className=\"p-8 text-center\">\n                <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  Drop files here or click to browse\n                </h3>\n                <p className=\"text-sm text-gray-500 mb-4\">\n                  Supports: PDF and TXT files (max 10MB each)\n                </p>\n                <Button\n                  onClick={() => fileInputRef.current?.click()}\n                  variant=\"outline\"\n                  disabled={uploading}\n                >\n                  Choose Files\n                </Button>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  multiple\n                  accept=\".txt,.pdf\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                />\n              </CardContent>\n            </Card>\n\n            {selectedFiles.length > 0 && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-gray-900\">Selected Files:</h4>\n                {selectedFiles.map((file, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center space-x-2\">\n                      <File className=\"w-4 h-4 text-gray-500\" />\n                      <span className=\"text-sm text-gray-900\">{file.name}</span>\n                      <span className=\"text-xs text-gray-500\">\n                        ({(file.size / 1024).toFixed(1)} KB)\n                      </span>\n                    </div>\n                    <Button\n                      onClick={() => removeFile(index)}\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"h-6 w-6 p-0\"\n                      disabled={uploading}\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                ))}\n                \n                <Button\n                  onClick={uploadFiles}\n                  disabled={uploading}\n                  className=\"w-full bg-primary hover:bg-primary/90\"\n                >\n                  {uploading ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Uploading...\n                    </>\n                  ) : (\n                    `Upload ${selectedFiles.length} file${selectedFiles.length > 1 ? 's' : ''}`\n                  )}\n                </Button>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Add Text Content Dialog */}\n      <Dialog open={showTextDialog} onOpenChange={setShowTextDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Add Text Content</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={form.handleSubmit(handleTextContentSubmit)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                {...form.register(\"title\")}\n                placeholder=\"Enter document title\"\n                disabled={savingText}\n              />\n              {form.formState.errors.title && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.title.message}</p>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"content\">Content</Label>\n              <Textarea\n                id=\"content\"\n                {...form.register(\"content\")}\n                placeholder=\"Enter your text content here...\"\n                rows={10}\n                disabled={savingText}\n              />\n              {form.formState.errors.content && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.content.message}</p>\n              )}\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowTextDialog(false)}\n                disabled={savingText}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={savingText}\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                {savingText ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  \"Save Content\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":12344},"client/src/components/artifact-manager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronLeft, X, Code } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ArtifactManagerProps {\n  onArtifactDetected: (artifactHtml: string, messageWithoutArtifact: string) => void;\n}\n\nexport interface ArtifactData {\n  html: string;\n  title: string;\n}\n\nexport function ArtifactManager({ onArtifactDetected }: ArtifactManagerProps) {\n  const [isArtifactOpen, setIsArtifactOpen] = useState(false);\n  const [currentArtifact, setCurrentArtifact] = useState<ArtifactData | null>(null);\n  const [showToggle, setShowToggle] = useState(false);\n\n  // Function to process LLM responses and detect artifacts\n  const processLLMResponse = (response: string): string => {\n    const artifactMatch = response.match(/\\[ARTIFACT_START\\]([\\s\\S]*?)\\[ARTIFACT_END\\]/);\n    \n    if (artifactMatch) {\n      const artifactHtml = artifactMatch[1];\n      const messageWithoutArtifact = response.replace(/\\[ARTIFACT_START\\][\\s\\S]*?\\[ARTIFACT_END\\]/, '').trim();\n      \n      // Extract title from artifact if available\n      const titleMatch = artifactHtml.match(/<!-- Artifact Title: (.*?) -->/);\n      const title = titleMatch ? titleMatch[1] : 'Interactive Content';\n      \n      // Store the artifact\n      setCurrentArtifact({ html: artifactHtml, title });\n      setShowToggle(true);\n      \n      // Call the callback with the artifact and cleaned message\n      onArtifactDetected(artifactHtml, messageWithoutArtifact);\n      \n      return messageWithoutArtifact;\n    }\n    \n    return response;\n  };\n\n  const openArtifact = () => {\n    if (currentArtifact) {\n      setIsArtifactOpen(true);\n    }\n  };\n\n  const closeArtifact = () => {\n    setIsArtifactOpen(false);\n  };\n\n  // Expose the processLLMResponse function globally for use in other components\n  useEffect(() => {\n    (window as any).artifactManager = { processLLMResponse };\n  }, []);\n\n  return (\n    <>\n      {/* Artifact Toggle Button */}\n      {showToggle && !isArtifactOpen && (\n        <Button\n          onClick={openArtifact}\n          className=\"fixed right-4 top-1/2 transform -translate-y-1/2 bg-blue-500 text-white p-2 rounded-l-lg shadow-lg hover:bg-blue-600 z-40 transition-all duration-300 hover:transform hover:-translate-x-1\"\n          size=\"sm\"\n        >\n          <ChevronLeft className=\"w-4 h-4\" />\n        </Button>\n      )}\n\n      {/* Artifact Panel */}\n      {isArtifactOpen && currentArtifact && (\n        <div className=\"fixed right-0 top-0 w-1/2 h-full bg-white border-l border-gray-300 shadow-xl z-50 flex flex-col\">\n          {/* Artifact Header */}\n          <div className=\"bg-gray-50 border-b border-gray-200 p-4 flex justify-between items-center\">\n            <div className=\"flex items-center space-x-2\">\n              <Code className=\"w-5 h-5 text-blue-500\" />\n              <h3 className=\"text-lg font-semibold text-gray-800\">Artifact</h3>\n            </div>\n            <Button\n              onClick={closeArtifact}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-gray-600 hover:text-red-600\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Artifact Content */}\n          <div className=\"flex-1 overflow-hidden\">\n            <iframe\n              srcDoc={currentArtifact.html}\n              className=\"w-full h-full border-none\"\n              sandbox=\"allow-scripts allow-same-origin\"\n              title={currentArtifact.title}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Mobile responsiveness - handled by Tailwind classes */}\n    </>\n  );\n}\n\n// Artifact Card Component for chat messages\ninterface ArtifactCardProps {\n  title: string;\n  onViewArtifact: () => void;\n}\n\nexport function ArtifactCard({ title, onViewArtifact }: ArtifactCardProps) {\n  return (\n    <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-l-4 border-blue-500 p-4 my-3 rounded-lg shadow-sm\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-blue-700 flex items-center\">\n            <Code className=\"w-4 h-4 mr-1\" />\n            Artifact Generated\n          </p>\n          <p className=\"text-lg font-semibold text-gray-800\">{title}</p>\n        </div>\n        <Button\n          onClick={onViewArtifact}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors hover:transform hover:translate-y-[-1px]\"\n          size=\"sm\"\n        >\n          View Artifact\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":4581},"client/src/components/artifact-viewer.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Code, Copy, Eye } from \"lucide-react\";\n\ninterface ArtifactViewerProps {\n  artifact: {\n    html: string;\n    title: string;\n    type?: string;\n  };\n  onClose: () => void;\n  isOpen: boolean;\n}\n\nexport function ArtifactViewer({ artifact, onClose, isOpen }: ArtifactViewerProps) {\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const [showCode, setShowCode] = useState(false);\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && iframeRef.current && artifact.html) {\n      const iframe = iframeRef.current;\n      \n      // Create a complete HTML document with TailwindCSS\n      const fullHtml = `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>${artifact.title}</title>\n          <script src=\"https://cdn.tailwindcss.com\"></script>\n          <style>\n            body { \n              margin: 0; \n              padding: 20px; \n              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n              background: white;\n            }\n            * { box-sizing: border-box; }\n          </style>\n        </head>\n        <body>\n          ${artifact.html}\n        </body>\n        </html>\n      `;\n      \n      // Write the HTML to the iframe\n      iframe.srcdoc = fullHtml;\n    }\n  }, [isOpen, artifact.html, artifact.title]);\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(artifact.html);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy:', err);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-y-0 right-0 w-1/2 bg-white border-l border-gray-200 shadow-xl z-50 flex flex-col\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center\">\n            <Code className=\"w-4 h-4 text-purple-600\" />\n          </div>\n          <h2 className=\"text-lg font-semibold text-gray-900\">{artifact.title}</h2>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowCode(!showCode)}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            {showCode ? <Eye className=\"w-4 h-4\" /> : <Code className=\"w-4 h-4\" />}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={copyToClipboard}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            <Copy className=\"w-4 h-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-hidden\">\n        {showCode ? (\n          <div className=\"h-full overflow-auto p-4\">\n            <pre className=\"text-sm text-gray-800 whitespace-pre-wrap bg-gray-50 p-4 rounded-lg\">\n              <code>{artifact.html}</code>\n            </pre>\n          </div>\n        ) : (\n          <iframe\n            ref={iframeRef}\n            className=\"w-full h-full border-0\"\n            sandbox=\"allow-scripts allow-same-origin allow-forms allow-popups allow-modals\"\n            title={artifact.title}\n          />\n        )}\n      </div>\n\n      {/* Footer */}\n      <div className=\"p-3 border-t border-gray-200 bg-gray-50\">\n        <div className=\"flex items-center justify-between text-sm text-gray-600\">\n          <span>Live interactive artifact</span>\n          {copied && <span className=\"text-green-600\">Copied to clipboard!</span>}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4174},"client/src/components/chat-input.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Send, Shield, Paperclip, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ChatInputProps {\n  onSend: (message: string, attachments?: File[]) => void;\n  disabled?: boolean;\n  placeholder?: string;\n  value?: string;\n  onChange?: (value: string) => void;\n}\n\nexport function ChatInput({ onSend, disabled = false, placeholder = \"Ask me anything...\", value, onChange }: ChatInputProps) {\n  const [message, setMessage] = useState(\"\");\n  \n  // Use controlled value if provided, otherwise use local state\n  const inputValue = value !== undefined ? value : message;\n  const handleInputChange = (newValue: string) => {\n    if (onChange) {\n      onChange(newValue);\n    } else {\n      setMessage(newValue);\n    }\n  };\n  const [attachments, setAttachments] = useState<File[]>([]);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleSubmit = () => {\n    if ((inputValue.trim() || attachments.length > 0) && !disabled) {\n      onSend(inputValue.trim(), attachments);\n      handleInputChange(\"\");\n      setAttachments([]);\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    const validFiles: File[] = [];\n    \n    for (const file of files) {\n      // Check file size (10MB limit)\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} is larger than 10MB. Please select a smaller file.`,\n          variant: \"destructive\",\n        });\n        continue;\n      }\n      \n      // Check file type\n      const allowedTypes = [\n        'text/plain',\n        'text/markdown',\n        'text/csv',\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      ];\n      \n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: \"Unsupported file type\",\n          description: `${file.name} is not a supported file type. Please select a text, PDF, or document file.`,\n          variant: \"destructive\",\n        });\n        continue;\n      }\n      \n      validFiles.push(file);\n    }\n    \n    setAttachments(prev => [...prev, ...validFiles]);\n    \n    // Reset the input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const removeAttachment = (index: number) => {\n    setAttachments(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const triggerFileInput = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  // Auto-resize textarea\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = \"auto\";\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [inputValue]);\n\n  return (\n    <div className=\"w-full max-w-2xl\">\n      {/* Attachments Preview */}\n      {attachments.length > 0 && (\n        <div className=\"mb-3 flex flex-wrap gap-2\">\n          {attachments.map((file, index) => (\n            <div key={index} className=\"flex items-center bg-gray-100 rounded-lg px-3 py-2 text-sm\">\n              <Paperclip className=\"w-4 h-4 mr-2 text-gray-500\" />\n              <span className=\"truncate max-w-32\">{file.name}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"ml-2 h-4 w-4 p-0 hover:bg-gray-200\"\n                onClick={() => removeAttachment(index)}\n              >\n                <X className=\"w-3 h-3\" />\n              </Button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      <div className=\"relative\">\n        {/* Hidden File Input */}\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          accept=\".txt,.md,.csv,.pdf,.doc,.docx\"\n          onChange={handleFileSelect}\n          className=\"hidden\"\n        />\n\n        <Textarea\n          ref={textareaRef}\n          value={inputValue}\n          onChange={(e) => handleInputChange(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder={placeholder}\n          disabled={disabled}\n          className=\"w-full p-4 pl-12 pr-20 border-2 border-gray-200 rounded-xl resize-none focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all min-h-[60px] max-h-32\"\n          rows={1}\n        />\n        \n        {/* Attachment Button - Inside chatbox, left side */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"absolute left-3 bottom-3 h-8 w-8 p-0 text-gray-500 hover:text-gray-700 hover:bg-gray-100\"\n          onClick={triggerFileInput}\n          disabled={disabled}\n        >\n          <Paperclip className=\"w-4 h-4\" />\n        </Button>\n\n        {/* Send Button - Inside chatbox, right side */}\n        <Button\n          onClick={handleSubmit}\n          disabled={(!inputValue.trim() && attachments.length === 0) || disabled}\n          size=\"sm\"\n          className=\"absolute right-3 bottom-3 h-8 w-8 p-0 bg-primary hover:bg-primary/90\"\n        >\n          <Send className=\"w-4 h-4\" />\n        </Button>\n      </div>\n\n      <div className=\"flex items-center justify-between mt-3 text-sm text-gray-500\">\n        <span>Press Enter to send, Shift+Enter for new line</span>\n        <span className=\"flex items-center space-x-1\">\n          <Shield className=\"w-3 h-3\" />\n          <span>Secure & Private</span>\n        </span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5827},"client/src/components/chat-loading.tsx":{"content":"import { Loader2 } from \"lucide-react\";\n\nexport function ChatLoading() {\n  return (\n    <div className=\"flex items-start space-x-4 p-4\">\n      <div className=\"w-8 h-8 rounded-full bg-purple-100 flex items-center justify-center flex-shrink-0\">\n        <span className=\"text-sm font-medium text-purple-600\">SL</span>\n      </div>\n      <div className=\"flex-1 space-y-2\">\n        <div className=\"flex items-center space-x-2\">\n          <Loader2 className=\"w-4 h-4 animate-spin text-purple-600\" />\n          <span className=\"text-sm text-gray-600\">SnappyLearn is thinking...</span>\n        </div>\n        <div className=\"flex space-x-1\">\n          <div className=\"w-2 h-2 bg-purple-300 rounded-full animate-bounce\"></div>\n          <div className=\"w-2 h-2 bg-purple-300 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n          <div className=\"w-2 h-2 bg-purple-300 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1001},"client/src/components/collection-card.tsx":{"content":"import { Folder, MoreHorizontal, Share, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport type { CollectionWithStats } from \"@shared/schema\";\nimport { useLocation } from \"wouter\";\nimport { useDeleteCollection } from \"@/hooks/use-collections\";\n\ninterface CollectionCardProps {\n  collection: CollectionWithStats;\n  onStartChat?: (collectionId: number) => void;\n}\n\nexport function CollectionCard({ collection, onStartChat }: CollectionCardProps) {\n  const [, setLocation] = useLocation();\n  const deleteCollection = useDeleteCollection();\n\n  const getCollectionColor = (id: number) => {\n    const colors = [\n      \"bg-blue-100 text-blue-600\",\n      \"bg-green-100 text-green-600\", \n      \"bg-purple-100 text-purple-600\",\n      \"bg-orange-100 text-orange-600\",\n      \"bg-pink-100 text-pink-600\",\n      \"bg-cyan-100 text-cyan-600\"\n    ];\n    return colors[id % colors.length];\n  };\n\n  const handleStartChat = () => {\n    if (onStartChat) {\n      onStartChat(collection.id);\n    }\n  };\n\n  const handleViewCollection = () => {\n    setLocation(`/collections/${collection.id}`);\n  };\n\n  const handleDelete = () => {\n    if (confirm(\"Are you sure you want to delete this notebook? This will also delete all associated documents and conversations.\")) {\n      deleteCollection.mutate(collection.id);\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className={`w-12 h-12 rounded-xl flex items-center justify-center ${getCollectionColor(collection.id)}`}>\n            <Folder className=\"w-6 h-6\" />\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                <MoreHorizontal className=\"w-4 h-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={handleViewCollection}>\n                View Details\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={handleDelete} className=\"text-red-600\">\n                Delete Notebook\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n        \n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{collection.name}</h3>\n        <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">{collection.description || \"No description provided\"}</p>\n        \n        <div className=\"flex items-center justify-between text-sm mb-4\">\n          <span className=\"text-gray-500\">{collection.documentCount} documents</span>\n          <span className=\"text-gray-500\">\n            {collection.lastUsed && collection.lastUsed !== \"Invalid Date\" \n              ? (() => {\n                  const date = new Date(collection.lastUsed);\n                  return !isNaN(date.getTime()) ? date.toLocaleDateString() : \"Never used\";\n                })()\n              : \"Never used\"\n            }\n          </span>\n        </div>\n        \n        <div className=\"flex space-x-2 pt-4 border-t border-gray-100\">\n          <Button onClick={handleViewCollection} variant=\"outline\" className=\"flex-1\">\n            View\n          </Button>\n          <Button onClick={() => {\n            // TODO: Implement share functionality\n            console.log(\"Share collection:\", collection.id);\n          }} variant=\"outline\" className=\"px-3\">\n            <Share className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3826},"client/src/components/conversation-card.tsx":{"content":"import { MessageSquare, Folder, ArrowRight } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport type { ConversationWithPreview } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\ninterface ConversationCardProps {\n  conversation: ConversationWithPreview;\n}\n\nexport function ConversationCard({ conversation }: ConversationCardProps) {\n  const isCollectionBased = conversation.type === \"collection\";\n\n  return (\n    <Link href={`/conversations/${conversation.id}`}>\n      <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-3 h-3 rounded-full ${\n                isCollectionBased ? \"bg-blue-500\" : \"bg-gray-400\"\n              }`} />\n              <span className={`text-xs font-medium uppercase ${\n                isCollectionBased ? \"text-blue-600\" : \"text-gray-500\"\n              }`}>\n                {isCollectionBased ? \"Collection\" : \"Independent\"}\n              </span>\n            </div>\n            <span className=\"text-xs text-gray-400\">\n              {(() => {\n                if (!conversation.updatedAt) return \"Just now\";\n                const date = new Date(conversation.updatedAt);\n                if (isNaN(date.getTime())) return \"Just now\";\n                \n                const now = new Date();\n                const diffTime = Math.abs(now.getTime() - date.getTime());\n                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                \n                if (diffDays === 1) return \"Yesterday\";\n                if (diffDays < 7) return `${diffDays} days ago`;\n                if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;\n                if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;\n                return date.toLocaleDateString();\n              })()}\n            </span>\n          </div>\n          \n          <h3 className=\"font-medium text-gray-900 mb-2 line-clamp-2\">\n            {conversation.title}\n          </h3>\n          \n          <p className=\"text-sm text-gray-600 line-clamp-2 mb-3\">\n            {conversation.preview}\n          </p>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-xs text-gray-500\">\n              {conversation.messageCount} messages\n            </span>\n            <ArrowRight className=\"w-3 h-3 text-gray-400\" />\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n","size_bytes":2623},"client/src/components/create-collection-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useCreateCollection } from \"@/hooks/use-collections\";\n\ninterface CreateCollectionModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function CreateCollectionModal({ open, onOpenChange }: CreateCollectionModalProps) {\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const createCollection = useCreateCollection();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!name.trim()) return;\n\n    createCollection.mutate(\n      {\n        name: name.trim(),\n        description: description.trim() || undefined,\n      },\n      {\n        onSuccess: () => {\n          setName(\"\");\n          setDescription(\"\");\n          onOpenChange(false);\n        },\n      }\n    );\n  };\n\n  const handleClose = () => {\n    setName(\"\");\n    setDescription(\"\");\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Create New Collection</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Collection Name</Label>\n            <Input\n              id=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"Enter collection name\"\n              required\n              className=\"mt-2\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"description\">Description (Optional)</Label>\n            <Textarea\n              id=\"description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Describe what this collection will contain\"\n              className=\"mt-2 resize-none\"\n              rows={3}\n            />\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={handleClose}\n              className=\"flex-1\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\"\n              disabled={!name.trim() || createCollection.isPending}\n              className=\"flex-1 bg-primary hover:bg-primary/90\"\n            >\n              {createCollection.isPending ? \"Creating...\" : \"Create\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2876},"client/src/components/file-upload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Upload, File, X, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { documentsApi } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface FileUploadProps {\n  collectionId: number;\n  onUploadComplete?: () => void;\n}\n\nexport function FileUpload({ collectionId, onUploadComplete }: FileUploadProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleDragEnter = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    const validFiles = files.filter(file => {\n      const allowedTypes = ['text/plain', 'text/markdown', 'application/pdf', 'text/csv'];\n      return allowedTypes.includes(file.type);\n    });\n\n    if (validFiles.length !== files.length) {\n      toast({\n        title: \"Some files were skipped\",\n        description: \"Only text, markdown, PDF, and CSV files are supported\",\n        variant: \"destructive\",\n      });\n    }\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const files = Array.from(e.target.files);\n      setSelectedFiles(prev => [...prev, ...files]);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const uploadFiles = async () => {\n    if (selectedFiles.length === 0) return;\n\n    setUploading(true);\n    let successCount = 0;\n\n    try {\n      for (const file of selectedFiles) {\n        try {\n          await documentsApi.upload(collectionId, file);\n          successCount++;\n        } catch (error) {\n          console.error(`Failed to upload ${file.name}:`, error);\n        }\n      }\n\n      if (successCount > 0) {\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/collections\", collectionId, \"documents\"] \n        });\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/collections\"] \n        });\n        \n        toast({\n          title: \"Upload completed\",\n          description: `${successCount} of ${selectedFiles.length} files uploaded successfully`,\n        });\n\n        setSelectedFiles([]);\n        onUploadComplete?.();\n      }\n\n      if (successCount < selectedFiles.length) {\n        toast({\n          title: \"Some uploads failed\",\n          description: `${selectedFiles.length - successCount} files failed to upload`,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload files. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card \n        className={`border-2 border-dashed transition-colors ${\n          isDragging ? \"border-primary bg-primary/5\" : \"border-gray-300 hover:border-gray-400\"\n        }`}\n        onDragEnter={handleDragEnter}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n      >\n        <CardContent className=\"p-8 text-center\">\n          <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Drop files here or click to browse\n          </h3>\n          <p className=\"text-sm text-gray-500 mb-4\">\n            Supports: Text, Markdown, PDF, and CSV files (max 10MB each)\n          </p>\n          <Button\n            onClick={() => fileInputRef.current?.click()}\n            variant=\"outline\"\n            disabled={uploading}\n          >\n            Choose Files\n          </Button>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            multiple\n            accept=\".txt,.md,.pdf,.csv\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n          />\n        </CardContent>\n      </Card>\n\n      {selectedFiles.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"font-medium text-gray-900\">Selected Files:</h4>\n          {selectedFiles.map((file, index) => (\n            <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <File className=\"w-4 h-4 text-gray-500\" />\n                <span className=\"text-sm text-gray-900\">{file.name}</span>\n                <span className=\"text-xs text-gray-500\">\n                  ({(file.size / 1024).toFixed(1)} KB)\n                </span>\n              </div>\n              <Button\n                onClick={() => removeFile(index)}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 w-6 p-0\"\n                disabled={uploading}\n              >\n                <X className=\"w-3 h-3\" />\n              </Button>\n            </div>\n          ))}\n          \n          <Button\n            onClick={uploadFiles}\n            disabled={uploading}\n            className=\"w-full bg-primary hover:bg-primary/90\"\n          >\n            {uploading ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Uploading...\n              </>\n            ) : (\n              `Upload ${selectedFiles.length} file${selectedFiles.length > 1 ? 's' : ''}`\n            )}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6091},"client/src/components/message.tsx":{"content":"import { User } from \"lucide-react\";\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\nimport type { Message } from \"@shared/schema\";\nimport { ArtifactCard } from \"./artifact-manager\";\n\ninterface MessageComponentProps {\n  message: Message;\n  onViewArtifact?: (artifactHtml: string, title: string) => void;\n}\n\nexport function MessageComponent({ message, onViewArtifact }: MessageComponentProps) {\n  const isUser = message.role === \"user\";\n  const sources = message.sources as Array<{\n    documentId: number;\n    documentName: string;\n    excerpt: string;\n  }> | null;\n\n  // Check if message contains artifact\n  const artifactMatch = message.content.match(/\\[ARTIFACT_START\\]([\\s\\S]*?)\\[ARTIFACT_END\\]/);\n  const hasArtifact = artifactMatch !== null;\n  \n  // Get message content without artifact tags and remove asterisks\n  const messageContent = hasArtifact \n    ? message.content.replace(/\\[ARTIFACT_START\\][\\s\\S]*?\\[ARTIFACT_END\\]/, '').trim().replace(/\\*/g, '')\n    : message.content.replace(/\\*/g, '');\n\n  // Extract artifact details\n  const artifactHtml = artifactMatch ? artifactMatch[1] : null;\n  const titleMatch = artifactHtml?.match(/<!-- Artifact Title: (.*?) -->/);\n  const artifactTitle = titleMatch ? titleMatch[1] : 'Interactive Content';\n\n  return (\n    <div className={`flex ${isUser ? \"justify-end\" : \"justify-start\"}`}>\n      <div className={`max-w-2xl ${isUser ? \"ml-12\" : \"mr-12\"}`}>\n        {!isUser && (\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-6 h-6\" />\n            <span className=\"text-sm font-medium text-gray-700\">SnappyLearn AI</span>\n          </div>\n        )}\n        \n        {/* Main message content */}\n        {messageContent && (\n          <div\n            className={`rounded-2xl px-4 py-3 ${\n              isUser\n                ? \"bg-primary text-white rounded-br-md\"\n                : \"bg-gray-100 text-gray-800 rounded-bl-md\"\n            }`}\n          >\n            <div className=\"whitespace-pre-wrap\">{messageContent}</div>\n          \n            {/* Sources for AI messages */}\n            {!isUser && sources && sources.length > 0 && (\n              <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                <p className=\"text-xs text-gray-600 font-medium mb-2\">Sources:</p>\n                <div className=\"space-y-2\">\n                  {sources.map((source, index) => (\n                    <div key={index} className=\"bg-white rounded-lg p-2 border border-gray-200\">\n                      <p className=\"text-xs font-medium text-gray-800\">{source.documentName}</p>\n                      <p className=\"text-xs text-gray-600 mt-1\">{source.excerpt}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            <span\n              className={`text-xs mt-2 block ${\n                isUser ? \"text-indigo-200\" : \"text-gray-500\"\n              }`}\n            >\n              {new Date(message.createdAt).toLocaleTimeString([], {\n                hour: \"2-digit\",\n                minute: \"2-digit\",\n              })}\n            </span>\n          </div>\n        )}\n\n        {/* Artifact Card */}\n        {!isUser && hasArtifact && artifactHtml && onViewArtifact && (\n          <div className=\"mt-3\">\n            <ArtifactCard\n              title={artifactTitle}\n              onViewArtifact={() => onViewArtifact(artifactHtml, artifactTitle)}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3541},"client/src/components/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Plus, Folder, MessageSquare, User, Settings, LogOut, Code, Calculator, Shield } from \"lucide-react\";\nconst snappyLearnIcon = \"/favicon.png\";\nimport { useCollections } from \"@/hooks/use-collections\";\nimport { useConversations } from \"@/hooks/use-conversations\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { CreateCollectionModal } from \"./create-collection-modal\";\n\ninterface SidebarProps {\n  selectedCollectionId?: number;\n  onSelectCollection?: (id: number | undefined) => void;\n  onNewChat?: () => void;\n}\n\nexport function Sidebar({ selectedCollectionId, onSelectCollection, onNewChat }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const { data: collections = [] } = useCollections();\n  const { data: conversations = [] } = useConversations();\n  const { user, signOut, isAdmin } = useAuth();\n\n  const recentConversations = conversations.slice(0, 5);\n\n  const handleNewChat = () => {\n    if (onNewChat) {\n      onNewChat();\n    } else {\n      // Navigate to home/dashboard to start fresh\n      setLocation(\"/\");\n    }\n  };\n\n  const handleLogout = async () => {\n    await signOut();\n  };\n\n\n\n  const getCollectionColor = (index: number) => {\n    const colors = [\n      \"bg-blue-100 text-blue-600\",\n      \"bg-green-100 text-green-600\", \n      \"bg-purple-100 text-purple-600\",\n      \"bg-orange-100 text-orange-600\",\n      \"bg-pink-100 text-pink-600\",\n      \"bg-cyan-100 text-cyan-600\"\n    ];\n    return colors[index % colors.length];\n  };\n\n  return (\n    <>\n      <aside className=\"w-64 bg-white border-r border-gray-200 flex flex-col h-screen\">\n        {/* Logo/Header */}\n        <div className=\"p-4 border-b border-gray-200\">\n          <Link href=\"/\" className=\"flex items-center justify-center\">\n            <img src=\"/snappylearn-sidebar-logo.png\" alt=\"SnappyLearn\" className=\"h-10 w-auto\" />\n          </Link>\n        </div>\n\n        {/* New Chat Button */}\n        <div className=\"p-4\">\n          <Button \n            onClick={handleNewChat}\n            className=\"w-full bg-primary hover:bg-primary/90 text-white font-medium\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Chat\n          </Button>\n        </div>\n\n        <ScrollArea className=\"flex-1 px-4\">\n          {/* Collections Section */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <Link\n                href=\"/collections\"\n                className=\"flex items-center space-x-2 text-gray-700 hover:text-blue-600 transition-colors cursor-pointer\"\n              >\n                <Folder className=\"w-4 h-4\" />\n                <h3 className=\"text-sm font-semibold uppercase tracking-wide\">\n                  Notebooks\n                </h3>\n              </Link>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowCreateModal(true)}\n                className=\"h-6 w-6 p-0 text-gray-500 hover:text-white hover:bg-blue-500 rounded-full transition-all duration-200 cursor-pointer\"\n                title=\"Create new collection\"\n              >\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            <div className=\"space-y-1\">\n              {collections.map((collection, index) => (\n                <Link\n                  key={collection.id}\n                  href={`/collections/${collection.id}`}\n                  className={`w-full flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50 transition-colors text-left ${\n                    location === `/collections/${collection.id}` ? 'bg-blue-50 border border-blue-200' : ''\n                  }`}\n                >\n                  <div className={`w-6 h-6 rounded flex items-center justify-center ${getCollectionColor(index)}`}>\n                    <Folder className=\"w-3 h-3\" />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-gray-900 truncate\">\n                      {collection.name}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">\n                      {collection.documentCount} documents\n                    </p>\n                  </div>\n                </Link>\n              ))}\n              \n              {collections.length === 0 && (\n                <p className=\"text-xs text-gray-500 italic\">No collections yet</p>\n              )}\n            </div>\n          </div>\n\n          <Separator className=\"my-4\" />\n\n          {/* Recent Chats Section */}\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <Link\n                href=\"/conversations\"\n                className=\"flex items-center space-x-2 text-gray-700 hover:text-green-600 transition-colors cursor-pointer\"\n              >\n                <MessageSquare className=\"w-4 h-4\" />\n                <h3 className=\"text-sm font-semibold uppercase tracking-wide\">\n                  Recent Chats\n                </h3>\n              </Link>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/\")}\n                className=\"h-6 w-6 p-0 text-gray-500 hover:text-white hover:bg-green-500 rounded-full transition-all duration-200 cursor-pointer\"\n                title=\"Start new conversation\"\n              >\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            <div className=\"space-y-1\">\n              {recentConversations.map((conversation) => (\n                <Link\n                  key={conversation.id}\n                  href={`/conversations/${conversation.id}`}\n                  className={`flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50 transition-colors ${\n                    location === `/conversations/${conversation.id}` ? 'bg-gray-100' : ''\n                  }`}\n                >\n                  <div className={`w-6 h-6 rounded flex items-center justify-center ${\n                    conversation.type === 'collection' ? 'bg-blue-100' : 'bg-gray-100'\n                  }`}>\n                    {conversation.type === 'collection' ? (\n                      <Folder className=\"w-3 h-3 text-blue-600\" />\n                    ) : (\n                      <MessageSquare className=\"w-3 h-3 text-gray-600\" />\n                    )}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm text-gray-900 truncate\">\n                      {conversation.title}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">\n                      {(() => {\n                        const date = new Date(conversation.updatedAt);\n                        return !isNaN(date.getTime()) ? date.toLocaleDateString() : 'No messages';\n                      })()}\n                    </p>\n                  </div>\n                </Link>\n              ))}\n              \n              {recentConversations.length === 0 && (\n                <p className=\"text-xs text-gray-500 italic\">No recent chats</p>\n              )}\n            </div>\n          </div>\n\n          {/* Artifacts Section */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <Link\n                href=\"/artifacts\"\n                className={`flex items-center space-x-2 p-3 rounded-lg hover:bg-gray-50 transition-colors w-full ${\n                  location === '/artifacts' ? 'bg-purple-50 border border-purple-200 text-purple-600' : 'text-gray-700 hover:text-purple-600'\n                }`}\n              >\n                <Code className=\"w-5 h-5\" />\n                <span className=\"text-sm font-medium\">Artifacts</span>\n              </Link>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/artifacts\")}\n                className=\"h-6 w-6 p-0 text-gray-500 hover:text-white hover:bg-purple-500 ml-2 rounded-full transition-all duration-200 cursor-pointer\"\n                title=\"Create new artifact\"\n              >\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </ScrollArea>\n\n        {/* Admin Section */}\n        {isAdmin && (\n          <div className=\"p-4 border-t border-gray-200\">\n            <Link\n              href=\"/admin\"\n              className={`flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors w-full ${\n                location === '/admin' ? 'bg-red-50 border border-red-200 text-red-600' : 'text-gray-700 hover:text-red-600'\n              }`}\n            >\n              <Shield className=\"w-5 h-5\" />\n              <span className=\"text-sm font-medium\">Admin Dashboard</span>\n            </Link>\n          </div>\n        )}\n\n        {/* User Profile */}\n        <div className=\"p-4 border-t border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            {user?.profileImageUrl ? (\n              <img \n                src={user.profileImageUrl} \n                alt=\"Profile\" \n                className=\"w-8 h-8 rounded-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                <User className=\"text-white w-4 h-4\" />\n              </div>\n            )}\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-gray-900\">\n                {user?.email?.split('@')[0] || 'User'}\n              </p>\n              <p className=\"text-xs text-gray-500\">SnappyLearn</p>\n            </div>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"h-8 w-8 p-0 text-gray-400 hover:text-gray-600\"\n              onClick={handleLogout}\n              title=\"Sign out\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </aside>\n\n      <CreateCollectionModal \n        open={showCreateModal} \n        onOpenChange={setShowCreateModal} \n      />\n    </>\n  );\n}\n","size_bytes":10511},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'\n\ninterface User {\n  id: string\n  email: string\n  firstName?: string | null\n  lastName?: string | null\n  profileImageUrl?: string | null\n  role: string\n}\n\ninterface AuthContextType {\n  user: User | null\n  signIn: (email: string, password: string) => Promise<{ error: { message: string } | null }>\n  signUp: (email: string, password: string) => Promise<{ error: { message: string } | null }>\n  signOut: () => Promise<void>\n  loading: boolean\n  isAdmin: boolean\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\ninterface AuthProviderProps {\n  children: ReactNode\n}\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  // Check if user is admin\n  const isAdmin = user && (user.role === 'admin' || user.role === 'super_admin')\n\n  useEffect(() => {\n    // Check for stored JWT token\n    const checkSession = async () => {\n      try {\n        const token = localStorage.getItem('auth_token');\n        \n        if (!token) {\n          console.log('No stored token found');\n          setLoading(false);\n          return;\n        }\n\n        console.log('Found stored token, validating...');\n        \n        // Validate token with backend\n        const response = await fetch('/api/auth/user', {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n          },\n        });\n\n        if (response.ok) {\n          const userData = await response.json();\n          console.log('Token valid, user restored:', userData.email);\n          setUser(userData);\n        } else {\n          console.log('Token invalid, clearing...');\n          localStorage.removeItem('auth_token');\n        }\n      } catch (error) {\n        console.error('Session check error:', error);\n        localStorage.removeItem('auth_token');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    checkSession();\n  }, [])\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const response = await fetch('/api/auth/signin', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok) {\n        return { error: { message: data.error || 'Login failed' } };\n      }\n\n      if (data.token && data.user) {\n        // Store JWT token\n        localStorage.setItem('auth_token', data.token);\n        setUser(data.user);\n        console.log('Login successful:', data.user.email);\n        return { error: null };\n      }\n\n      return { error: { message: 'Login failed' } };\n    } catch (error) {\n      return { error: { message: 'Network error occurred' } };\n    }\n  }\n\n  const signUp = async (email: string, password: string) => {\n    try {\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok) {\n        return { error: { message: data.error || 'Signup failed' } };\n      }\n\n      console.log('Signup successful:', data.message);\n      return { error: null };\n    } catch (error) {\n      return { error: { message: 'Network error occurred' } };\n    }\n  }\n\n  const signOut = async () => {\n    try {\n      // Call backend signout endpoint (optional)\n      await fetch('/api/auth/signout', { method: 'POST' });\n    } catch (error) {\n      console.log('Signout endpoint error:', error);\n    } finally {\n      // Clear token and user state\n      localStorage.removeItem('auth_token');\n      setUser(null);\n      console.log('Signed out successfully');\n    }\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, signIn, signUp, signOut, loading, isAdmin }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}","size_bytes":4255},"client/src/hooks/use-artifacts.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Artifact, InsertArtifact } from \"@shared/schema\";\n\nexport function useArtifacts(filters?: { type?: string; collectionId?: number }) {\n  const params = new URLSearchParams();\n  if (filters?.type) params.append(\"type\", filters.type);\n  if (filters?.collectionId) params.append(\"collectionId\", filters.collectionId.toString());\n  \n  const queryString = params.toString();\n  const url = `/api/artifacts${queryString ? `?${queryString}` : \"\"}`;\n  \n  return useQuery({\n    queryKey: [\"/api/artifacts\", filters],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", url);\n      return response.json();\n    },\n  });\n}\n\nexport function useArtifact(id: number) {\n  return useQuery({\n    queryKey: [\"/api/artifacts\", id],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/artifacts/${id}`);\n      return response.json();\n    },\n    enabled: !!id,\n  });\n}\n\nexport function useCreateArtifact() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (artifact: InsertArtifact) => {\n      const response = await apiRequest(\"POST\", \"/api/artifacts\", artifact);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/artifacts\"] });\n    },\n  });\n}\n\nexport function useUpdateArtifact() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ id, ...updates }: { id: number } & Partial<InsertArtifact>) => {\n      const response = await apiRequest(\"PUT\", `/api/artifacts/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/artifacts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/artifacts\", variables.id] });\n    },\n  });\n}\n\nexport function useDeleteArtifact() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/artifacts/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/artifacts\"] });\n    },\n  });\n}","size_bytes":2302},"client/src/hooks/use-collections.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { collectionsApi } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Analytics } from \"@/lib/analytics\";\n\nexport function useCollections() {\n  return useQuery({\n    queryKey: [\"/api/collections\"],\n    queryFn: collectionsApi.getAll,\n  });\n}\n\nexport function useCollection(id: number) {\n  return useQuery({\n    queryKey: [\"/api/collections\", id],\n    queryFn: () => collectionsApi.getById(id),\n    enabled: !!id,\n  });\n}\n\nexport function useCreateCollection() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: collectionsApi.create,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/collections\"] });\n      \n      // Track collection creation\n      Analytics.trackCollectionCreated(data.id, data.name);\n      \n      toast({\n        title: \"Success\",\n        description: \"Collection created successfully\",\n      });\n    },\n    onError: (error) => {\n      Analytics.trackError(\"Failed to create collection\", { error: error.message });\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create collection\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useDeleteCollection() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: (params: { id: number; name: string }) => collectionsApi.delete(params.id),\n    onSuccess: (_, params) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/collections\"] });\n      \n      // Track collection deletion\n      Analytics.trackCollectionDeleted(params.id, params.name);\n      \n      toast({\n        title: \"Success\",\n        description: \"Collection deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      Analytics.trackError(\"Failed to delete collection\", { error: error.message });\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete collection\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n","size_bytes":2090},"client/src/hooks/use-conversations.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { conversationsApi } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Analytics } from \"@/lib/analytics\";\n\nexport function useConversations() {\n  return useQuery({\n    queryKey: [\"/api/conversations\"],\n    queryFn: conversationsApi.getAll,\n  });\n}\n\nexport function useConversation(id: number) {\n  return useQuery({\n    queryKey: [\"/api/conversations\", id],\n    queryFn: () => conversationsApi.getById(id),\n    enabled: !!id,\n  });\n}\n\nexport function useCreateConversation() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: conversationsApi.create,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      \n      // Track conversation creation\n      Analytics.trackConversationStarted(\n        data.conversation.id,\n        data.conversation.type as 'independent' | 'collection',\n        data.conversation.collectionId || undefined\n      );\n    },\n    onError: (error) => {\n      Analytics.trackError(\"Failed to create conversation\", { error: error.message });\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start conversation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n","size_bytes":1344},"client/src/hooks/use-messages.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { messagesApi } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function useMessages(conversationId: number) {\n  return useQuery({\n    queryKey: [\"/api/conversations\", conversationId, \"messages\"],\n    queryFn: () => messagesApi.getByConversation(conversationId),\n    enabled: !!conversationId,\n  });\n}\n\nexport function useSendMessage() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: ({ conversationId, content }: { conversationId: number; content: string }) =>\n      messagesApi.send(conversationId, content),\n    onSuccess: (_, { conversationId }) => {\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/conversations\", conversationId, \"messages\"] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/conversations\"] \n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n","size_bytes":1126},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"// This hook is deprecated - use AuthContext instead\nexport { useAuth } from \"../contexts/AuthContext\";","size_bytes":103},"client/src/hooks/usePostHog.ts":{"content":"// Custom PostHog hook for SnappyLearn\nimport { useEffect, useRef } from 'react';\nimport posthog from 'posthog-js';\n\nexport function usePostHog() {\n  const postHogRef = useRef(posthog);\n  \n  useEffect(() => {\n    // Ensure PostHog is initialized\n    if (!postHogRef.current) {\n      postHogRef.current = posthog;\n    }\n  }, []);\n\n  return postHogRef.current;\n}\n\n// Hook for tracking page views\nexport function usePageView(pageName: string) {\n  const posthog = usePostHog();\n  \n  useEffect(() => {\n    if (posthog) {\n      posthog.capture('page_view', {\n        page_name: pageName,\n        path: window.location.pathname,\n      });\n    }\n  }, [posthog, pageName]);\n}\n\n// Hook for tracking user actions\nexport function useTrackAction() {\n  const posthog = usePostHog();\n  \n  return (action: string, properties?: any) => {\n    if (posthog) {\n      posthog.capture(action, properties);\n    }\n  };\n}","size_bytes":895},"client/src/lib/analytics.ts":{"content":"// PostHog Analytics utilities for SnappyLearn using React SDK\nimport posthog from 'posthog-js';\n\n// Analytics utility class using PostHog React SDK\nexport class Analytics {\n  static identify(userId: string, properties?: any) {\n    if (typeof window !== 'undefined' && posthog) {\n      posthog.identify(userId, properties);\n    }\n  }\n\n  static capture(event: string, properties?: any) {\n    if (typeof window !== 'undefined' && posthog) {\n      posthog.capture(event, properties);\n    }\n  }\n\n  static reset() {\n    if (typeof window !== 'undefined' && posthog) {\n      posthog.reset();\n    }\n  }\n\n  static isFeatureEnabled(flag: string): boolean {\n    if (typeof window !== 'undefined' && posthog) {\n      return posthog.isFeatureEnabled(flag);\n    }\n    return false;\n  }\n\n  // User Authentication Events\n  static trackSignIn(method: string, userId: string) {\n    this.capture('user_signed_in', {\n      method,\n      user_id: userId,\n    });\n  }\n\n  static trackSignUp(method: string, userId: string) {\n    this.capture('user_signed_up', {\n      method,\n      user_id: userId,\n    });\n  }\n\n  static trackSignOut() {\n    this.capture('user_signed_out');\n  }\n\n  // Collection Events\n  static trackCollectionCreated(collectionId: number, name: string) {\n    this.capture('collection_created', {\n      collection_id: collectionId,\n      collection_name: name,\n    });\n  }\n\n  static trackCollectionDeleted(collectionId: number, name: string) {\n    this.capture('collection_deleted', {\n      collection_id: collectionId,\n      collection_name: name,\n    });\n  }\n\n  static trackCollectionViewed(collectionId: number, name: string) {\n    this.capture('collection_viewed', {\n      collection_id: collectionId,\n      collection_name: name,\n    });\n  }\n\n  // Document Events\n  static trackDocumentUploaded(documentId: number, collectionId: number, fileType: string, fileSize: number) {\n    this.capture('document_uploaded', {\n      document_id: documentId,\n      collection_id: collectionId,\n      file_type: fileType,\n      file_size: fileSize,\n    });\n  }\n\n  static trackDocumentDeleted(documentId: number, collectionId: number) {\n    this.capture('document_deleted', {\n      document_id: documentId,\n      collection_id: collectionId,\n    });\n  }\n\n  // Conversation Events\n  static trackConversationStarted(conversationId: number, type: 'independent' | 'collection', collectionId?: number) {\n    this.capture('conversation_started', {\n      conversation_id: conversationId,\n      conversation_type: type,\n      collection_id: collectionId,\n    });\n  }\n\n  static trackMessageSent(conversationId: number, messageLength: number, hasAttachments: boolean) {\n    this.capture('message_sent', {\n      conversation_id: conversationId,\n      message_length: messageLength,\n      has_attachments: hasAttachments,\n    });\n  }\n\n  static trackConversationDeleted(conversationId: number, type: string) {\n    this.capture('conversation_deleted', {\n      conversation_id: conversationId,\n      conversation_type: type,\n    });\n  }\n\n  // Artifact Events\n  static trackArtifactCreated(artifactId: number, type: string, title: string) {\n    this.capture('artifact_created', {\n      artifact_id: artifactId,\n      artifact_type: type,\n      artifact_title: title,\n    });\n  }\n\n  static trackArtifactViewed(artifactId: number, type: string) {\n    this.capture('artifact_viewed', {\n      artifact_id: artifactId,\n      artifact_type: type,\n    });\n  }\n\n  static trackArtifactDeleted(artifactId: number, type: string) {\n    this.capture('artifact_deleted', {\n      artifact_id: artifactId,\n      artifact_type: type,\n    });\n  }\n\n  // Page Views\n  static trackPageView(page: string, additionalProps?: any) {\n    this.capture('page_viewed', {\n      page,\n      ...additionalProps,\n    });\n  }\n\n  // Dashboard Events\n  static trackQuickAction(action: string) {\n    this.capture('quick_action_used', {\n      action,\n    });\n  }\n\n  static trackCollectionSelected(collectionId: number, collectionName: string) {\n    this.capture('collection_selected_for_chat', {\n      collection_id: collectionId,\n      collection_name: collectionName,\n    });\n  }\n\n  // Error Events\n  static trackError(error: string, context?: any) {\n    this.capture('error_occurred', {\n      error_message: error,\n      context,\n    });\n  }\n\n  // Feature Usage\n  static trackFeatureUsed(feature: string, details?: any) {\n    this.capture('feature_used', {\n      feature,\n      ...details,\n    });\n  }\n}","size_bytes":4437},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { \n  Collection, \n  Document, \n  Conversation, \n  Message, \n  InsertCollection, \n  CollectionWithStats,\n  ConversationWithPreview \n} from \"@shared/schema\";\n\n// Collections API\nexport const collectionsApi = {\n  getAll: async (): Promise<CollectionWithStats[]> => {\n    const res = await apiRequest(\"GET\", \"/api/collections\");\n    return res.json();\n  },\n\n  getById: async (id: number): Promise<Collection> => {\n    const res = await apiRequest(\"GET\", `/api/collections/${id}`);\n    return res.json();\n  },\n\n  create: async (data: Omit<InsertCollection, \"userId\">): Promise<Collection> => {\n    const res = await apiRequest(\"POST\", \"/api/collections\", data);\n    return res.json();\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await apiRequest(\"DELETE\", `/api/collections/${id}`);\n  },\n};\n\n// Documents API\nexport const documentsApi = {\n  getByCollection: async (collectionId: number): Promise<Document[]> => {\n    const res = await apiRequest(\"GET\", `/api/collections/${collectionId}/documents`);\n    return res.json();\n  },\n\n  upload: async (collectionId: number, file: File): Promise<Document> => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    \n    const res = await fetch(`/api/collections/${collectionId}/documents`, {\n      method: \"POST\",\n      body: formData,\n      credentials: \"include\",\n    });\n\n    if (!res.ok) {\n      const text = (await res.text()) || res.statusText;\n      throw new Error(`${res.status}: ${text}`);\n    }\n\n    return res.json();\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await apiRequest(\"DELETE\", `/api/documents/${id}`);\n  },\n};\n\n// Conversations API\nexport const conversationsApi = {\n  getAll: async (): Promise<ConversationWithPreview[]> => {\n    const res = await apiRequest(\"GET\", \"/api/conversations\");\n    return res.json();\n  },\n\n  getById: async (id: number): Promise<Conversation> => {\n    const res = await apiRequest(\"GET\", `/api/conversations/${id}`);\n    return res.json();\n  },\n\n  create: async (data: { message: string; type: string; collectionId?: number; attachments?: File[] }): Promise<{ conversation: Conversation; messages: Message[] }> => {\n    if (data.attachments && data.attachments.length > 0) {\n      // Use FormData for file uploads\n      const formData = new FormData();\n      formData.append(\"message\", data.message);\n      formData.append(\"type\", data.type);\n      if (data.collectionId) {\n        formData.append(\"collectionId\", data.collectionId.toString());\n      }\n      \n      data.attachments.forEach((file, index) => {\n        formData.append(`attachments`, file);\n      });\n\n      const res = await fetch(\"/api/conversations\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!res.ok) {\n        const text = (await res.text()) || res.statusText;\n        throw new Error(`${res.status}: ${text}`);\n      }\n\n      return res.json();\n    } else {\n      // Use regular JSON for text-only messages\n      const res = await apiRequest(\"POST\", \"/api/conversations\", data);\n      return res.json();\n    }\n  },\n};\n\n// Messages API\nexport const messagesApi = {\n  getByConversation: async (conversationId: number): Promise<Message[]> => {\n    const res = await apiRequest(\"GET\", `/api/conversations/${conversationId}/messages`);\n    return res.json();\n  },\n\n  send: async (conversationId: number, content: string): Promise<Message[]> => {\n    const res = await apiRequest(\"POST\", `/api/conversations/${conversationId}/messages`, { content });\n    return res.json();\n  },\n};\n","size_bytes":3606},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { supabase } from \"./supabase\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Get auth token from localStorage\n  const token = localStorage.getItem('auth_token');\n  \n  const headers: Record<string, string> = {};\n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Get auth token from localStorage\n    const token = localStorage.getItem('auth_token');\n    \n    const headers: Record<string, string> = {};\n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey[0] as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1878},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://placeholder.supabase.co'\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'placeholder-key'\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)","size_bytes":296},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminDashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Users, \n  Building, \n  Activity, \n  ShieldCheck, \n  CheckCircle, \n  XCircle,\n  AlertTriangle,\n  TrendingUp\n} from \"lucide-react\";\nimport { DataTable } from \"@/components/admin/DataTable\";\nimport { TenantDialog } from \"@/components/admin/TenantDialog\";\nimport { UserManagementTable } from \"@/components/admin/UserManagementTable\";\nimport { AuditLogsTable } from \"@/components/admin/AuditLogsTable\";\nimport { useState } from \"react\";\nimport type { AdminDashboardStats, TenantWithStats } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedTenant, setSelectedTenant] = useState<TenantWithStats | null>(null);\n  const [showTenantDialog, setShowTenantDialog] = useState(false);\n\n  // Fetch admin dashboard stats\n  const { data: stats, isLoading: statsLoading } = useQuery<AdminDashboardStats>({\n    queryKey: [\"/api/admin/dashboard\"],\n    enabled: !!user\n  });\n\n  // Fetch tenants\n  const { data: tenants, isLoading: tenantsLoading } = useQuery<TenantWithStats[]>({\n    queryKey: [\"/api/admin/tenants\"],\n    enabled: !!user\n  });\n\n  // Tenant activation/deactivation mutations\n  const activateTenantMutation = useMutation({\n    mutationFn: async (tenantId: string) => {\n      const response = await fetch(`/api/admin/tenants/${tenantId}/activate`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error('Failed to activate tenant');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/tenants\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard\"] });\n    }\n  });\n\n  const deactivateTenantMutation = useMutation({\n    mutationFn: async (tenantId: string) => {\n      const response = await fetch(`/api/admin/tenants/${tenantId}/deactivate`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error('Failed to deactivate tenant');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/tenants\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard\"] });\n    }\n  });\n\n  if (statsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Admin Dashboard</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Manage tenants, users, and system settings\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <ShieldCheck className=\"h-5 w-5 text-green-500\" />\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Admin Access\n          </span>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Tenants</CardTitle>\n            <Building className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.totalTenants || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats?.activeTenants || 0} active\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.totalUsers || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats?.activeUsers || 0} active\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Collections</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.totalCollections || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats?.totalDocuments || 0} documents\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">New Users</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.newUsersThisMonth || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">This month</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"tenants\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"tenants\">Tenants</TabsTrigger>\n          <TabsTrigger value=\"users\">Users</TabsTrigger>\n          <TabsTrigger value=\"audit\">Audit Logs</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"tenants\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Tenant Management</h2>\n            <Button onClick={() => setShowTenantDialog(true)}>\n              Add New Tenant\n            </Button>\n          </div>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Active Tenants</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {tenantsLoading ? (\n                <div className=\"flex items-center justify-center h-32\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-purple-600\"></div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {tenants?.map((tenant) => (\n                    <div key={tenant.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <h3 className=\"font-medium\">{tenant.name}</h3>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {tenant.domain}\n                          </p>\n                        </div>\n                        <Badge variant={tenant.isActive ? \"default\" : \"destructive\"}>\n                          {tenant.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                        <Badge variant=\"outline\">\n                          {tenant.plan}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {tenant.userCount} users • {tenant.collectionCount} collections\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          {tenant.isActive ? (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => deactivateTenantMutation.mutate(tenant.id)}\n                              disabled={deactivateTenantMutation.isPending}\n                            >\n                              <XCircle className=\"h-4 w-4 mr-1\" />\n                              Deactivate\n                            </Button>\n                          ) : (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => activateTenantMutation.mutate(tenant.id)}\n                              disabled={activateTenantMutation.isPending}\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              Activate\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <div>\n            <h2 className=\"text-xl font-semibold mb-4\">User Management</h2>\n            <UserManagementTable />\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"audit\" className=\"space-y-4\">\n          <div>\n            <h2 className=\"text-xl font-semibold mb-4\">Audit Logs</h2>\n            <AuditLogsTable />\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Tenant Dialog */}\n      <TenantDialog \n        open={showTenantDialog} \n        onOpenChange={setShowTenantDialog}\n        tenant={selectedTenant}\n      />\n    </div>\n  );\n}","size_bytes":9962},"client/src/pages/artifacts.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { \n  Code, Calculator, FileText, MessageSquare, BarChart3, \n  GitBranch, Filter, Search, Plus, Edit, Trash2, Eye\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { ArtifactViewer } from \"@/components/artifact-viewer\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Artifact } from \"@shared/schema\";\nimport snappyLearnLogo from \"@assets/Transparent Snappy Logo_1751027278079.png\";\n\n\n\nconst artifactTypes = [\n  { value: \"code_playground\", label: \"Code Playground\", icon: Code, color: \"bg-blue-500\" },\n  { value: \"math_visualizer\", label: \"Math Visualizer\", icon: Calculator, color: \"bg-green-500\" },\n  { value: \"document_generator\", label: \"Document Generator\", icon: FileText, color: \"bg-purple-500\" },\n  { value: \"quiz_builder\", label: \"Quiz Builder\", icon: MessageSquare, color: \"bg-orange-500\" },\n  { value: \"presentation_maker\", label: \"Presentation Maker\", icon: BarChart3, color: \"bg-red-500\" },\n  { value: \"data_visualizer\", label: \"Data Visualizer\", icon: BarChart3, color: \"bg-cyan-500\" },\n  { value: \"mind_map_creator\", label: \"Mind Map Creator\", icon: GitBranch, color: \"bg-pink-500\" },\n  { value: \"interactive\", label: \"Interactive Tool\", icon: Code, color: \"bg-indigo-500\" },\n];\n\n// Sample artifacts data - moved outside the component to be accessible by both functions\nconst sampleArtifacts = {\n  'code_playground': {\n    html: `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Code Playground</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body class=\"p-6 bg-gray-50\">\n    <div class=\"max-w-6xl mx-auto\">\n        <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Code Playground</h1>\n        <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div class=\"bg-white rounded-lg p-6 shadow-lg\">\n                <h2 class=\"text-xl font-semibold mb-4\">HTML</h2>\n                <textarea id=\"html\" class=\"w-full h-32 p-3 border rounded-lg font-mono text-sm\" placeholder=\"Enter HTML...\"><div class=\"p-4 bg-blue-100 rounded-lg\">\n  <h2 class=\"text-xl font-bold text-blue-800\">Hello World!</h2>\n  <p class=\"text-blue-600\">This is a sample HTML content.</p>\n  <button id=\"clickMe\" class=\"mt-2 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">Click Me!</button>\n</div></textarea>\n                \n                <h2 class=\"text-xl font-semibold mb-4 mt-6\">CSS</h2>\n                <textarea id=\"css\" class=\"w-full h-32 p-3 border rounded-lg font-mono text-sm\" placeholder=\"Enter CSS...\">body { font-family: Arial, sans-serif; }\n.highlight { background-color: #fef3c7; padding: 8px; border-radius: 4px; }\n.animate-bounce { animation: bounce 1s infinite; }\n@keyframes bounce { 0%, 100% { transform: translateY(0); } 50% { transform: translateY(-10px); } }</textarea>\n                \n                <h2 class=\"text-xl font-semibold mb-4 mt-6\">JavaScript</h2>\n                <textarea id=\"js\" class=\"w-full h-32 p-3 border rounded-lg font-mono text-sm\" placeholder=\"Enter JavaScript...\">document.addEventListener('DOMContentLoaded', function() {\n  const button = document.getElementById('clickMe');\n  let clicks = 0;\n  \n  button.addEventListener('click', function() {\n    clicks++;\n    button.textContent = \\`Clicked \\${clicks} times!\\`;\n    button.classList.add('animate-bounce');\n    setTimeout(() => button.classList.remove('animate-bounce'), 1000);\n  });\n});</textarea>\n                \n                <button onclick=\"runCode()\" class=\"mt-4 bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600\">Run Code</button>\n            </div>\n            \n            <div class=\"bg-white rounded-lg p-6 shadow-lg\">\n                <h2 class=\"text-xl font-semibold mb-4\">Output</h2>\n                <div id=\"output\" class=\"w-full h-96 border rounded-lg bg-gray-50\"></div>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        function runCode() {\n            const html = document.getElementById('html').value;\n            const css = document.getElementById('css').value;\n            const js = document.getElementById('js').value;\n            \n            const output = document.getElementById('output');\n            const fullCode = \\`\n                <style>\\${css}</style>\n                \\${html}\n                <script>\\${js}<\\/script>\n            \\`;\n            \n            output.innerHTML = '';\n            const iframe = document.createElement('iframe');\n            iframe.style.width = '100%';\n            iframe.style.height = '100%';\n            iframe.style.border = 'none';\n            output.appendChild(iframe);\n            \n            iframe.contentDocument.write(fullCode);\n            iframe.contentDocument.close();\n        }\n        \n        // Run code on page load\n        runCode();\n    </script>\n</body>\n</html>`,\n    title: 'Code Playground'\n  },\n  'math_visualizer': {\n    html: `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Math Visualizer</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n</head>\n<body class=\"p-6 bg-gray-50\">\n    <div class=\"max-w-4xl mx-auto\">\n        <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Math Visualizer</h1>\n        <div class=\"bg-white rounded-lg p-6 shadow-lg\">\n            <div class=\"mb-4\">\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">Enter Function (e.g., x^2, sin(x), etc.)</label>\n                <input type=\"text\" id=\"functionInput\" class=\"w-full p-3 border rounded-lg\" placeholder=\"x^2\" value=\"x^2\">\n                <button onclick=\"plotFunction()\" class=\"mt-2 bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600\">Plot Function</button>\n            </div>\n            <div id=\"plot\" class=\"w-full h-96 border rounded-lg\"></div>\n        </div>\n    </div>\n    \n    <script>\n        function plotFunction() {\n            const funcStr = document.getElementById('functionInput').value;\n            const x = [];\n            const y = [];\n            \n            try {\n                for (let i = -10; i <= 10; i += 0.1) {\n                    x.push(i);\n                    let result = eval(funcStr.replace(/x/g, i).replace(/sin/g, 'Math.sin').replace(/cos/g, 'Math.cos').replace(/tan/g, 'Math.tan').replace(/\\\\^/g, '**'));\n                    y.push(result);\n                }\n                \n                const trace = {\n                    x: x,\n                    y: y,\n                    type: 'scatter',\n                    mode: 'lines',\n                    name: funcStr\n                };\n                \n                const layout = {\n                    title: \\`Graph of \\${funcStr}\\`,\n                    xaxis: { title: 'x' },\n                    yaxis: { title: 'y' },\n                    grid: true\n                };\n                \n                Plotly.newPlot('plot', [trace], layout);\n            } catch (error) {\n                alert('Invalid function. Please check your input.');\n            }\n        }\n        \n        plotFunction();\n    </script>\n</body>\n</html>`,\n    title: 'Math Visualizer'\n  },\n  'quiz_builder': {\n    html: `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Quiz Builder</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body class=\"p-6 bg-gray-50\">\n    <div class=\"max-w-2xl mx-auto\">\n        <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Interactive Quiz</h1>\n        <div id=\"quizContainer\" class=\"bg-white rounded-lg p-6 shadow-lg\">\n            <div id=\"questionContainer\"></div>\n            <div id=\"optionsContainer\" class=\"mt-4\"></div>\n            <div id=\"resultContainer\" class=\"mt-4 hidden\"></div>\n            <button id=\"nextBtn\" onclick=\"nextQuestion()\" class=\"mt-4 bg-orange-500 text-white py-2 px-4 rounded-lg hover:bg-orange-600 hidden\">Next Question</button>\n        </div>\n        <div id=\"scoreContainer\" class=\"mt-6 bg-white rounded-lg p-6 shadow-lg hidden\">\n            <h2 class=\"text-xl font-semibold mb-2\">Quiz Complete!</h2>\n            <p id=\"finalScore\" class=\"text-lg\"></p>\n            <button onclick=\"restartQuiz()\" class=\"mt-4 bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600\">Restart Quiz</button>\n        </div>\n    </div>\n    \n    <script>\n        const quizData = [\n            {\n                question: \"What is the capital of France?\",\n                options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"],\n                correct: 2\n            },\n            {\n                question: \"Which planet is closest to the Sun?\",\n                options: [\"Venus\", \"Mercury\", \"Earth\", \"Mars\"],\n                correct: 1\n            },\n            {\n                question: \"What is 2 + 2?\",\n                options: [\"3\", \"4\", \"5\", \"6\"],\n                correct: 1\n            }\n        ];\n        \n        let currentQuestion = 0;\n        let score = 0;\n        let selectedAnswer = null;\n        \n        function loadQuestion() {\n            const question = quizData[currentQuestion];\n            document.getElementById('questionContainer').innerHTML = \\`\n                <h2 class=\"text-xl font-semibold mb-4\">Question \\${currentQuestion + 1} of \\${quizData.length}</h2>\n                <p class=\"text-lg mb-4\">\\${question.question}</p>\n            \\`;\n            \n            const optionsHtml = question.options.map((option, index) => \\`\n                <div class=\"mb-2\">\n                    <button onclick=\"selectAnswer(\\${index})\" class=\"w-full text-left p-3 border rounded-lg hover:bg-gray-50 transition-colors\" id=\"option\\${index}\">\n                        \\${option}\n                    </button>\n                </div>\n            \\`).join('');\n            \n            document.getElementById('optionsContainer').innerHTML = optionsHtml;\n            document.getElementById('resultContainer').classList.add('hidden');\n            document.getElementById('nextBtn').classList.add('hidden');\n            selectedAnswer = null;\n        }\n        \n        function selectAnswer(index) {\n            selectedAnswer = index;\n            const question = quizData[currentQuestion];\n            const isCorrect = index === question.correct;\n            \n            for (let i = 0; i < question.options.length; i++) {\n                const option = document.getElementById(\\`option\\${i}\\`);\n                option.classList.remove('bg-green-200', 'bg-red-200');\n                if (i === question.correct) {\n                    option.classList.add('bg-green-200');\n                } else if (i === index && !isCorrect) {\n                    option.classList.add('bg-red-200');\n                }\n                option.disabled = true;\n            }\n            \n            if (isCorrect) {\n                score++;\n                document.getElementById('resultContainer').innerHTML = '<p class=\"text-green-600 font-semibold\">Correct!</p>';\n            } else {\n                document.getElementById('resultContainer').innerHTML = '<p class=\"text-red-600 font-semibold\">Incorrect!</p>';\n            }\n            \n            document.getElementById('resultContainer').classList.remove('hidden');\n            document.getElementById('nextBtn').classList.remove('hidden');\n        }\n        \n        function nextQuestion() {\n            currentQuestion++;\n            if (currentQuestion < quizData.length) {\n                loadQuestion();\n            } else {\n                showResults();\n            }\n        }\n        \n        function showResults() {\n            document.getElementById('quizContainer').classList.add('hidden');\n            document.getElementById('scoreContainer').classList.remove('hidden');\n            document.getElementById('finalScore').textContent = \\`You scored \\${score} out of \\${quizData.length}!\\`;\n        }\n        \n        function restartQuiz() {\n            currentQuestion = 0;\n            score = 0;\n            document.getElementById('quizContainer').classList.remove('hidden');\n            document.getElementById('scoreContainer').classList.add('hidden');\n            loadQuestion();\n        }\n        \n        loadQuestion();\n    </script>\n</body>\n</html>`,\n    title: 'Interactive Quiz'\n  }\n};\n\nexport default function ArtifactsPage() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [selectedArtifact, setSelectedArtifact] = useState<{html: string, title: string} | null>(null);\n  const [showArtifactViewer, setShowArtifactViewer] = useState(false);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"inspiration\");\n  \n  const queryClient = useQueryClient();\n\n  // Fetch artifacts\n  const { data: artifacts = [], isLoading } = useQuery({\n    queryKey: [\"/api/artifacts\", filterType !== \"all\" ? filterType : undefined],\n    queryFn: () => apiRequest(`/api/artifacts${filterType !== \"all\" ? `?type=${filterType}` : \"\"}`)\n  });\n\n  // Delete artifact mutation\n  const deleteArtifact = useMutation({\n    mutationFn: (id: number) => apiRequest(`/api/artifacts/${id}`, { method: \"DELETE\" }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/artifacts\"] });\n    }\n  });\n\n  // Filter artifacts based on search term\n  const filteredArtifacts = artifacts.filter((artifact: Artifact) =>\n    artifact.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    artifact.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleViewArtifact = (artifact: Artifact) => {\n    setSelectedArtifact({ \n      html: artifact.content, \n      title: artifact.title \n    });\n    setShowArtifactViewer(true);\n  };\n\n  const handleDeleteArtifact = (id: number) => {\n    if (confirm(\"Are you sure you want to delete this artifact?\")) {\n      deleteArtifact.mutate(id);\n    }\n  };\n\n  const handleViewSampleArtifact = (type: string) => {\n    const artifact = sampleArtifacts[type];\n    if (artifact) {\n      setSelectedArtifact(artifact);\n      setShowArtifactViewer(true);\n    }\n  };\n\n  const getTypeInfo = (type: string) => {\n    return artifactTypes.find(t => t.value === type) || artifactTypes[0];\n  };\n\n  const renderArtifactCard = (artifact: Artifact) => {\n    const typeInfo = getTypeInfo(artifact.type);\n    const IconComponent = typeInfo.icon;\n\n    return (\n      <Card key={artifact.id} className=\"hover:shadow-lg transition-shadow\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className={`p-2 rounded-lg ${typeInfo.color} text-white`}>\n                <IconComponent className=\"w-5 h-5\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-lg\">{artifact.title}</CardTitle>\n                <CardDescription>{artifact.description}</CardDescription>\n              </div>\n            </div>\n            <Badge variant=\"secondary\">{typeInfo.label}</Badge>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-gray-500\">\n              Created {new Date(artifact.createdAt).toLocaleDateString()}\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => handleViewArtifact(artifact)}\n              >\n                <Eye className=\"w-4 h-4 mr-1\" />\n                View\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => handleDeleteArtifact(artifact.id)}\n                className=\"text-red-600 hover:text-red-800\"\n              >\n                <Trash2 className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-8 h-8\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Artifacts</h1>\n                <p className=\"text-sm text-gray-600\">Interactive educational tools and content</p>\n              </div>\n            </div>\n            <Button \n              onClick={() => setActiveTab(\"create\")}\n              className=\"bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Artifact\n            </Button>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"mb-6 flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Artifacts</h1>\n              <p className=\"text-gray-600\">Create and manage your interactive educational tools</p>\n            </div>\n            <Button \n              onClick={() => setActiveTab(\"create\")}\n              className=\"bg-gray-900 hover:bg-gray-800 text-white\"\n            >\n              + New artifact\n            </Button>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-3 max-w-md\">\n              <TabsTrigger value=\"inspiration\">Inspiration</TabsTrigger>\n              <TabsTrigger value=\"browse\">My artifacts</TabsTrigger>\n              <TabsTrigger value=\"create\">Create</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"inspiration\" className=\"mt-6\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Get inspired with these sample artifacts</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {/* Sample Artifacts */}\n                  <Card className=\"hover:shadow-lg transition-shadow cursor-pointer group\" onClick={() => handleViewSampleArtifact('code_playground')}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"p-3 rounded-lg bg-blue-500 text-white group-hover:scale-110 transition-transform\">\n                          <Code className=\"w-6 h-6\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">Code Playground</CardTitle>\n                          <CardDescription>Interactive coding environment</CardDescription>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-600 mb-3\">\n                        Create and run code snippets in a live environment with syntax highlighting.\n                      </p>\n                      <Button \n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setActiveTab(\"create\");\n                        }}\n                        className=\"w-full bg-blue-500 hover:bg-blue-600\"\n                      >\n                        Create Code Playground\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"hover:shadow-lg transition-shadow cursor-pointer group\" onClick={() => handleViewSampleArtifact('math_visualizer')}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"p-3 rounded-lg bg-green-500 text-white group-hover:scale-110 transition-transform\">\n                          <Calculator className=\"w-6 h-6\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">Math Visualizer</CardTitle>\n                          <CardDescription>Mathematical calculations & graphs</CardDescription>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-600 mb-3\">\n                        Visualize mathematical functions and equations with interactive graphs.\n                      </p>\n                      <Button \n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setActiveTab(\"create\");\n                        }}\n                        className=\"w-full bg-green-500 hover:bg-green-600\"\n                      >\n                        Create Math Visualizer\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"hover:shadow-lg transition-shadow cursor-pointer group\" onClick={() => handleViewSampleArtifact('quiz_builder')}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"p-3 rounded-lg bg-orange-500 text-white group-hover:scale-110 transition-transform\">\n                          <MessageSquare className=\"w-6 h-6\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">Quiz Builder</CardTitle>\n                          <CardDescription>Create interactive quizzes</CardDescription>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-600 mb-3\">\n                        Build engaging quizzes with multiple question types and instant feedback.\n                      </p>\n                      <Button \n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setActiveTab(\"create\");\n                        }}\n                        className=\"w-full bg-orange-500 hover:bg-orange-600\"\n                      >\n                        Create Quiz Builder\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"browse\" className=\"mt-6\">\n              {/* Search and Filter */}\n              <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search artifacts...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n                <Select value={filterType} onValueChange={setFilterType}>\n                  <SelectTrigger className=\"w-full md:w-48\">\n                    <SelectValue placeholder=\"Filter by type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    {artifactTypes.map(type => (\n                      <SelectItem key={type.value} value={type.value}>\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Artifacts Grid */}\n              {isLoading ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {[...Array(6)].map((_, i) => (\n                    <Card key={i} className=\"animate-pulse\">\n                      <CardHeader>\n                        <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2 mt-2\"></div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : filteredArtifacts.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <Code className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No artifacts found</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    {searchTerm || filterType !== \"all\" \n                      ? \"Try adjusting your search or filter criteria\"\n                      : \"Start by creating your first artifact or chatting with AI to generate interactive content\"\n                    }\n                  </p>\n                  <Button \n                    onClick={() => setActiveTab(\"create\")}\n                    className=\"bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Your First Artifact\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {filteredArtifacts.map(renderArtifactCard)}\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"create\" className=\"mt-6\">\n              <ArtifactCreationTools />\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Artifact Viewer Modal */}\n      {showArtifactViewer && selectedArtifact && (\n        <ArtifactViewer \n          artifact={selectedArtifact}\n          onClose={() => {\n            setShowArtifactViewer(false);\n            setSelectedArtifact(null);\n          }}\n          isOpen={showArtifactViewer}\n        />\n      )}\n    </div>\n  );\n}\n\n// Artifact Creation Tools Component\nfunction ArtifactCreationTools() {\n  const [, setLocation] = useLocation();\n\n  const tools = [\n    {\n      type: \"code_playground\",\n      title: \"Code Playground\",\n      description: \"Interactive code editor with syntax highlighting\",\n      icon: Code,\n      color: \"bg-blue-500\",\n      template: `<!-- Artifact Title: Interactive Code Playground -->\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Code Playground</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/prism.min.js\"></script>\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"p-6 bg-gray-50\">\n    <div class=\"max-w-4xl mx-auto\">\n        <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Code Playground</h1>\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">HTML</label>\n                <textarea id=\"htmlCode\" class=\"w-full h-40 p-3 border rounded-lg font-mono text-sm\" placeholder=\"Enter HTML code...\"></textarea>\n            </div>\n            <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">CSS</label>\n                <textarea id=\"cssCode\" class=\"w-full h-40 p-3 border rounded-lg font-mono text-sm\" placeholder=\"Enter CSS code...\"></textarea>\n            </div>\n            <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">JavaScript</label>\n                <textarea id=\"jsCode\" class=\"w-full h-40 p-3 border rounded-lg font-mono text-sm\" placeholder=\"Enter JavaScript code...\"></textarea>\n            </div>\n            <div>\n                <button onclick=\"runCode()\" class=\"w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 mb-4\">Run Code</button>\n                <div id=\"output\" class=\"w-full h-40 border rounded-lg bg-white\"></div>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        function runCode() {\n            const html = document.getElementById('htmlCode').value;\n            const css = document.getElementById('cssCode').value;\n            const js = document.getElementById('jsCode').value;\n            \n            const output = document.getElementById('output');\n            const fullCode = \\`\n                <style>\\${css}</style>\n                \\${html}\n                <script>\\${js}<\\/script>\n            \\`;\n            \n            output.innerHTML = '';\n            const iframe = document.createElement('iframe');\n            iframe.style.width = '100%';\n            iframe.style.height = '100%';\n            iframe.style.border = 'none';\n            output.appendChild(iframe);\n            \n            iframe.contentDocument.write(fullCode);\n            iframe.contentDocument.close();\n        }\n    </script>\n</body>\n</html>`\n    },\n    {\n      type: \"math_visualizer\",\n      title: \"Math Visualizer\",\n      description: \"Interactive graphing calculator and equation solver\",\n      icon: Calculator,\n      color: \"bg-green-500\",\n      template: `<!-- Artifact Title: Math Visualizer -->\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Math Visualizer</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n</head>\n<body class=\"p-6 bg-gray-50\">\n    <div class=\"max-w-4xl mx-auto\">\n        <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Math Visualizer</h1>\n        <div class=\"bg-white rounded-lg p-6 shadow-lg\">\n            <div class=\"mb-4\">\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">Enter Function (e.g., x^2, sin(x), etc.)</label>\n                <input type=\"text\" id=\"functionInput\" class=\"w-full p-3 border rounded-lg\" placeholder=\"x^2\" value=\"x^2\">\n                <button onclick=\"plotFunction()\" class=\"mt-2 bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600\">Plot Function</button>\n            </div>\n            <div id=\"plot\" class=\"w-full h-96 border rounded-lg\"></div>\n        </div>\n    </div>\n    \n    <script>\n        function plotFunction() {\n            const funcStr = document.getElementById('functionInput').value;\n            const x = [];\n            const y = [];\n            \n            try {\n                for (let i = -10; i <= 10; i += 0.1) {\n                    x.push(i);\n                    // Simple function evaluation (replace with proper math parser for production)\n                    let result = eval(funcStr.replace(/x/g, i).replace(/sin/g, 'Math.sin').replace(/cos/g, 'Math.cos').replace(/tan/g, 'Math.tan').replace(/\\\\^/g, '**'));\n                    y.push(result);\n                }\n                \n                const trace = {\n                    x: x,\n                    y: y,\n                    type: 'scatter',\n                    mode: 'lines',\n                    name: funcStr\n                };\n                \n                const layout = {\n                    title: \\`Graph of \\${funcStr}\\`,\n                    xaxis: { title: 'x' },\n                    yaxis: { title: 'y' },\n                    grid: true\n                };\n                \n                Plotly.newPlot('plot', [trace], layout);\n            } catch (error) {\n                alert('Invalid function. Please check your input.');\n            }\n        }\n        \n        // Plot default function on load\n        plotFunction();\n    </script>\n</body>\n</html>`\n    },\n    {\n      type: \"quiz_builder\",\n      title: \"Quiz Builder\",\n      description: \"Create interactive quizzes and flashcards\",\n      icon: MessageSquare,\n      color: \"bg-orange-500\",\n      template: `<!-- Artifact Title: Interactive Quiz Builder -->\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Quiz Builder</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body class=\"p-6 bg-gray-50\">\n    <div class=\"max-w-2xl mx-auto\">\n        <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Interactive Quiz</h1>\n        <div id=\"quizContainer\" class=\"bg-white rounded-lg p-6 shadow-lg\">\n            <div id=\"questionContainer\"></div>\n            <div id=\"optionsContainer\" class=\"mt-4\"></div>\n            <div id=\"resultContainer\" class=\"mt-4 hidden\"></div>\n            <button id=\"nextBtn\" onclick=\"nextQuestion()\" class=\"mt-4 bg-orange-500 text-white py-2 px-4 rounded-lg hover:bg-orange-600 hidden\">Next Question</button>\n        </div>\n    </div>\n    \n    <script>\n        const quizData = [\n            {\n                question: \"What is the capital of France?\",\n                options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"],\n                correct: 2\n            },\n            {\n                question: \"Which planet is closest to the Sun?\",\n                options: [\"Venus\", \"Mercury\", \"Earth\", \"Mars\"],\n                correct: 1\n            },\n            {\n                question: \"What is 2 + 2?\",\n                options: [\"3\", \"4\", \"5\", \"6\"],\n                correct: 1\n            }\n        ];\n        \n        let currentQuestion = 0;\n        let score = 0;\n        \n        function loadQuestion() {\n            const question = quizData[currentQuestion];\n            document.getElementById('questionContainer').innerHTML = \\`\n                <h2 class=\"text-xl font-semibold mb-4\">Question \\${currentQuestion + 1} of \\${quizData.length}</h2>\n                <p class=\"text-lg mb-4\">\\${question.question}</p>\n            \\`;\n            \n            const optionsHtml = question.options.map((option, index) => \\`\n                <button onclick=\"selectAnswer(\\${index})\" class=\"block w-full p-3 mb-2 border rounded-lg hover:bg-gray-50 text-left\">\n                    \\${option}\n                </button>\n            \\`).join('');\n            \n            document.getElementById('optionsContainer').innerHTML = optionsHtml;\n            document.getElementById('resultContainer').classList.add('hidden');\n            document.getElementById('nextBtn').classList.add('hidden');\n        }\n        \n        function selectAnswer(selected) {\n            const question = quizData[currentQuestion];\n            const options = document.getElementById('optionsContainer').children;\n            \n            for (let i = 0; i < options.length; i++) {\n                options[i].disabled = true;\n                if (i === question.correct) {\n                    options[i].classList.add('bg-green-200');\n                } else if (i === selected && selected !== question.correct) {\n                    options[i].classList.add('bg-red-200');\n                }\n            }\n            \n            if (selected === question.correct) {\n                score++;\n                document.getElementById('resultContainer').innerHTML = '<p class=\"text-green-600 font-semibold\">Correct!</p>';\n            } else {\n                document.getElementById('resultContainer').innerHTML = '<p class=\"text-red-600 font-semibold\">Incorrect!</p>';\n            }\n            \n            document.getElementById('resultContainer').classList.remove('hidden');\n            \n            if (currentQuestion < quizData.length - 1) {\n                document.getElementById('nextBtn').classList.remove('hidden');\n            } else {\n                document.getElementById('nextBtn').innerHTML = 'Show Results';\n                document.getElementById('nextBtn').classList.remove('hidden');\n            }\n        }\n        \n        function nextQuestion() {\n            currentQuestion++;\n            \n            if (currentQuestion < quizData.length) {\n                loadQuestion();\n            } else {\n                showResults();\n            }\n        }\n        \n        function showResults() {\n            document.getElementById('quizContainer').innerHTML = \\`\n                <h2 class=\"text-2xl font-bold mb-4\">Quiz Complete!</h2>\n                <p class=\"text-lg mb-4\">Your score: \\${score} out of \\${quizData.length}</p>\n                <p class=\"text-lg mb-4\">Percentage: \\${Math.round((score / quizData.length) * 100)}%</p>\n                <button onclick=\"location.reload()\" class=\"bg-orange-500 text-white py-2 px-4 rounded-lg hover:bg-orange-600\">Take Quiz Again</button>\n            \\`;\n        }\n        \n        // Load first question\n        loadQuestion();\n    </script>\n</body>\n</html>`\n    }\n  ];\n\n  const handleToolClick = (tool: any) => {\n    // Open the sample artifact in the viewer instead of navigating to a new chat\n    const sampleArtifact = sampleArtifacts[tool.type];\n    if (sampleArtifact) {\n      setSelectedArtifact(sampleArtifact);\n      setShowArtifactViewer(true);\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {tools.map((tool) => {\n        const IconComponent = tool.icon;\n        return (\n          <Card key={tool.type} className=\"hover:shadow-lg transition-shadow cursor-pointer group\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`p-3 rounded-lg ${tool.color} text-white group-hover:scale-110 transition-transform`}>\n                  <IconComponent className=\"w-6 h-6\" />\n                </div>\n                <div>\n                  <CardTitle className=\"text-lg\">{tool.title}</CardTitle>\n                  <CardDescription>{tool.description}</CardDescription>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <Button \n                onClick={() => handleToolClick(tool)}\n                className=\"w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create {tool.title}\n              </Button>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n\n\n\nfunction getArtifactTypeInfo(type: string) {\n  const typeInfo = artifactTypes.find(t => t.value === type);\n  return typeInfo || { icon: Code, color: \"bg-gray-500\" };\n}","size_bytes":39576},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Lightbulb, Search, FileText, Code, Calculator, MessageSquare } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ChatInput } from \"@/components/chat-input\";\nimport { ConversationCard } from \"@/components/conversation-card\";\nimport { useConversations, useCreateConversation } from \"@/hooks/use-conversations\";\nimport { useCollections } from \"@/hooks/use-collections\";\nimport { useArtifacts } from \"@/hooks/use-artifacts\";\nimport { Analytics } from \"@/lib/analytics\";\nimport { usePageView, useTrackAction } from \"@/hooks/usePostHog\";\nimport { AdminTestButton } from \"@/components/admin/AdminTestButton\";\nimport { TwitterStyleLayout } from \"@/components/layout/TwitterStyleLayout\";\n\nexport default function Chat() {\n  const [location, setLocation] = useLocation();\n  const [selectedCollectionId, setSelectedCollectionId] = useState<number | undefined>();\n  const [inputValue, setInputValue] = useState(\"\");\n  \n  // Check for collectionId in URL parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const collectionIdParam = urlParams.get('collectionId');\n    if (collectionIdParam) {\n      setSelectedCollectionId(parseInt(collectionIdParam));\n    }\n  }, [location]);\n  const { data: conversations = [] } = useConversations();\n  const { data: collections = [] } = useCollections();\n  const { data: artifacts = [] } = useArtifacts();\n  const createConversation = useCreateConversation();\n  const trackAction = useTrackAction();\n\n  // Track page view using PostHog React SDK\n  usePageView('chat');\n\n  // Also track using the Analytics service for compatibility\n  useEffect(() => {\n    Analytics.trackPageView('chat');\n  }, []);\n\n  const selectedCollection = collections.find(c => c.id === selectedCollectionId);\n  const recentConversations = conversations.slice(0, 6);\n\n  const handleCollectionSelect = (collectionId: number | undefined) => {\n    setSelectedCollectionId(collectionId);\n    if (collectionId) {\n      const collection = collections.find(c => c.id === collectionId);\n      if (collection) {\n        Analytics.trackCollectionSelected(collectionId, collection.name);\n      }\n    }\n  };\n\n  const handleSendMessage = async (message: string, attachments?: File[]) => {\n    const conversationType = selectedCollectionId ? \"collection\" : \"independent\";\n    \n    createConversation.mutate(\n      {\n        message,\n        type: conversationType,\n        collectionId: selectedCollectionId,\n        attachments,\n      },\n      {\n        onSuccess: (data) => {\n          setLocation(`/conversations/${data.conversation.id}`);\n        },\n      }\n    );\n  };\n\n  const handleNewChat = () => {\n    setSelectedCollectionId(undefined);\n  };\n\n  const handleQuickAction = (action: string) => {\n    const prompts = {\n      \"Get Ideas\": \"I need some creative ideas and suggestions. Can you help me brainstorm?\",\n      \"Search Knowledge\": \"Help me search and find information from my knowledge base.\",\n      \"Analyze Document\": \"I'd like to analyze and get insights from my documents.\"\n    };\n    \n    // Track with both Analytics service and PostHog hooks\n    Analytics.trackQuickAction(action);\n    trackAction('quick_action_clicked', { action });\n    \n    const prompt = prompts[action as keyof typeof prompts];\n    if (prompt) {\n      handleSendMessage(prompt);\n    }\n  };\n\n  const quickActions = [\n    { label: \"Get Ideas\", icon: Lightbulb, color: \"text-yellow-600\" },\n    { label: \"Search Knowledge\", icon: Search, color: \"text-blue-600\" },\n    { label: \"Analyze Document\", icon: FileText, color: \"text-green-600\" }\n  ];\n\n  // Dynamic time-based copy that changes throughout the day\n  const getTimeBasedContent = () => {\n    const hour = new Date().getHours();\n    \n    const timeBasedCopy = {\n      // Early Morning (5-7 AM)\n      earlyMorning: {\n        headers: [\n          \"☀️ Rise and learn with me?\",\n          \"🌅 Early bird learning session?\",\n          \"⏰ Morning mind, ready to expand?\",\n          \"🌤️ Dawn of new knowledge?\",\n          \"🐦 Tweet me your questions!\",\n          \"☕ Fresh mind, fresh ideas?\"\n        ],\n        descriptions: [\n          \"Your brain is at its sharpest - let's tackle something challenging\",\n          \"Perfect time for deep learning and complex topics\",\n          \"Start your day with knowledge that matters\",\n          \"Early hours, endless possibilities\",\n          \"The world is quiet, your mind is clear - let's learn\",\n          \"Morning clarity meets infinite curiosity\"\n        ]\n      },\n      // Morning (8-11 AM)\n      morning: {\n        headers: [\n          \"☕ Coffee and SnappyLearn time?\",\n          \"🌅 Morning mindset activated!\",\n          \"⚡ Let's energize your brain!\",\n          \"🎯 Focus mode: ON. What's first?\",\n          \"🌟 Start strong, learn stronger!\",\n          \"🚀 Ready to launch into learning?\"\n        ],\n        descriptions: [\n          \"Peak productivity hours - let's make them count\",\n          \"Your mind is fresh and ready for anything\",\n          \"Time to turn curiosity into knowledge\",\n          \"Morning energy meets learning power\",\n          \"Let's build something amazing together\",\n          \"Fresh start, fresh questions, fresh insights\"\n        ]\n      },\n      // Midday (12-2 PM)\n      midday: {\n        headers: [\n          \"🍽️ Lunch break learning?\",\n          \"☀️ Midday knowledge boost!\",\n          \"⚡ Recharge with some wisdom?\",\n          \"🎪 Lunch and learn circus!\",\n          \"🌮 Feed your mind too?\",\n          \"📚 Midday mental snack?\"\n        ],\n        descriptions: [\n          \"Perfect time for a quick knowledge bite\",\n          \"Fuel your brain while you fuel your body\",\n          \"Turn break time into breakthrough time\",\n          \"Quick questions, powerful answers\",\n          \"Digest new ideas with your lunch\",\n          \"Midday motivation coming right up\"\n        ]\n      },\n      // Afternoon (3-5 PM)\n      afternoon: {\n        headers: [\n          \"🌤️ Afternoon inspiration needed?\",\n          \"⚡ Beat the afternoon slump!\",\n          \"🎨 Creative afternoon vibes?\",\n          \"🌿 Refresh your perspective?\",\n          \"💡 Bright ideas for bright minds?\",\n          \"🔥 Ignite your curiosity?\"\n        ],\n        descriptions: [\n          \"Let's turn that afternoon lull into learning fuel\",\n          \"Perfect time for creative problem-solving\",\n          \"Shake off the sluggishness with new knowledge\",\n          \"Afternoon adventures in learning await\",\n          \"Reboot your brain with fresh insights\",\n          \"Transform tired thoughts into brilliant ideas\"\n        ]\n      },\n      // Evening (6-8 PM)\n      evening: {\n        headers: [\n          \"🌆 Evening wind-down wisdom?\",\n          \"🌙 Twilight thoughts and questions?\",\n          \"✨ End the day with enlightenment?\",\n          \"🌃 Golden hour, golden knowledge?\",\n          \"🍷 Unwind with understanding?\",\n          \"🌸 Peaceful learning moments?\"\n        ],\n        descriptions: [\n          \"Wind down with knowledge that enriches\",\n          \"Gentle learning for a gentle evening\",\n          \"End your day on a high note\",\n          \"Evening reflection meets forward thinking\",\n          \"Calm questions, thoughtful answers\",\n          \"Let's explore ideas as the day settles\"\n        ]\n      },\n      // Night (9-11 PM)\n      night: {\n        headers: [\n          \"🌙 Night owl session?\",\n          \"✨ Late-night learnings?\",\n          \"🦉 Midnight mind mysteries?\",\n          \"🌟 Starlight study time?\",\n          \"💭 Deep thoughts, deeper answers?\",\n          \"🌌 Explore the universe of ideas?\"\n        ],\n        descriptions: [\n          \"When the world sleeps, we think deeper\",\n          \"Night time is the right time for big questions\",\n          \"Dark sky, bright minds at work\",\n          \"Late night curiosity deserves great answers\",\n          \"The quiet hours hold the loudest insights\",\n          \"Nocturnal knowledge seekers welcome\"\n        ]\n      },\n      // Late Night (12-4 AM)\n      lateNight: {\n        headers: [\n          \"🌚 Burning the midnight oil?\",\n          \"🦉 Extreme night owl mode?\",\n          \"💫 3 AM epiphanies incoming?\",\n          \"🌌 When the world sleeps, we learn?\",\n          \"⭐ Insomniac insights?\",\n          \"🔮 Midnight magic questions?\"\n        ],\n        descriptions: [\n          \"The dedication is real - let's make it count\",\n          \"Deep night, deeper thoughts, deepest learning\",\n          \"Your commitment to knowledge is inspiring\",\n          \"When everyone sleeps, the best ideas wake up\",\n          \"Late night learning hits different\",\n          \"The darkness holds the brightest insights\"\n        ]\n      }\n    };\n\n    // Determine which time period we're in\n    if (hour >= 5 && hour < 8) return timeBasedCopy.earlyMorning;\n    if (hour >= 8 && hour < 12) return timeBasedCopy.morning;\n    if (hour >= 12 && hour < 15) return timeBasedCopy.midday;\n    if (hour >= 15 && hour < 18) return timeBasedCopy.afternoon;\n    if (hour >= 18 && hour < 21) return timeBasedCopy.evening;\n    if (hour >= 21 && hour < 24) return timeBasedCopy.night;\n    return timeBasedCopy.lateNight; // 12-4 AM\n  };\n\n  // Get random header and description for current time\n  const currentTimeCopy = getTimeBasedContent();\n  const randomHeaderIndex = Math.floor(Math.random() * currentTimeCopy.headers.length);\n  const randomDescIndex = Math.floor(Math.random() * currentTimeCopy.descriptions.length);\n  \n  const dynamicHeader = currentTimeCopy.headers[randomHeaderIndex];\n  const dynamicDescription = currentTimeCopy.descriptions[randomDescIndex];\n\n  // Example prompts for new chats\n  const examplePrompts = [\n    \"Explain quantum computing in simple terms\",\n    \"Help me write a professional email\",\n    \"What are the latest trends in AI?\", \n    \"Create a study plan for learning Python\",\n    \"Summarize the key points of project management\",\n    \"Give me creative ideas for a birthday party\"\n  ];\n\n  const handlePromptClick = (prompt: string) => {\n    // Set the prompt in the chat input for user to review and edit before sending\n    setInputValue(prompt);\n  };\n\n  // Always show example prompts on the main chat page since this is the starting point\n  const isNewChat = true;\n\n  return (\n    <TwitterStyleLayout>\n      <div className=\"flex flex-col min-h-[80vh]\">\n        \n        {/* Collection Context */}\n        {selectedCollection && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-semibold text-blue-900\">\n                  Chatting with: {selectedCollection.name}\n                </h3>\n                <p className=\"text-blue-700 text-sm\">\n                  Your questions will be answered using documents from this collection\n                </p>\n              </div>\n              <Button variant=\"outline\" onClick={handleNewChat} size=\"sm\">\n                Switch to General Chat\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Main Chat Area */}\n        <div className=\"flex-1 flex flex-col justify-end\">\n          \n          {/* Example Prompts - Only show for new chats */}\n          {isNewChat && (\n            <div className=\"mb-8\">\n              <div className=\"text-center mb-6\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">{dynamicHeader}</h2>\n                <p className=\"text-gray-600\">{dynamicDescription}</p>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n                {examplePrompts.map((prompt, index) => (\n                  <Card \n                    key={index} \n                    className=\"cursor-pointer hover:shadow-md transition-shadow border border-gray-200 hover:border-purple-300\"\n                    onClick={() => handlePromptClick(prompt)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <p className=\"text-sm text-gray-700\">{prompt}</p>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Chat Input - Now at bottom */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-gray-200 p-6\">\n            <ChatInput \n              onSend={handleSendMessage}\n              value={inputValue}\n              onChange={setInputValue}\n              placeholder={\n                selectedCollection \n                  ? `Ask a question about ${selectedCollection.name}...`\n                  : \"Ask me anything...\"\n              }\n            />\n          </div>\n        </div>\n\n        {/* Educational Artifacts */}\n        {artifacts.length > 0 && (\n          <div className=\"mt-12\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Recent Artifacts</h2>\n              <Button \n                variant=\"ghost\" \n                onClick={() => setLocation(\"/artifacts\")}\n                className=\"text-sm\"\n              >\n                View All\n              </Button>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {artifacts.slice(0, 3).map((artifact: any) => (\n                <div key={artifact.id} className=\"bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    {artifact.type === 'code' && <Code className=\"h-4 w-4 text-blue-600\" />}\n                    {artifact.type === 'math' && <Calculator className=\"h-4 w-4 text-green-600\" />}\n                    {artifact.type === 'quiz' && <MessageSquare className=\"h-4 w-4 text-purple-600\" />}\n                    <span className=\"text-sm font-medium text-gray-900\">{artifact.title}</span>\n                  </div>\n                  <p className=\"text-sm text-gray-600 line-clamp-2\">{artifact.description}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </TwitterStyleLayout>\n  );\n}","size_bytes":14384},"client/src/pages/collection-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { File, Plus, MessageSquare, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AddDocumentDropdown } from \"@/components/add-document-dropdown\";\nimport { ChatInput } from \"@/components/chat-input\";\nimport { ConversationCard } from \"@/components/conversation-card\";\nimport { TwitterStyleLayout } from \"@/components/layout/TwitterStyleLayout\";\nimport { useCollection } from \"@/hooks/use-collections\";\nimport { useCreateConversation, useConversations } from \"@/hooks/use-conversations\";\nimport { documentsApi } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ConversationWithPreview } from \"@shared/schema\";\n\nexport default function CollectionDetail() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [selectedCollectionId, setSelectedCollectionId] = useState<number | undefined>();\n\n  const collectionId = parseInt(params.id!);\n  \n  const { data: collection } = useCollection(collectionId);\n  const { data: documents = [] } = useQuery({\n    queryKey: [\"/api/collections\", collectionId, \"documents\"],\n    queryFn: () => documentsApi.getByCollection(collectionId),\n    enabled: !!collectionId,\n  });\n  \n  const { data: conversations = [] } = useConversations();\n  const createConversation = useCreateConversation();\n\n  // Filter conversations to only show those belonging to this specific collection\n  const collectionConversations = conversations.filter(\n    (conv) => conv.collectionId === collectionId\n  );\n\n  const handleSendMessage = async (message: string) => {\n    createConversation.mutate(\n      {\n        message,\n        type: \"collection\",\n        collectionId,\n      },\n      {\n        onSuccess: (data) => {\n          setLocation(`/conversations/${data.conversation.id}`);\n        },\n      }\n    );\n  };\n\n  const handleDeleteDocument = async (docId: number) => {\n    if (confirm(\"Are you sure you want to delete this document?\")) {\n      try {\n        await documentsApi.delete(docId);\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/collections\", collectionId, \"documents\"] \n        });\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/collections\"] \n        });\n        toast({\n          title: \"Success\",\n          description: \"Document deleted successfully\",\n        });\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete document\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleNewChat = () => {\n    setSelectedCollectionId(undefined);\n    setLocation(\"/\");\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  if (!collection) {\n    return (\n      <TwitterStyleLayout>\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Collection not found</h2>\n            <Button onClick={() => setLocation(\"/my-collections\")} variant=\"outline\">\n              Back to Collections\n            </Button>\n          </div>\n        </div>\n      </TwitterStyleLayout>\n    );\n  }\n\n  return (\n    <TwitterStyleLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"mb-4\">\n          <h1 className=\"text-xl font-semibold text-gray-900\">{collection.name}</h1>\n          {collection.description && (\n            <p className=\"text-sm text-gray-600\">{collection.description}</p>\n          )}\n        </div>\n\n        {/* Chat Input */}\n        <div className=\"mb-4\">\n          <ChatInput\n            onSend={handleSendMessage}\n            disabled={createConversation.isPending}\n            placeholder={`Start a conversation in this workspace`}\n          />\n        </div>\n\n        {/* Tabs */}\n        <Tabs defaultValue=\"conversations\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 bg-gray-100\">\n            <TabsTrigger value=\"conversations\" className=\"data-[state=active]:bg-white\">\n              Conversations\n            </TabsTrigger>\n            <TabsTrigger value=\"documents\" className=\"data-[state=active]:bg-white\">\n              Documents\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"conversations\" className=\"mt-6\">\n            {collectionConversations.length > 0 ? (\n              <div className=\"space-y-6\">\n                {collectionConversations.map((conversation) => (\n                  <ConversationCard key={conversation.id} conversation={conversation} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <div className=\"w-16 h-16 rounded-full bg-gray-100 flex items-center justify-center mx-auto mb-4\">\n                  <MessageSquare className=\"w-8 h-8 text-gray-400\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Welcome</h3>\n                <p className=\"text-sm text-gray-500 max-w-md mx-auto\">\n                  Start by attaching files to your workspace. They will be used in all chats in this workspace.\n                </p>\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"documents\" className=\"mt-6 space-y-0\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Documents</h3>\n              <AddDocumentDropdown \n                collectionId={collectionId} \n                onComplete={() => {}}\n              />\n            </div>\n\n            {documents.length > 0 ? (\n              <div className=\"space-y-3\">\n                {documents.map((document) => (\n                  <div\n                    key={document.id}\n                    className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <File className=\"w-5 h-5 text-gray-500\" />\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {document.name}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {formatFileSize(document.size)} • {new Date(document.uploadedAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      onClick={() => handleDeleteDocument(document.id)}\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <div className=\"w-16 h-16 rounded-full bg-gray-100 flex items-center justify-center mx-auto mb-4\">\n                  <File className=\"w-8 h-8 text-gray-400\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Welcome</h3>\n                <p className=\"text-sm text-gray-500 max-w-md mx-auto\">\n                  Start by attaching files to your workspace. They will be used in all chats in this workspace.\n                </p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </TwitterStyleLayout>\n  );\n}","size_bytes":8209},"client/src/pages/collections.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Plus, Search, Grid3X3, List, File, Folder, Share } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { CollectionCard } from \"@/components/collection-card\";\nimport { CreateCollectionModal } from \"@/components/create-collection-modal\";\nimport { TwitterStyleLayout } from \"@/components/layout/TwitterStyleLayout\";\nimport { useCollections } from \"@/hooks/use-collections\";\nimport { useCreateConversation } from \"@/hooks/use-conversations\";\n\nexport default function Collections() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"recent\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [selectedCollectionId, setSelectedCollectionId] = useState<number | undefined>();\n  const { data: collections = [] } = useCollections();\n  const createConversation = useCreateConversation();\n\n  // Filter and sort collections\n  const filteredCollections = collections\n    .filter(collection =>\n      collection.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (collection.description?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false)\n    )\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"name\":\n          return a.name.localeCompare(b.name);\n        case \"documents\":\n          return b.documentCount - a.documentCount;\n        case \"recent\":\n        default:\n          return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n      }\n    });\n\n  const handleStartChat = (collectionId: number) => {\n    createConversation.mutate(\n      {\n        message: \"Hello! I'd like to explore this collection.\",\n        type: \"collection\",\n        collectionId,\n      },\n      {\n        onSuccess: (data) => {\n          setLocation(`/conversations/${data.conversation.id}`);\n        },\n      }\n    );\n  };\n\n  const handleNewChat = () => {\n    setSelectedCollectionId(undefined);\n    setLocation(\"/\");\n  };\n\n  return (\n    <TwitterStyleLayout>\n      <div>\n        {/* Header */}\n        <div className=\"bg-white border-b border-gray-200 px-6 py-4 mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-xl font-semibold text-gray-900\">Collections</h1>\n              <p className=\"text-sm text-gray-600\">Organize your knowledge into collections</p>\n            </div>\n            <Button\n              onClick={() => setShowCreateModal(true)}\n              className=\"bg-primary hover:bg-primary/90 text-white\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Collection\n            </Button>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"px-6\">\n          {/* Search and Filters */}\n          <div className=\"mb-6 flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative max-w-md\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search collections...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-80\"\n                />\n              </div>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"recent\">Recently Updated</SelectItem>\n                  <SelectItem value=\"name\">Name (A-Z)</SelectItem>\n                  <SelectItem value=\"documents\">Most Documents</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* View Toggle */}\n            <div className=\"flex items-center space-x-2 bg-gray-100 rounded-lg p-1\">\n              <Button\n                variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"grid\")}\n                className={`${\n                  viewMode === \"grid\" \n                    ? \"bg-white shadow-sm\" \n                    : \"text-gray-600 hover:text-gray-900\"\n                }`}\n              >\n                <Grid3X3 className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n                className={`${\n                  viewMode === \"list\" \n                    ? \"bg-white shadow-sm\" \n                    : \"text-gray-600 hover:text-gray-900\"\n                }`}\n              >\n                <List className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Collections Display */}\n          {filteredCollections.length > 0 ? (\n            viewMode === \"grid\" ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {filteredCollections.map((collection) => (\n                  <CollectionCard\n                    key={collection.id}\n                    collection={collection}\n                    onStartChat={handleStartChat}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredCollections.map((collection) => (\n                  <Card key={collection.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-12 h-12 rounded-lg bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center\">\n                            <Folder className=\"w-6 h-6 text-white\" />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"text-lg font-semibold text-gray-900 truncate\">\n                              {collection.name}\n                            </h3>\n                            <p className=\"text-sm text-gray-600 line-clamp-2\">\n                              {collection.description || \"No description provided\"}\n                            </p>\n                            <div className=\"flex items-center space-x-4 mt-2 text-xs text-gray-500\">\n                              <span className=\"flex items-center\">\n                                <File className=\"w-3 h-3 mr-1\" />\n                                {collection.documentCount} documents\n                              </span>\n                              <span>\n                                Updated {new Date(collection.updatedAt).toLocaleDateString()}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setLocation(`/collections/${collection.id}`)}\n                          >\n                            View\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              // TODO: Implement share functionality\n                              console.log(\"Share collection:\", collection.id);\n                            }}\n                          >\n                            <Share className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Search className=\"w-12 h-12 text-gray-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {searchTerm ? \"No collections found\" : \"No collections yet\"}\n              </h3>\n              <p className=\"text-gray-600 mb-6\">\n                {searchTerm \n                  ? \"Try adjusting your search terms\" \n                  : \"Create your first collection to start organizing your knowledge\"\n                }\n              </p>\n              {!searchTerm && (\n                <Button\n                  onClick={() => setShowCreateModal(true)}\n                  className=\"bg-primary hover:bg-primary/90 text-white\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Collection\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n        \n        <CreateCollectionModal \n          open={showCreateModal} \n          onOpenChange={setShowCreateModal} \n        />\n      </div>\n    </TwitterStyleLayout>\n  );\n}","size_bytes":9705},"client/src/pages/community.tsx":{"content":"import { useState } from \"react\";\nimport { Heart, Share, Bookmark, MessageCircle } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useCollections } from \"@/hooks/use-collections\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { UnifiedLayout } from \"@/components/layout/UnifiedLayout\";\n\nexport default function Community() {\n  const { user } = useAuth();\n  const { data: collections = [] } = useCollections();\n  const [activeTab, setActiveTab] = useState(\"Following\");\n\n  // Filter public collections for community feed\n  const publicCollections = collections.filter(c => c.privateStatusTypeId === \"public\");\n  const myCollections = collections.filter(c => c.userId === user?.id);\n\n  // Mock data for community features - in real app, this would come from API\n  const communityHighlights = [\n    {\n      id: 1,\n      user: { name: \"Kei Watanabe\", avatar: \"\", verified: true },\n      text: \"ChatGPT processes multiple result types - webpage - webpage_extended - grouped_webpages - image_inline\",\n      collection: \"AI Research Notes\",\n      timestamp: \"2 hours ago\",\n      likes: 42,\n      comments: 8,\n      bookmarks: 15\n    },\n    {\n      id: 2,\n      user: { name: \"Alex Johnson\", avatar: \"\", verified: false },\n      text: \"Instead of manually typing out notes while watching the video (painful), use a tool like Glasp or YouTube's built-in transcript feature to extract the full transcript in seconds.\",\n      collection: \"Productivity Hacks\",\n      timestamp: \"4 hours ago\",\n      likes: 28,\n      comments: 5,\n      bookmarks: 9\n    }\n  ];\n\n  return (\n    <UnifiedLayout showRightSidebar={true}>\n      {/* Feed Tabs */}\n      <div className=\"bg-white rounded-lg border border-gray-200\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8 px-6\" aria-label=\"Tabs\">\n            {[\"Following\", \"Trending\", \"Recent\"].map((tab) => (\n              <button\n                key={tab}\n                onClick={() => setActiveTab(tab)}\n                className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === tab\n                    ? \"border-blue-500 text-blue-600\"\n                    : \"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\"\n                }`}\n              >\n                {tab}\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        {/* Community Highlights */}\n        <div className=\"p-6 space-y-6\">\n          {communityHighlights.map((highlight) => (\n            <div key={highlight.id} className=\"border-b border-gray-100 pb-6 last:border-b-0 last:pb-0\">\n              {/* User Info */}\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarImage src={highlight.user.avatar} />\n                  <AvatarFallback>\n                    {highlight.user.name.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"font-semibold text-gray-900\">{highlight.user.name}</span>\n                    {highlight.user.verified && (\n                      <span className=\"text-blue-500 text-sm\">✓</span>\n                    )}\n                    <span className=\"text-gray-500\">•</span>\n                    <span className=\"text-sm text-gray-500\">{highlight.timestamp}</span>\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    from <span className=\"font-medium\">{highlight.collection}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Highlight Content */}\n              <div className=\"mb-4\">\n                <p className=\"text-gray-900 leading-relaxed\">{highlight.text}</p>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex items-center space-x-6 text-gray-500\">\n                <button className=\"flex items-center space-x-2 hover:text-red-500 transition-colors\">\n                  <Heart className=\"h-4 w-4\" />\n                  <span className=\"text-sm\">{highlight.likes}</span>\n                </button>\n                <button className=\"flex items-center space-x-2 hover:text-blue-500 transition-colors\">\n                  <MessageCircle className=\"h-4 w-4\" />\n                  <span className=\"text-sm\">{highlight.comments}</span>\n                </button>\n                <button className=\"flex items-center space-x-2 hover:text-yellow-500 transition-colors\">\n                  <Bookmark className=\"h-4 w-4\" />\n                  <span className=\"text-sm\">{highlight.bookmarks}</span>\n                </button>\n                <button className=\"flex items-center space-x-2 hover:text-green-500 transition-colors\">\n                  <Share className=\"h-4 w-4\" />\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </UnifiedLayout>\n  );\n}","size_bytes":5104},"client/src/pages/conversation.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { ArrowLeft, Share, Bookmark, MoreVertical, ChevronLeft, X, Code } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { ChatInput } from \"@/components/chat-input\";\nimport { MessageComponent } from \"@/components/message\";\nimport { ChatLoading } from \"@/components/chat-loading\";\nimport { ArtifactViewer } from \"@/components/artifact-viewer\";\nimport { TwitterStyleLayout } from \"@/components/layout/TwitterStyleLayout\";\nimport { useConversation } from \"@/hooks/use-conversations\";\nimport { useMessages, useSendMessage } from \"@/hooks/use-messages\";\nimport { useCollection } from \"@/hooks/use-collections\";\n\nexport default function Conversation() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const conversationId = parseInt(params.id!);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  \n  // Artifact state management\n  const [isArtifactOpen, setIsArtifactOpen] = useState(false);\n  const [currentArtifact, setCurrentArtifact] = useState<{html: string, title: string} | null>(null);\n  const [showArtifactToggle, setShowArtifactToggle] = useState(false);\n\n  const { data: conversation } = useConversation(conversationId);\n  const { data: messages = [] } = useMessages(conversationId);\n  const { data: collection } = useCollection(conversation?.collectionId || 0);\n  const sendMessage = useSendMessage();\n\n  const handleSendMessage = (content: string) => {\n    sendMessage.mutate({ conversationId, content });\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const handleViewArtifact = (artifactHtml: string, title: string) => {\n    setCurrentArtifact({ html: artifactHtml, title });\n    setShowArtifactToggle(true);\n    setIsArtifactOpen(true);\n  };\n\n  const openArtifact = () => {\n    if (currentArtifact) {\n      setIsArtifactOpen(true);\n    }\n  };\n\n  const closeArtifact = () => {\n    setIsArtifactOpen(false);\n    setCurrentArtifact(null);\n    setShowArtifactToggle(false);\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Check if any messages contain artifacts to show toggle\n  useEffect(() => {\n    const hasArtifacts = messages.some(message => \n      message.role === 'assistant' && message.content.includes('[ARTIFACT_START]')\n    );\n    if (hasArtifacts && !showArtifactToggle) {\n      setShowArtifactToggle(true);\n    }\n  }, [messages, showArtifactToggle]);\n\n  if (!conversation) {\n    return (\n      <TwitterStyleLayout>\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Conversation not found</h2>\n            <Button onClick={() => setLocation(\"/\")} variant=\"outline\">\n              Back to Dashboard\n            </Button>\n          </div>\n        </div>\n      </TwitterStyleLayout>\n    );\n  }\n\n  const isCollectionBased = conversation.type === \"collection\";\n\n  return (\n    <TwitterStyleLayout>\n      <div className={`flex flex-col min-h-screen ${isArtifactOpen ? 'md:mr-[50%]' : ''} transition-all duration-300`}>\n        {/* Header */}\n        <header className=\"border-b border-gray-200 px-6 py-4 flex-shrink-0\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => setLocation(\"/chat\")}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n              <div>\n                <h1 className=\"text-lg font-semibold text-gray-900\">{conversation.title}</h1>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <div className={`w-2 h-2 rounded-full ${\n                    isCollectionBased ? \"bg-blue-500\" : \"bg-gray-500\"\n                  }`} />\n                  <span className=\"text-sm text-gray-500\">\n                    {isCollectionBased && collection \n                      ? `Collection: ${collection.name}`\n                      : \"Independent Conversation\"\n                    }\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-gray-600\">\n                <Share className=\"w-4 h-4\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-gray-600\">\n                <Bookmark className=\"w-4 h-4\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-gray-600\">\n                <MoreVertical className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Messages Area */}\n        <ScrollArea className=\"flex-1 px-6 py-6\">\n          <div className=\"space-y-6\">\n            {messages.map((message) => (\n              <MessageComponent \n                key={message.id} \n                message={message} \n                onViewArtifact={handleViewArtifact}\n              />\n            ))}\n            {sendMessage.isPending && <ChatLoading />}\n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n\n        {/* Message Input */}\n        <div className=\"border-t border-gray-200 px-6 py-4 flex-shrink-0\">\n          <ChatInput\n            onSend={handleSendMessage}\n            disabled={sendMessage.isPending}\n            placeholder=\"Continue the conversation...\"\n          />\n        </div>\n      </div>\n\n      {/* Artifact Toggle Button */}\n      {showArtifactToggle && !isArtifactOpen && (\n        <Button\n          onClick={openArtifact}\n          className=\"fixed right-4 top-1/2 transform -translate-y-1/2 bg-blue-500 text-white p-2 rounded-l-lg shadow-lg hover:bg-blue-600 z-40 transition-all duration-300 hover:transform hover:-translate-x-1\"\n          size=\"sm\"\n        >\n          <ChevronLeft className=\"w-4 h-4\" />\n        </Button>\n      )}\n\n      {/* Artifact Viewer */}\n      {currentArtifact && (\n        <ArtifactViewer\n          artifact={currentArtifact}\n          onClose={closeArtifact}\n          isOpen={isArtifactOpen}\n        />\n      )}\n    </TwitterStyleLayout>\n  );\n}\n","size_bytes":6547},"client/src/pages/conversations.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Plus, Search, Grid3X3, List, MessageSquare, Clock, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConversationCard } from \"@/components/conversation-card\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { useConversations } from \"@/hooks/use-conversations\";\nimport { useCollections } from \"@/hooks/use-collections\";\n\nexport default function Conversations() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"recent\");\n  const [filterBy, setFilterBy] = useState(\"all\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [selectedCollectionId, setSelectedCollectionId] = useState<number | undefined>();\n  \n  const { data: conversations = [] } = useConversations();\n  const { data: collections = [] } = useCollections();\n\n  // Filter and sort conversations\n  const filteredConversations = conversations\n    .filter(conversation => {\n      const matchesSearch = conversation.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           conversation.preview.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      if (filterBy === \"all\") return matchesSearch;\n      if (filterBy === \"independent\") return matchesSearch && conversation.type === \"independent\";\n      if (filterBy === \"collection\") return matchesSearch && conversation.type === \"collection\";\n      \n      return matchesSearch;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"title\":\n          return a.title.localeCompare(b.title);\n        case \"messages\":\n          return b.messageCount - a.messageCount;\n        case \"recent\":\n        default:\n          return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n      }\n    });\n\n  const handleNewChat = () => {\n    setSelectedCollectionId(undefined);\n    setLocation(\"/\");\n  };\n\n  const handleCreateConversation = () => {\n    // Navigate to dashboard for new chat, same as sidebar New Chat button\n    setLocation(\"/\");\n  };\n\n  const getCollectionName = (collectionId?: number) => {\n    if (!collectionId) return null;\n    const collection = collections.find(c => c.id === collectionId);\n    return collection?.name;\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"Unknown date\";\n    \n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return \"Invalid date\";\n    \n    const now = new Date();\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n    \n    if (diffInHours < 24) {\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    } else if (diffInHours < 168) { // 7 days\n      return date.toLocaleDateString([], { weekday: 'short' });\n    } else {\n      return date.toLocaleDateString([], { month: 'short', day: 'numeric' });\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar \n        selectedCollectionId={selectedCollectionId}\n        onSelectCollection={setSelectedCollectionId}\n        onNewChat={handleNewChat}\n      />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden bg-gray-50\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-gray-200 px-6 py-4 flex-shrink-0\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-xl font-semibold text-gray-900\">Conversations</h1>\n              <p className=\"text-sm text-gray-600\">All your AI conversations in one place</p>\n            </div>\n            <Button\n              onClick={handleCreateConversation}\n              className=\"bg-primary hover:bg-primary/90 text-white\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Conversation\n            </Button>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <div className=\"flex-1 overflow-auto px-6 py-6\">\n          {/* Search and Filters */}\n          <div className=\"mb-6 flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative max-w-md\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search conversations...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-80\"\n                />\n              </div>\n              <Select value={filterBy} onValueChange={setFilterBy}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"independent\">Independent</SelectItem>\n                  <SelectItem value=\"collection\">Collection-based</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"recent\">Recently Updated</SelectItem>\n                  <SelectItem value=\"title\">Title (A-Z)</SelectItem>\n                  <SelectItem value=\"messages\">Most Messages</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* View Toggle */}\n            <div className=\"flex items-center space-x-2 bg-gray-100 rounded-lg p-1\">\n              <Button\n                variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"grid\")}\n                className={`${\n                  viewMode === \"grid\" \n                    ? \"bg-white shadow-sm\" \n                    : \"text-gray-600 hover:text-gray-900\"\n                }`}\n              >\n                <Grid3X3 className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n                className={`${\n                  viewMode === \"list\" \n                    ? \"bg-white shadow-sm\" \n                    : \"text-gray-600 hover:text-gray-900\"\n                }`}\n              >\n                <List className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Conversations Display */}\n          {filteredConversations.length > 0 ? (\n            viewMode === \"grid\" ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredConversations.map((conversation) => (\n                  <ConversationCard key={conversation.id} conversation={conversation} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredConversations.map((conversation) => (\n                  <Card key={conversation.id} className=\"hover:shadow-md transition-shadow cursor-pointer\"\n                        onClick={() => setLocation(`/conversations/${conversation.id}`)}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4 flex-1 min-w-0\">\n                          <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-green-500 to-teal-600 flex items-center justify-center flex-shrink-0\">\n                            <MessageSquare className=\"w-5 h-5 text-white\" />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <h3 className=\"text-sm font-semibold text-gray-900 truncate\">\n                                {conversation.title}\n                              </h3>\n                              <Badge \n                                variant={conversation.type === \"collection\" ? \"default\" : \"secondary\"}\n                                className=\"text-xs\"\n                              >\n                                {conversation.type === \"collection\" ? \"Collection\" : \"Independent\"}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-gray-600 line-clamp-1 mb-2\">\n                              {conversation.preview}\n                            </p>\n                            <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                              <span className=\"flex items-center\">\n                                <MessageSquare className=\"w-3 h-3 mr-1\" />\n                                {conversation.messageCount} messages\n                              </span>\n                              <span className=\"flex items-center\">\n                                <Clock className=\"w-3 h-3 mr-1\" />\n                                {formatDate(conversation.updatedAt)}\n                              </span>\n                              {conversation.collectionId && (\n                                <span className=\"text-blue-600\">\n                                  {getCollectionName(conversation.collectionId)}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setLocation(`/conversations/${conversation.id}`);\n                            }}\n                          >\n                            Open\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <MessageSquare className=\"w-12 h-12 text-gray-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {searchTerm ? \"No conversations found\" : \"No conversations yet\"}\n              </h3>\n              <p className=\"text-gray-600 mb-6\">\n                {searchTerm \n                  ? \"Try adjusting your search terms or filters\" \n                  : \"Start your first conversation to begin organizing your knowledge\"\n                }\n              </p>\n              {!searchTerm && (\n                <Button\n                  onClick={handleCreateConversation}\n                  className=\"bg-primary hover:bg-primary/90 text-white\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Start Conversation\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":11808},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Lightbulb, Search, FileText, Code, Calculator, MessageSquare } from \"lucide-react\";\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { ChatInput } from \"@/components/chat-input\";\nimport { ConversationCard } from \"@/components/conversation-card\";\nimport { useConversations, useCreateConversation } from \"@/hooks/use-conversations\";\nimport { useCollections } from \"@/hooks/use-collections\";\nimport { useArtifacts } from \"@/hooks/use-artifacts\";\nimport { Analytics } from \"@/lib/analytics\";\nimport { usePageView, useTrackAction } from \"@/hooks/usePostHog\";\nimport { AdminTestButton } from \"@/components/admin/AdminTestButton\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const [selectedCollectionId, setSelectedCollectionId] = useState<number | undefined>();\n  const { data: conversations = [] } = useConversations();\n  const { data: collections = [] } = useCollections();\n  const { data: artifacts = [] } = useArtifacts();\n  const createConversation = useCreateConversation();\n  const trackAction = useTrackAction();\n\n  // Track page view using PostHog React SDK\n  usePageView('dashboard');\n\n  // Also track using the Analytics service for compatibility\n  useEffect(() => {\n    Analytics.trackPageView('dashboard');\n  }, []);\n\n  const selectedCollection = collections.find(c => c.id === selectedCollectionId);\n  const recentConversations = conversations.slice(0, 6);\n\n  const handleCollectionSelect = (collectionId: number | undefined) => {\n    setSelectedCollectionId(collectionId);\n    if (collectionId) {\n      const collection = collections.find(c => c.id === collectionId);\n      if (collection) {\n        Analytics.trackCollectionSelected(collectionId, collection.name);\n      }\n    }\n  };\n\n  const handleSendMessage = async (message: string, attachments?: File[]) => {\n    const conversationType = selectedCollectionId ? \"collection\" : \"independent\";\n    \n    createConversation.mutate(\n      {\n        message,\n        type: conversationType,\n        collectionId: selectedCollectionId,\n        attachments,\n      },\n      {\n        onSuccess: (data) => {\n          setLocation(`/conversations/${data.conversation.id}`);\n        },\n      }\n    );\n  };\n\n  const handleNewChat = () => {\n    setSelectedCollectionId(undefined);\n  };\n\n  const handleQuickAction = (action: string) => {\n    const prompts = {\n      \"Get Ideas\": \"I need some creative ideas and suggestions. Can you help me brainstorm?\",\n      \"Search Knowledge\": \"Help me search and find information from my knowledge base.\",\n      \"Analyze Document\": \"I'd like to analyze and get insights from my documents.\"\n    };\n    \n    // Track with both Analytics service and PostHog hooks\n    Analytics.trackQuickAction(action);\n    trackAction('quick_action_clicked', {\n      action,\n      location: 'dashboard'\n    });\n    \n    if (prompts[action as keyof typeof prompts]) {\n      handleSendMessage(prompts[action as keyof typeof prompts]);\n    }\n  };\n\n  const quickActions = [\n    { icon: Lightbulb, label: \"Get Ideas\", color: \"text-yellow-500\", action: \"Get Ideas\" },\n    { icon: Search, label: \"Search Knowledge\", color: \"text-blue-500\", action: \"Search Knowledge\" },\n    { icon: FileText, label: \"Analyze Document\", color: \"text-green-500\", action: \"Analyze Document\" },\n  ];\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar \n        selectedCollectionId={selectedCollectionId}\n        onSelectCollection={handleCollectionSelect}\n        onNewChat={handleNewChat}\n      />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"max-w-4xl mx-auto w-full p-6 min-h-full\">\n          \n          {/* Context Indicator */}\n          {selectedCollection && (\n            <div className=\"mb-6\">\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 bg-blue-500 rounded\" />\n                  <span className=\"text-sm font-medium text-blue-900\">\n                    Chatting with collection:\n                  </span>\n                  <span className=\"text-sm text-blue-700\">{selectedCollection.name}</span>\n                  <Button\n                    onClick={() => setSelectedCollectionId(undefined)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"ml-auto h-6 w-6 p-0 text-blue-400 hover:text-blue-600\"\n                  >\n                    ×\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Welcome/Centered Chat */}\n          <div className=\"flex flex-col items-center space-y-8 py-8\">\n            \n            {/* Welcome Message */}\n            <div className=\"text-center max-w-2xl\">\n              <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-24 h-24 mx-auto mb-6\" />\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-3\">Welcome to SnappyLearn</h1>\n              <p className=\"text-lg text-gray-600 mb-8\">\n                Your AI-powered knowledge companion. Start a conversation or explore your collections.\n              </p>\n              <AdminTestButton />\n            </div>\n\n            {/* Centered Chat Input */}\n            <ChatInput\n              onSend={handleSendMessage}\n              disabled={createConversation.isPending}\n              placeholder={\n                selectedCollection\n                  ? `Ask about ${selectedCollection.name}...`\n                  : \"Ask me anything or select a collection for context-specific answers...\"\n              }\n            />\n\n            {/* Quick Actions */}\n            <div className=\"flex flex-wrap gap-3 justify-center\">\n              {quickActions.map((action, index) => (\n                <Button \n                  key={index} \n                  variant=\"outline\" \n                  className=\"px-4 py-2\"\n                  onClick={() => handleQuickAction(action.action)}\n                  disabled={createConversation.isPending}\n                >\n                  <action.icon className={`w-4 h-4 mr-2 ${action.color}`} />\n                  {action.label}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Recent Conversations Grid */}\n          {recentConversations.length > 0 && (\n            <div className=\"mt-8\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Recent Conversations</h2>\n                <Button \n                  variant=\"ghost\" \n                  onClick={() => setLocation(\"/conversations\")}\n                  className=\"text-primary hover:text-primary/80\"\n                >\n                  View All\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {recentConversations.map((conversation) => (\n                  <ConversationCard key={conversation.id} conversation={conversation} />\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7398},"client/src/pages/discover.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Search, \n  Heart, \n  Eye, \n  Users, \n  FileText,\n  FolderOpen,\n  UserPlus,\n  Grid,\n  List\n} from \"lucide-react\";\nimport { TwitterStyleLayout } from \"@/components/layout/TwitterStyleLayout\";\nimport { UserCard } from \"@/components/user/UserCard\";\n\nexport default function Discover() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"communities\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n\n  const { data: collections = [], isLoading: collectionsLoading } = useQuery({\n    queryKey: ['/api/collections'],\n  });\n\n  const { data: communities = [], isLoading: communitiesLoading } = useQuery({\n    queryKey: ['/api/communities'],\n  });\n\n  const { data: users = [], isLoading: usersLoading } = useQuery({\n    queryKey: ['/api/users/suggested'],\n  });\n  \n  const { data: allUsers = [], isLoading: allUsersLoading } = useQuery({\n    queryKey: ['/api/users'],\n  });\n\n  // Sample community data for demo\n  const sampleCommunities = [\n    {\n      id: 1,\n      name: \"AI Researchers\",\n      description: \"Discussion group for AI researchers and enthusiasts\",\n      memberCount: 2400,\n      postCount: 156,\n      bannerImage: \"/community-banners/ai.jpg\",\n      tags: [\"AI\", \"Research\", \"Machine Learning\"],\n      isJoined: false,\n      creator: { firstName: \"Dr. Sarah\", lastName: \"Chen\", profileImageUrl: \"/avatars/sarah.jpg\" }\n    },\n    {\n      id: 2,\n      name: \"Startup Founders\",\n      description: \"Network of startup founders sharing experiences and advice\",\n      memberCount: 1800,\n      postCount: 342,\n      bannerImage: \"/community-banners/startups.jpg\", \n      tags: [\"Startups\", \"Entrepreneurship\", \"Business\"],\n      isJoined: true,\n      creator: { firstName: \"Mark\", lastName: \"Rodriguez\", profileImageUrl: \"/avatars/mark.jpg\" }\n    },\n    {\n      id: 3,\n      name: \"Design Systems\",\n      description: \"Community for designers working on design systems\",\n      memberCount: 950,\n      postCount: 89,\n      bannerImage: \"/community-banners/design.jpg\",\n      tags: [\"Design\", \"UI/UX\", \"Systems\"],\n      isJoined: false,\n      creator: { firstName: \"Alex\", lastName: \"Thompson\", profileImageUrl: \"/avatars/alex.jpg\" }\n    }\n  ];\n\n  // Sample users data for People\n  const sampleUsers = [\n    {\n      id: \"1\",\n      firstName: \"Emily\",\n      lastName: \"Chen\",\n      profileImageUrl: \"/avatars/emily.jpg\",\n      followerCount: 1200,\n      postCount: 45,\n      isFollowing: false,\n      bio: \"Product designer passionate about accessible interfaces\"\n    },\n    {\n      id: \"2\", \n      firstName: \"Marcus\",\n      lastName: \"Johnson\",\n      profileImageUrl: \"/avatars/marcus.jpg\",\n      followerCount: 850,\n      postCount: 67,\n      isFollowing: false,\n      bio: \"Full-stack developer and open source contributor\"\n    },\n    {\n      id: \"3\",\n      firstName: \"Sophie\",\n      lastName: \"Martinez\",\n      profileImageUrl: \"/avatars/sophie.jpg\",\n      followerCount: 2100,\n      postCount: 123,\n      isFollowing: true,\n      bio: \"Data scientist sharing insights about ML applications\"\n    }\n  ];\n\n  const featuredCollections = [\n    {\n      id: 1,\n      title: \"AI Research Highlights\",\n      description: \"Curated insights from latest AI research papers and breakthroughs\",\n      author: \"Dr. Sarah Chen\",\n      authorAvatar: \"/avatars/sarah.jpg\",\n      tags: [\"AI\", \"Research\", \"Machine Learning\"],\n      stats: { documents: 45, highlights: 128, followers: 2400 },\n      updated: \"2 days ago\",\n      isFollowing: false\n    },\n    {\n      id: 2,\n      title: \"Startup Growth Strategies\", \n      description: \"Real-world strategies and case studies from successful startup founders\",\n      author: \"Mark Rodriguez\",\n      authorAvatar: \"/avatars/mark.jpg\",\n      tags: [\"Startups\", \"Growth\", \"Strategy\"],\n      stats: { documents: 32, highlights: 89, followers: 1800 },\n      updated: \"1 day ago\",\n      isFollowing: true\n    },\n    {\n      id: 3,\n      title: \"Philosophy & Ethics\",\n      description: \"Deep dives into philosophical concepts and ethical frameworks\",\n      author: \"Prof. Elena Vasquez\",\n      authorAvatar: \"/avatars/elena.jpg\", \n      tags: [\"Ethics\", \"Philosophy\", \"Critical Thinking\"],\n      stats: { documents: 67, highlights: 234, followers: 3200 },\n      updated: \"3 days ago\",\n      isFollowing: false\n    },\n    {\n      id: 4,\n      title: \"Design Systems Guide\",\n      description: \"Comprehensive guide to building and maintaining design systems\",\n      author: \"Alex Thompson\",\n      authorAvatar: \"/avatars/alex.jpg\",\n      tags: [\"Design\", \"UI/UX\", \"Systems\"],\n      stats: { documents: 28, highlights: 156, followers: 950 },\n      updated: \"1 week ago\",\n      isFollowing: false\n    }\n  ];\n\n  // Combine collections with sample data for display\n  const allCollections = [\n    ...collections.map(col => ({\n      id: col.id,\n      title: col.name,\n      description: col.description || \"No description available\",\n      author: \"User\",\n      authorAvatar: \"/avatars/default.jpg\",\n      tags: [\"Notebook\"],\n      stats: { documents: 0, highlights: 0, followers: 0 },\n      updated: \"Recently\",\n      isFollowing: false\n    })),\n    ...featuredCollections\n  ];\n\n  const filteredCommunities = sampleCommunities.filter(community =>\n    community.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    community.description.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const filteredCollections = allCollections.filter(collection =>\n    collection.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    collection.description.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  // Combine real users with sample users for display\n  const displayUsers = allUsers.length > 0 ? allUsers : sampleUsers;\n  const filteredUsers = displayUsers.filter((user: any) =>\n    `${user.firstName || ''} ${user.lastName || ''}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (user.bio || user.about || '').toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const renderCommunityCard = (community: any) => (\n    <Card key={community.id} className=\"hover:shadow-md transition-shadow duration-200\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-lg font-semibold line-clamp-1\">\n              {community.name}\n            </CardTitle>\n            <CardDescription className=\"mt-2 line-clamp-2\">\n              {community.description}\n            </CardDescription>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2 mt-3\">\n          <Avatar className=\"h-6 w-6\">\n            <AvatarImage src={community.creator.profileImageUrl} />\n            <AvatarFallback className=\"text-xs\">\n              {community.creator.firstName.charAt(0)}\n            </AvatarFallback>\n          </Avatar>\n          <span className=\"text-sm font-medium text-gray-700\">\n            {community.creator.firstName} {community.creator.lastName}\n          </span>\n        </div>\n\n        <div className=\"flex flex-wrap gap-1 mt-3\">\n          {community.tags.map((tag: string) => (\n            <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n              {tag}\n            </Badge>\n          ))}\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"pt-0\">\n        <div className=\"grid grid-cols-2 gap-4 text-center text-sm text-gray-600 mb-4\">\n          <div>\n            <div className=\"font-semibold text-gray-900\">{community.memberCount}</div>\n            <div className=\"flex items-center justify-center gap-1\">\n              <Users className=\"h-3 w-3\" />\n              Members\n            </div>\n          </div>\n          <div>\n            <div className=\"font-semibold text-gray-900\">{community.postCount}</div>\n            <div className=\"flex items-center justify-center gap-1\">\n              <FileText className=\"h-3 w-3\" />\n              Posts\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center gap-2\">\n            <Button size=\"sm\" variant=\"outline\" onClick={() => {\n              // TODO: Navigate to community page\n              console.log(\"View community:\", community.id);\n            }}>\n              <Eye className=\"h-4 w-4 mr-1\" />\n              View\n            </Button>\n            <Button\n              size=\"sm\"\n              variant={community.isJoined ? \"secondary\" : \"default\"}\n              onClick={() => {\n                // TODO: Implement join/leave community functionality\n                console.log(community.isJoined ? \"Leave community:\" : \"Join community:\", community.id);\n              }}\n            >\n              {community.isJoined ? \"Joined\" : \"Join\"}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <TwitterStyleLayout>\n      <div className=\"max-w-4xl mx-auto p-6\">\n        {/* Header */}\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Discover</h1>\n          <p className=\"text-gray-600\">Find communities, notebooks, and people to follow</p>\n        </div>\n\n        {/* Search Bar */}\n        <div className=\"relative mb-6\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder=\"Search communities, notebooks, or people...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n\n        {/* Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"communities\" className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Communities\n            </TabsTrigger>\n            <TabsTrigger value=\"notebooks\" className=\"flex items-center gap-2\">\n              <FolderOpen className=\"h-4 w-4\" />\n              Notebooks\n            </TabsTrigger>\n            <TabsTrigger value=\"people\" className=\"flex items-center gap-2\">\n              <UserPlus className=\"h-4 w-4\" />\n              People\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Communities Tab */}\n          <TabsContent value=\"communities\" className=\"mt-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-xl font-semibold\">Communities</h2>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"grid\")}\n                >\n                  <Grid className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"list\")}\n                >\n                  <List className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className={viewMode === \"grid\" \n              ? \"grid grid-cols-1 md:grid-cols-2 gap-6\" \n              : \"space-y-4\"\n            }>\n              {filteredCommunities.map(renderCommunityCard)}\n            </div>\n\n            {filteredCommunities.length === 0 && (\n              <div className=\"text-center py-12\">\n                <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50 text-gray-400\" />\n                <h3 className=\"text-lg font-medium mb-2\">No communities found</h3>\n                <p className=\"text-gray-500\">Try adjusting your search terms</p>\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Notebooks Tab */}\n          <TabsContent value=\"notebooks\" className=\"mt-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">Notebooks</h2>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {filteredCollections.map((collection) => (\n                <Card key={collection.id} className=\"hover:shadow-md transition-shadow duration-200\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg font-semibold line-clamp-2\">\n                      {collection.title}\n                    </CardTitle>\n                    <CardDescription className=\"mt-2 line-clamp-2\">\n                      {collection.description}\n                    </CardDescription>\n                    \n                    <div className=\"flex items-center space-x-2 mt-3\">\n                      <Avatar className=\"h-6 w-6\">\n                        <AvatarImage src={collection.authorAvatar} />\n                        <AvatarFallback className=\"text-xs\">\n                          {collection.author.charAt(0)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        {collection.author}\n                      </span>\n                    </div>\n\n                    <div className=\"flex flex-wrap gap-1 mt-3\">\n                      {collection.tags.map((tag) => (\n                        <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </CardHeader>\n\n                  <CardContent className=\"pt-0\">\n                    <div className=\"grid grid-cols-3 gap-4 text-center text-sm text-gray-600 mb-4\">\n                      <div>\n                        <div className=\"font-semibold text-gray-900\">{collection.stats.documents}</div>\n                        <div className=\"flex items-center justify-center gap-1\">\n                          <FileText className=\"h-3 w-3\" />\n                          Documents\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"font-semibold text-gray-900\">{collection.stats.highlights}</div>\n                        <div className=\"flex items-center justify-center gap-1\">\n                          <Heart className=\"h-3 w-3\" />\n                          Highlights\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"font-semibold text-gray-900\">{collection.stats.followers}</div>\n                        <div className=\"flex items-center justify-center gap-1\">\n                          <Users className=\"h-3 w-3\" />\n                          Followers\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center gap-2\">\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => {\n                          // TODO: Navigate to notebook page\n                          console.log(\"View notebook:\", collection.id);\n                        }}>\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          View\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant={collection.isFollowing ? \"secondary\" : \"default\"}\n                          onClick={() => {\n                            // TODO: Implement follow/unfollow notebook functionality\n                            console.log(collection.isFollowing ? \"Unfollow notebook:\" : \"Follow notebook:\", collection.id);\n                          }}\n                        >\n                          {collection.isFollowing ? \"Following\" : \"Follow\"}\n                        </Button>\n                      </div>\n                      <span className=\"text-xs text-gray-500\">\n                        Updated {collection.updated}\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {filteredCollections.length === 0 && (\n              <div className=\"text-center py-12\">\n                <FolderOpen className=\"h-12 w-12 mx-auto mb-4 opacity-50 text-gray-400\" />\n                <h3 className=\"text-lg font-medium mb-2\">No notebooks found</h3>\n                <p className=\"text-gray-500\">Try adjusting your search terms</p>\n              </div>\n            )}\n          </TabsContent>\n\n          {/* People Tab */}\n          <TabsContent value=\"people\" className=\"mt-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">People</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredUsers.map((user: any) => (\n                <UserCard\n                  key={user.id}\n                  user={user}\n                  creatorName={user.createdBy ? \"Admin\" : undefined}\n                  onFollow={(userId) => {\n                    // TODO: Implement follow functionality\n                    console.log(\"Follow user:\", userId);\n                  }}\n                  onUnfollow={(userId) => {\n                    // TODO: Implement unfollow functionality\n                    console.log(\"Unfollow user:\", userId);\n                  }}\n                />\n              ))}\n            </div>\n\n            {filteredUsers.length === 0 && (\n              <div className=\"text-center py-12\">\n                <UserPlus className=\"h-12 w-12 mx-auto mb-4 opacity-50 text-gray-400\" />\n                <h3 className=\"text-lg font-medium mb-2\">No users found</h3>\n                <p className=\"text-gray-500\">Try adjusting your search terms</p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </TwitterStyleLayout>\n  );\n}","size_bytes":18406},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { UnifiedLayout } from \"@/components/layout/UnifiedLayout\";\nimport { CreatePostForm } from \"@/components/posts/CreatePostForm\";\nimport { PostCard } from \"@/components/posts/PostCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { TrendingUp, Users, BookOpen, Sparkles } from \"lucide-react\";\nimport type { PostWithDetails, Topic } from \"@shared/schema\";\n\nexport default function Home() {\n  const [activeTab, setActiveTab] = useState(\"feed\");\n\n  const { data: posts = [], isLoading: postsLoading } = useQuery<PostWithDetails[]>({\n    queryKey: [\"/api/posts\"],\n  });\n\n  const { data: topics = [] } = useQuery<Topic[]>({\n    queryKey: [\"/api/topics\"],\n  });\n\n  const trendingTopics = topics.slice(0, 6);\n\n  const PostSkeleton = () => (\n    <Card className=\"mb-4\">\n      <CardHeader>\n        <div className=\"flex items-center gap-3\">\n          <Skeleton className=\"h-10 w-10 rounded-full\" />\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-32\" />\n            <Skeleton className=\"h-3 w-24\" />\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <Skeleton className=\"h-4 w-full mb-2\" />\n        <Skeleton className=\"h-4 w-3/4 mb-4\" />\n        <div className=\"flex gap-4\">\n          <Skeleton className=\"h-8 w-16\" />\n          <Skeleton className=\"h-8 w-16\" />\n          <Skeleton className=\"h-8 w-16\" />\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <UnifiedLayout>\n      <div className=\"max-w-6xl mx-auto px-4 py-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Main Feed */}\n          <div className=\"lg:col-span-2\">\n            <CreatePostForm />\n            \n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mb-6\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"feed\" className=\"flex items-center gap-2\">\n                  <Sparkles className=\"w-4 h-4\" />\n                  Feed\n                </TabsTrigger>\n                <TabsTrigger value=\"trending\" className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-4 h-4\" />\n                  Trending\n                </TabsTrigger>\n                <TabsTrigger value=\"following\" className=\"flex items-center gap-2\">\n                  <Users className=\"w-4 h-4\" />\n                  Following\n                </TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"feed\" className=\"mt-6\">\n                {postsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <PostSkeleton key={i} />\n                    ))}\n                  </div>\n                ) : posts.length === 0 ? (\n                  <Card className=\"text-center py-12\">\n                    <CardContent>\n                      <BookOpen className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                      <h3 className=\"font-semibold text-lg mb-2\">No posts yet</h3>\n                      <p className=\"text-muted-foreground mb-4\">\n                        Be the first to share something with the community!\n                      </p>\n                      <Button \n                        onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}\n                        className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                      >\n                        Create First Post\n                      </Button>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {posts.map((post) => (\n                      <PostCard key={post.id} post={post} />\n                    ))}\n                  </div>\n                )}\n              </TabsContent>\n              \n              <TabsContent value=\"trending\" className=\"mt-6\">\n                <Card className=\"text-center py-12\">\n                  <CardContent>\n                    <TrendingUp className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                    <h3 className=\"font-semibold text-lg mb-2\">Trending Content</h3>\n                    <p className=\"text-muted-foreground\">\n                      Trending posts will appear here as the community grows.\n                    </p>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n              \n              <TabsContent value=\"following\" className=\"mt-6\">\n                <Card className=\"text-center py-12\">\n                  <CardContent>\n                    <Users className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                    <h3 className=\"font-semibold text-lg mb-2\">Following Feed</h3>\n                    <p className=\"text-muted-foreground\">\n                      Posts from people you follow will appear here.\n                    </p>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n          \n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Trending Topics */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5\" />\n                  Trending Topics\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {trendingTopics.length === 0 ? (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Topics will appear here as content is created.\n                  </p>\n                ) : (\n                  trendingTopics.map((topic) => (\n                    <div key={topic.id} className=\"flex items-center justify-between\">\n                      <Badge \n                        variant=\"outline\" \n                        className=\"flex items-center gap-2\"\n                        style={{ \n                          borderColor: topic.color || '#6366f1',\n                          color: topic.color || '#6366f1'\n                        }}\n                      >\n                        <div \n                          className=\"w-2 h-2 rounded-full\" \n                          style={{ backgroundColor: topic.color || '#6366f1' }}\n                        />\n                        {topic.name}\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\">\n                        New\n                      </span>\n                    </div>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n            \n            {/* Community Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Community</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Posts</span>\n                  <span className=\"font-semibold\">{posts.length}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Topics</span>\n                  <span className=\"font-semibold\">{topics.length}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Active Today</span>\n                  <span className=\"font-semibold\">1</span>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  onClick={() => window.location.href = '/my-collections'}\n                >\n                  <BookOpen className=\"w-4 h-4 mr-2\" />\n                  My Collections\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  onClick={() => window.location.href = '/discover'}\n                >\n                  <TrendingUp className=\"w-4 h-4 mr-2\" />\n                  Discover\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  onClick={() => window.location.href = '/chat'}\n                >\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  AI Chat\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </UnifiedLayout>\n  );\n}","size_bytes":9361},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { FileText, MessageSquare, Shield, Github, Mail } from \"lucide-react\";\nimport { SiGoogle, SiFacebook, SiX } from \"react-icons/si\";\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\nconst snappyLearnIcon = \"/snappylearn-icon.png\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Landing() {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleOAuthLogin = (provider: string) => {\n    window.location.href = `/api/auth/${provider}`;\n  };\n\n  const handleEmailLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password\n        }),\n        credentials: 'include'\n      });\n\n      if (response.ok) {\n        window.location.href = '/';\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: \"Invalid email or password\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleEmailRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData),\n        credentials: 'include'\n      });\n\n      if (response.ok) {\n        window.location.href = '/';\n      } else {\n        const data = await response.json();\n        toast({\n          title: \"Registration Failed\",\n          description: data.message || \"Something went wrong\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Registration Failed\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex flex-col items-center justify-center mb-6\">\n            <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"h-20 w-auto mb-4\" />\n            <h1 className=\"text-4xl font-bold text-gray-900\">SnappyLearn</h1>\n          </div>\n          <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n            Your intelligent document management and AI chat platform. \n            Upload documents, create collections, and chat with AI about your content.\n          </p>\n        </div>\n\n        {/* Authentication Section */}\n        <div className=\"max-w-md mx-auto mb-16\">\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle>Get Started</CardTitle>\n              <CardDescription>Sign in to access your AI-powered workspace</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"oauth\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"oauth\">Quick Sign In</TabsTrigger>\n                  <TabsTrigger value=\"email\">Email</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"oauth\" className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <Button \n                      onClick={() => handleOAuthLogin('replit')}\n                      className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                      size=\"lg\"\n                    >\n                      <img src={snappyLearnIcon} alt=\"SnappyLearn\" className=\"w-5 h-5 mr-2\" />\n                      Continue with Replit\n                    </Button>\n                    \n                    <Button \n                      onClick={() => handleOAuthLogin('google')}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      size=\"lg\"\n                    >\n                      <SiGoogle className=\"w-5 h-5 mr-2\" />\n                      Continue with Google\n                    </Button>\n                    \n                    <Button \n                      onClick={() => handleOAuthLogin('github')}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      size=\"lg\"\n                    >\n                      <Github className=\"w-5 h-5 mr-2\" />\n                      Continue with GitHub\n                    </Button>\n                    \n                    <Button \n                      onClick={() => handleOAuthLogin('facebook')}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      size=\"lg\"\n                    >\n                      <SiFacebook className=\"w-5 h-5 mr-2\" />\n                      Continue with Facebook\n                    </Button>\n                    \n                    <Button \n                      onClick={() => handleOAuthLogin('twitter')}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      size=\"lg\"\n                    >\n                      <SiX className=\"w-5 h-5 mr-2\" />\n                      Continue with Twitter\n                    </Button>\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"email\" className=\"space-y-4\">\n                  <Tabs defaultValue=\"login\">\n                    <TabsList className=\"grid w-full grid-cols-2\">\n                      <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                      <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n                    </TabsList>\n                    \n                    <TabsContent value=\"login\">\n                      <form onSubmit={handleEmailLogin} className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"login-email\">Email</Label>\n                          <Input\n                            id=\"login-email\"\n                            type=\"email\"\n                            value={formData.email}\n                            onChange={(e) => setFormData({...formData, email: e.target.value})}\n                            required\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"login-password\">Password</Label>\n                          <Input\n                            id=\"login-password\"\n                            type=\"password\"\n                            value={formData.password}\n                            onChange={(e) => setFormData({...formData, password: e.target.value})}\n                            required\n                          />\n                        </div>\n                        <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                          <Mail className=\"w-4 h-4 mr-2\" />\n                          {isLoading ? 'Signing In...' : 'Sign In'}\n                        </Button>\n                      </form>\n                    </TabsContent>\n                    \n                    <TabsContent value=\"register\">\n                      <form onSubmit={handleEmailRegister} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"firstName\">First Name</Label>\n                            <Input\n                              id=\"firstName\"\n                              value={formData.firstName}\n                              onChange={(e) => setFormData({...formData, firstName: e.target.value})}\n                              required\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"lastName\">Last Name</Label>\n                            <Input\n                              id=\"lastName\"\n                              value={formData.lastName}\n                              onChange={(e) => setFormData({...formData, lastName: e.target.value})}\n                              required\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"register-email\">Email</Label>\n                          <Input\n                            id=\"register-email\"\n                            type=\"email\"\n                            value={formData.email}\n                            onChange={(e) => setFormData({...formData, email: e.target.value})}\n                            required\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"register-password\">Password</Label>\n                          <Input\n                            id=\"register-password\"\n                            type=\"password\"\n                            value={formData.password}\n                            onChange={(e) => setFormData({...formData, password: e.target.value})}\n                            required\n                            minLength={8}\n                          />\n                        </div>\n                        <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                          <Mail className=\"w-4 h-4 mr-2\" />\n                          {isLoading ? 'Creating Account...' : 'Create Account'}\n                        </Button>\n                      </form>\n                    </TabsContent>\n                  </Tabs>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-3 gap-8 mb-16\">\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <FileText className=\"w-8 h-8 text-blue-600 mb-2\" />\n              <CardTitle>Document Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CardDescription>\n                Upload and organize your documents into smart collections. \n                Support for PDFs, text files, and more.\n              </CardDescription>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <MessageSquare className=\"w-8 h-8 text-green-600 mb-2\" />\n              <CardTitle>AI Chat Assistant</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CardDescription>\n                Chat with AI about your documents. Get summaries, \n                ask questions, and discover insights from your content.\n              </CardDescription>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <Shield className=\"w-8 h-8 text-purple-600 mb-2\" />\n              <CardTitle>Secure & Private</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CardDescription>\n                Your data is secure and private. All conversations \n                and documents are protected with enterprise-grade security.\n              </CardDescription>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center text-gray-600\">\n          <p>© 2025 SnappyLearn. Your intelligent knowledge companion.</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12501},"client/src/pages/modern-landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowRight, Check, FileText, MessageCircle, Search, Zap, Shield, BarChart3, Users, Globe, Sparkles } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { SignUpForm } from \"@/components/auth/SignUpForm\";\n\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\n\nexport default function ModernLanding() {\n  const [showSignUp, setShowSignUp] = useState(false);\n\n  const handleGetStarted = () => {\n    setShowSignUp(true);\n  };\n\n  const handleSignIn = () => {\n    window.location.href = \"/auth\";\n  };\n\n  if (showSignUp) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"w-20 h-20 mx-auto mb-4\">\n              <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-full h-full object-contain\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">SnappyLearn</h1>\n            <p className=\"text-gray-600 mt-2\">\n              Your AI-powered knowledge companion\n            </p>\n          </div>\n          <SignUpForm \n            onToggleMode={() => window.location.href = \"/auth\"} \n            onBackToHome={() => setShowSignUp(false)}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header */}\n      <header className=\"border-b bg-white/80 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-8 h-8\" />\n              <span className=\"text-xl font-bold text-gray-900\">SnappyLearn</span>\n            </div>\n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#features\" className=\"text-gray-600 hover:text-gray-900\">Features</a>\n              <a href=\"#how-it-works\" className=\"text-gray-600 hover:text-gray-900\">How It Works</a>\n              <a href=\"#pricing\" className=\"text-gray-600 hover:text-gray-900\">Pricing</a>\n            </nav>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" onClick={handleSignIn}>Sign In</Button>\n              <Button onClick={handleGetStarted} className=\"bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white\">\n                Get Started\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-br from-indigo-50 via-white to-purple-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge className=\"mb-6 bg-purple-100 text-purple-800 border-purple-200\">\n              🚀 AI-Powered Learning Platform\n            </Badge>\n            <h1 className=\"text-5xl md:text-6xl font-bold text-gray-900 mb-6\">\n              Turn What You Learn Into <br />\n              <span className=\"bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent\">\n                Lasting Knowledge\n              </span>\n            </h1>\n            <p className=\"text-xl text-gray-600 mb-8 max-w-2xl mx-auto\">\n              SnappyLearn helps you capture notes, bookmark content, and use AI to organize your learning. \n              Build personal knowledge hubs or share insights with your community.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                onClick={handleGetStarted} \n                size=\"lg\" \n                className=\"bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white px-8 py-3\"\n              >\n                Start Building Your Knowledge Hub\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" className=\"px-8 py-3\">\n                Watch Demo\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              AI + Social Learning That Actually Works\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Focus on personal benefit first, then connect with others. Use concrete actions to organize, share, and automate your learning.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4\">\n                  <FileText className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <CardTitle>📚 Your Personal Knowledge Hub</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Save articles, posts, and documents in one place. AI organizes and tags them automatically.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center mb-4\">\n                  <MessageCircle className=\"w-6 h-6 text-indigo-600\" />\n                </div>\n                <CardTitle>⚡ AI That Works For You</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Summarize long articles, track trends, or set tasks that deliver insights to your inbox daily.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Search className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <CardTitle>🤝 Learning With Others</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Join communities of like-minded learners. Share insights, ask questions, and grow together.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Zap className=\"w-6 h-6 text-yellow-600\" />\n                </div>\n                <CardTitle>📈 Insights That Matter</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  See what you've learned, revisit key takeaways, and stay on top of what's trending.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Shield className=\"w-6 h-6 text-red-600\" />\n                </div>\n                <CardTitle>🔒 Private Learning</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Your Personal Knowledge Hub. Organize notes, bookmarks, and documents into collections with AI support.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4\">\n                  <BarChart3 className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <CardTitle>🌐 Community Insights</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Share your knowledge publicly, collaborate, and amplify your impact.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section id=\"how-it-works\" className=\"py-20 bg-gray-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Start learning smarter in minutes\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              From document upload to AI-powered insights in three simple steps\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-2xl font-bold text-white\">1</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Create Notebooks</h3>\n              <p className=\"text-gray-600\">\n                Organize your documents into smart notebooks. Upload PDFs, text files, and attachments with drag-and-drop ease.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-indigo-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-2xl font-bold text-white\">2</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Start Conversations</h3>\n              <p className=\"text-gray-600\">\n                Begin chatting with your documents or have independent conversations. The AI understands context from your uploaded content.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-2xl font-bold text-white\">3</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Get Insights</h3>\n              <p className=\"text-gray-600\">\n                Ask questions, get detailed answers with source citations, and build on previous conversations to deepen your understanding.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 bg-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Simple, transparent pricing\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Start for free, then scale as you grow your knowledge base\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            <Card className=\"border-2 border-gray-200\">\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">Free</CardTitle>\n                <CardDescription>Perfect for personal use</CardDescription>\n                <div className=\"text-4xl font-bold text-gray-900 mt-4\">\n                  $0<span className=\"text-lg font-normal text-gray-600\">/month</span>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Up to 10 documents</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Basic AI chat</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">1 notebook</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Community support</span>\n                  </li>\n                </ul>\n                <Button className=\"w-full mt-6\" variant=\"outline\" onClick={handleGetStarted}>\n                  Get Started Free\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-purple-500 relative\">\n              <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                <Badge className=\"bg-purple-600 text-white\">Most Popular</Badge>\n              </div>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">Pro</CardTitle>\n                <CardDescription>For power users and professionals</CardDescription>\n                <div className=\"text-4xl font-bold text-gray-900 mt-4\">\n                  $19<span className=\"text-lg font-normal text-gray-600\">/month</span>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Up to 1,000 documents</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Advanced AI chat</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Unlimited notebooks</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Priority support</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Analytics dashboard</span>\n                  </li>\n                </ul>\n                <Button className=\"w-full mt-6 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white\" onClick={handleGetStarted}>\n                  Start Pro Trial\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-gray-200\">\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">Enterprise</CardTitle>\n                <CardDescription>For teams and organizations</CardDescription>\n                <div className=\"text-4xl font-bold text-gray-900 mt-4\">\n                  Custom\n                </div>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Unlimited documents</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Custom AI models</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Team collaboration</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Dedicated support</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">SSO integration</span>\n                  </li>\n                </ul>\n                <Button className=\"w-full mt-6\" variant=\"outline\">\n                  Contact Sales\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-purple-600 to-indigo-600 text-white\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Ready to build your AI-powered knowledge hub?\n          </h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto\">\n            Join 10K+ active learners who are already using SnappyLearn to organize their knowledge and connect with others.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              onClick={handleGetStarted} \n              size=\"lg\" \n              className=\"bg-white text-purple-600 hover:bg-gray-100 px-8 py-3\"\n            >\n              Start Building Your Knowledge Hub\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Button>\n            <Button variant=\"outline\" size=\"lg\" className=\"border-white text-white hover:bg-white hover:text-purple-600 px-8 py-3\">\n              View Documentation\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-8 h-8\" />\n                <span className=\"text-xl font-bold\">SnappyLearn</span>\n              </div>\n              <p className=\"text-gray-400\">\n                Building intelligent learning experiences with AI\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Product</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#features\" className=\"hover:text-white\">Features</a></li>\n                <li><a href=\"#pricing\" className=\"hover:text-white\">Pricing</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Use Cases</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Integrations</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Resources</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white\">Documentation</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">API Reference</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Tutorials</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Blog</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white\">About</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Contact</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Careers</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Privacy</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2025 SnappyLearn, Inc. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":20933},"client/src/pages/my-collections.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Plus, Search, BookOpen, Lock, Globe, Edit, Trash, Share } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useCollections, useDeleteCollection } from \"@/hooks/use-collections\";\nimport type { Collection } from \"@shared/schema\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { TwitterStyleLayout } from \"@/components/layout/TwitterStyleLayout\";\n\nexport default function MyCollections() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { data: collections = [] } = useCollections();\n  const deleteCollection = useDeleteCollection();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Filter user's collections\n  const myCollections = collections.filter(c => c.userId === user?.id);\n  \n  const filteredCollections = myCollections.filter(collection =>\n    collection.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    collection.description?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleDeleteCollection = (collection: Collection) => {\n    if (confirm(`Are you sure you want to delete \"${collection.name}\"?`)) {\n      deleteCollection.mutate({ id: collection.id, name: collection.name });\n    }\n  };\n\n  const getPrivacyIcon = (privacy: string) => {\n    return privacy === \"public\" ? (\n      <Globe className=\"h-4 w-4 text-green-600\" />\n    ) : (\n      <Lock className=\"h-4 w-4 text-gray-600\" />\n    );\n  };\n\n  const getPrivacyLabel = (privacy: string) => {\n    return privacy === \"public\" ? \"Public\" : \"Private\";\n  };\n\n  return (\n    <TwitterStyleLayout>\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">My Collections</h1>\n        <p className=\"text-gray-600\">Organize and manage your document collections</p>\n      </div>\n\n      {/* Actions */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <div className=\"relative max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search collections...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <Button onClick={() => setLocation(\"/collections\")} className=\"flex items-center\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          New Collection\n        </Button>\n      </div>\n\n      {/* Collections Grid */}\n      {filteredCollections.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {filteredCollections.map(collection => (\n            <Card key={collection.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg font-semibold text-gray-900 mb-2\">\n                      {collection.name}\n                    </CardTitle>\n                    {collection.description && (\n                      <p className=\"text-gray-600 text-sm line-clamp-2 mb-3\">\n                        {collection.description}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Privacy Status */}\n                <div className=\"flex items-center space-x-2 mb-3\">\n                  {getPrivacyIcon(collection.privateStatusTypeId || \"private\")}\n                  <Badge \n                    variant={collection.privateStatusTypeId === \"public\" ? \"default\" : \"secondary\"}\n                    className=\"text-xs\"\n                  >\n                    {getPrivacyLabel(collection.privateStatusTypeId || \"private\")}\n                  </Badge>\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"pt-0\">\n                {/* Stats */}\n                <div className=\"text-center py-3 border-t border-gray-100 mb-4\">\n                  <div className=\"text-lg font-semibold text-gray-900\">\n                    0 documents\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Total items</div>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex gap-2\">\n                  <Button\n                    asChild\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                  >\n                    <Link href={`/collections/${collection.id}`}>\n                      <BookOpen className=\"h-3 w-3 mr-1\" />\n                      View\n                    </Link>\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleDeleteCollection(collection)}\n                    className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                  >\n                    <Trash className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        /* Empty State */\n        <div className=\"text-center py-12\">\n          <BookOpen className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-xl font-medium text-gray-900 mb-2\">\n            {searchQuery ? \"No collections found\" : \"No collections yet\"}\n          </h3>\n          <p className=\"text-gray-600 mb-6\">\n            {searchQuery \n              ? \"Try adjusting your search terms\"\n              : \"Create your first collection to organize your documents and knowledge\"\n            }\n          </p>\n          {!searchQuery && (\n            <Button onClick={() => setLocation(\"/collections\")} className=\"flex items-center\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Collection\n            </Button>\n          )}\n        </div>\n      )}\n    </TwitterStyleLayout>\n  );\n}","size_bytes":6262},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/simple-landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MessageSquare, FileText, Zap } from \"lucide-react\";\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\n\nexport default function SimpleLanding() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-16\">\n          <div className=\"mb-6\">\n            <img \n              src={snappyLearnLogo} \n              alt=\"SnappyLearn Logo\" \n              className=\"h-20 w-auto mx-auto\"\n            />\n          </div>\n          <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n            SnappyLearn\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-2xl mx-auto\">\n            Your intelligent knowledge management platform. Upload documents, create collections, and chat with AI about your content.\n          </p>\n          \n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle>Get Started</CardTitle>\n              <CardDescription>\n                Sign in to access your personal document collections and AI assistant\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                onClick={() => window.location.href = '/api/login'}\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                Sign in with Replit\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-6xl mx-auto\">\n          <Card>\n            <CardHeader>\n              <FileText className=\"w-8 h-8 text-blue-600 mb-2\" />\n              <CardTitle className=\"text-lg\">Document Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Upload and organize your documents into collections for easy access and management.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-8 h-8 mb-2\" />\n              <CardTitle className=\"text-lg\">AI-Powered Chat</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Chat with AI about your documents. Get insights, summaries, and answers from your content.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <MessageSquare className=\"w-8 h-8 text-green-600 mb-2\" />\n              <CardTitle className=\"text-lg\">Smart Conversations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Maintain conversation history and context across multiple chat sessions.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <Zap className=\"w-8 h-8 text-yellow-600 mb-2\" />\n              <CardTitle className=\"text-lg\">Instant Search</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Quickly find information across all your documents with intelligent search.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3716},"client/src/pages/social-landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Brain, Users, Share, Zap, ArrowRight } from \"lucide-react\";\nimport { AuthPage } from \"@/components/auth/AuthPage\";\n\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\n\nexport default function SocialLanding() {\n\n  const features = [\n    {\n      icon: Brain,\n      title: \"AI-Powered Learning\",\n      description: \"Your intelligent persona amplifies your learning and connects you with knowledge\",\n      color: \"bg-purple-100 text-purple-600\"\n    },\n    {\n      icon: Users,\n      title: \"Community Networks\",\n      description: \"Connect with like-minded learners and build your learning network\",\n      color: \"bg-blue-100 text-blue-600\"\n    },\n    {\n      icon: Share,\n      title: \"Smart Sharing\",\n      description: \"Transform private insights into engaging public learning content\",\n      color: \"bg-green-100 text-green-600\"\n    },\n    {\n      icon: Zap,\n      title: \"Real-time Insights\",\n      description: \"Track learning performance and discover trending knowledge\",\n      color: \"bg-orange-100 text-orange-600\"\n    }\n  ];\n\n  const stats = [\n    { value: \"10K+\", label: \"Active Learners\" },\n    { value: \"50K+\", label: \"AI Insights\" },\n    { value: \"1M+\", label: \"Knowledge Shared\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50\">\n      {/* Header */}\n      <header className=\"px-6 py-4 flex justify-between items-center\">\n        <div className=\"flex items-center space-x-2\">\n          <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"h-8 w-auto\" />\n        </div>\n        <div className=\"text-sm text-gray-600\">\n          Already have an account?{\" \"}\n          <button\n            onClick={() => {/* Navigate to sign in */}}\n            className=\"text-purple-600 font-medium hover:underline\"\n          >\n            Sign In →\n          </button>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-16 items-center\">\n          {/* Left Column - Content */}\n          <div className=\"space-y-8\">\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <Brain className=\"h-4 w-4 text-purple-600\" />\n              <span className=\"text-gray-600\">The Intelligent Social Learning Platform</span>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h1 className=\"text-5xl font-bold leading-tight\">\n                Where Your{\" \"}\n                <span className=\"bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\">\n                  Knowledge Becomes\n                </span>\n                <br />\n                <span className=\"bg-gradient-to-r from-pink-500 to-purple-600 bg-clip-text text-transparent\">\n                  Intelligent Learning\n                </span>\n              </h1>\n              <p className=\"text-xl text-gray-600 leading-relaxed\">\n                Your AI learning companion transforms private thoughts into engaging public knowledge. \n                Experience the future of social learning where your intelligent persona amplifies your voice and \n                connects you with like-minded individuals.\n              </p>\n            </div>\n\n            {/* Features Grid */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              {features.map((feature, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className={`p-2 rounded-lg ${feature.color}`}>\n                    <feature.icon className=\"h-5 w-5\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">{feature.title}</h3>\n                    <p className=\"text-sm text-gray-600\">{feature.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Stats */}\n            <div className=\"flex space-x-8\">\n              {stats.map((stat, index) => (\n                <div key={index} className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900\">{stat.value}</div>\n                  <div className=\"text-sm text-gray-600\">{stat.label}</div>\n                </div>\n              ))}\n            </div>\n\n            {/* Preview Cards */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Card className=\"bg-gradient-to-br from-purple-500 to-indigo-600 text-white p-6\">\n                <div className=\"space-y-2\">\n                  <Badge variant=\"secondary\" className=\"bg-white/20 text-white border-none\">\n                    Private Learning\n                  </Badge>\n                  <h3 className=\"font-semibold\">Personal Knowledge Hub</h3>\n                  <p className=\"text-sm opacity-90\">Organize thoughts with intelligent categorization</p>\n                </div>\n                <ArrowRight className=\"h-5 w-5 mt-4\" />\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-green-500 to-emerald-600 text-white p-6\">\n                <div className=\"space-y-2\">\n                  <Badge variant=\"secondary\" className=\"bg-white/20 text-white border-none\">\n                    Public Sharing\n                  </Badge>\n                  <h3 className=\"font-semibold\">Community Insights</h3>\n                  <p className=\"text-sm opacity-90\">Transform Your Learning Into Social Impact</p>\n                </div>\n                <ArrowRight className=\"h-5 w-5 mt-4\" />\n              </Card>\n            </div>\n          </div>\n\n          {/* Right Column - Authentication */}\n          <div className=\"lg:pl-8\">\n            <div className=\"bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl border-0 p-8\">\n              <div className=\"text-center mb-6\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  Join SnappyLearn Today\n                </h2>\n                <p className=\"text-gray-600\">\n                  Start creating intelligent content with AI agents\n                </p>\n              </div>\n              \n              <AuthPage embedded={true} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"text-center py-8 text-sm text-gray-500\">\n        <div className=\"flex items-center justify-center space-x-2 mb-2\">\n          <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"h-5 w-auto\" />\n        </div>\n        © 2025 SnappyLearn. The future of AI-powered social learning.\n      </footer>\n    </div>\n  );\n}","size_bytes":6683},"client/src/providers/GoogleOAuthProvider.tsx":{"content":"import { GoogleOAuthProvider } from '@react-oauth/google';\n\ninterface GoogleOAuthWrapperProps {\n  children: React.ReactNode;\n}\n\nexport function GoogleOAuthWrapper({ children }: GoogleOAuthWrapperProps) {\n  const clientId = import.meta.env.VITE_GOOGLE_CLIENT_ID;\n  \n  console.log('Google OAuth client ID:', clientId);\n  \n  if (!clientId || clientId === 'your_google_client_id_here' || clientId === 'undefined') {\n    // Return children without Google OAuth if not configured\n    console.log('Google OAuth not configured, falling back to regular auth');\n    return <>{children}</>;\n  }\n\n  return (\n    <GoogleOAuthProvider clientId={clientId}>\n      {children}\n    </GoogleOAuthProvider>\n  );\n}","size_bytes":692},"client/src/components/admin/AdminTestButton.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function AdminTestButton() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const makeAdmin = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/test/make-admin\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to make user admin\");\n      }\n\n      const data = await response.json();\n      toast({\n        title: \"Success\",\n        description: \"You are now an admin! Please refresh the page to see admin features.\",\n      });\n    } catch (error) {\n      console.error(\"Error making user admin:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to make user admin\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Button\n      onClick={makeAdmin}\n      disabled={isLoading}\n      variant=\"outline\"\n      className=\"mb-4\"\n    >\n      <Shield className=\"h-4 w-4 mr-2\" />\n      {isLoading ? \"Making Admin...\" : \"Make Me Admin (Dev)\"}\n    </Button>\n  );\n}","size_bytes":1321},"client/src/components/admin/AuditLogsTable.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DataTable } from \"./DataTable\";\nimport { Activity, User, Building, FileText, Settings } from \"lucide-react\";\nimport type { AdminAuditLog } from \"@shared/schema\";\n\nexport function AuditLogsTable() {\n  const [selectedAction, setSelectedAction] = useState<string>(\"all\");\n  const [selectedTarget, setSelectedTarget] = useState<string>(\"all\");\n\n  const { data: auditLogs, isLoading } = useQuery<AdminAuditLog[]>({\n    queryKey: [\"/api/admin/audit-logs\", selectedAction, selectedTarget],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedAction !== \"all\") params.append(\"action\", selectedAction);\n      if (selectedTarget !== \"all\") params.append(\"targetType\", selectedTarget);\n      params.append(\"limit\", \"100\");\n      \n      const response = await fetch(`/api/admin/audit-logs?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch audit logs\");\n      return response.json();\n    },\n  });\n\n  const getActionIcon = (action: string) => {\n    if (action.includes('user')) return <User className=\"h-4 w-4\" />;\n    if (action.includes('tenant')) return <Building className=\"h-4 w-4\" />;\n    if (action.includes('collection')) return <FileText className=\"h-4 w-4\" />;\n    return <Activity className=\"h-4 w-4\" />;\n  };\n\n  const getActionColor = (action: string) => {\n    if (action.includes('create')) return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n    if (action.includes('delete') || action.includes('deactivate')) return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';\n    if (action.includes('update') || action.includes('activate')) return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n    return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n  };\n\n  const getTargetIcon = (targetType: string) => {\n    switch (targetType) {\n      case 'user':\n        return <User className=\"h-4 w-4\" />;\n      case 'tenant':\n        return <Building className=\"h-4 w-4\" />;\n      case 'collection':\n        return <FileText className=\"h-4 w-4\" />;\n      default:\n        return <Settings className=\"h-4 w-4\" />;\n    }\n  };\n\n  const formatActionDescription = (log: AdminAuditLog) => {\n    const { action, targetType, details } = log;\n    const actionWords = action.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n    const targetName = details?.tenantName || details?.email || details?.name || `${targetType} ${log.targetId}`;\n    \n    return `${actionWords} ${targetType}: ${targetName}`;\n  };\n\n  const columns = [\n    {\n      key: 'createdAt' as keyof AdminAuditLog,\n      label: 'Timestamp',\n      render: (date: string) => (\n        <div className=\"flex flex-col\">\n          <span className=\"font-medium\">{new Date(date).toLocaleDateString()}</span>\n          <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n            {new Date(date).toLocaleTimeString()}\n          </span>\n        </div>\n      ),\n    },\n    {\n      key: 'action' as keyof AdminAuditLog,\n      label: 'Action',\n      render: (action: string) => (\n        <Badge variant=\"outline\" className={getActionColor(action)}>\n          {getActionIcon(action)}\n          <span className=\"ml-1 capitalize\">{action.replace(/_/g, ' ')}</span>\n        </Badge>\n      ),\n    },\n    {\n      key: 'targetType' as keyof AdminAuditLog,\n      label: 'Target',\n      render: (targetType: string, log: AdminAuditLog) => (\n        <div className=\"flex items-center space-x-2\">\n          {getTargetIcon(targetType)}\n          <div className=\"flex flex-col\">\n            <span className=\"font-medium capitalize\">{targetType}</span>\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n              {log.targetId}\n            </span>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'adminId' as keyof AdminAuditLog,\n      label: 'Admin',\n      render: (adminId: string) => (\n        <div className=\"flex items-center space-x-2\">\n          <User className=\"h-4 w-4\" />\n          <span className=\"text-sm\">{adminId}</span>\n        </div>\n      ),\n    },\n    {\n      key: 'details' as keyof AdminAuditLog,\n      label: 'Description',\n      render: (details: any, log: AdminAuditLog) => (\n        <div className=\"max-w-md\">\n          <p className=\"text-sm\">{formatActionDescription(log)}</p>\n          {details && Object.keys(details).length > 0 && (\n            <details className=\"mt-1\">\n              <summary className=\"text-xs text-gray-500 cursor-pointer\">Details</summary>\n              <pre className=\"text-xs text-gray-600 dark:text-gray-400 mt-1 bg-gray-50 dark:bg-gray-900 p-2 rounded\">\n                {JSON.stringify(details, null, 2)}\n              </pre>\n            </details>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  // Extract unique actions and targets for filters\n  const uniqueActions = [...new Set(auditLogs?.map(log => log.action) || [])];\n  const uniqueTargets = [...new Set(auditLogs?.map(log => log.targetType) || [])];\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Audit Logs</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Select value={selectedAction} onValueChange={setSelectedAction}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filter by action\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Actions</SelectItem>\n                {uniqueActions.map((action) => (\n                  <SelectItem key={action} value={action}>\n                    {action.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Select value={selectedTarget} onValueChange={setSelectedTarget}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"Filter by target\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Targets</SelectItem>\n                {uniqueTargets.map((target) => (\n                  <SelectItem key={target} value={target}>\n                    {target.charAt(0).toUpperCase() + target.slice(1)}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <DataTable\n          data={auditLogs || []}\n          columns={columns}\n          searchable={false}\n          isLoading={isLoading}\n          pageSize={20}\n        />\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7032},"client/src/components/admin/DataTable.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ChevronLeft, ChevronRight, Search } from \"lucide-react\";\n\ninterface Column<T> {\n  key: keyof T;\n  label: string;\n  render?: (value: any, row: T) => React.ReactNode;\n}\n\ninterface DataTableProps<T> {\n  data: T[];\n  columns: Column<T>[];\n  searchable?: boolean;\n  searchKey?: keyof T;\n  pageSize?: number;\n  isLoading?: boolean;\n}\n\nexport function DataTable<T>({\n  data,\n  columns,\n  searchable = true,\n  searchKey,\n  pageSize = 10,\n  isLoading = false,\n}: DataTableProps<T>) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // Filter data based on search\n  const filteredData = searchable && searchKey && searchTerm\n    ? data.filter((item) => {\n        const value = item[searchKey];\n        return String(value).toLowerCase().includes(searchTerm.toLowerCase());\n      })\n    : data;\n\n  // Pagination\n  const totalPages = Math.ceil(filteredData.length / pageSize);\n  const startIndex = (currentPage - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedData = filteredData.slice(startIndex, endIndex);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-32\">\n        <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-purple-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {searchable && searchKey && (\n        <div className=\"flex items-center space-x-2\">\n          <Search className=\"h-4 w-4 text-gray-500\" />\n          <Input\n            placeholder={`Search ${String(searchKey)}...`}\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"max-w-sm\"\n          />\n        </div>\n      )}\n\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              {columns.map((column) => (\n                <TableHead key={String(column.key)}>\n                  {column.label}\n                </TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {paginatedData.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"text-center py-8\">\n                  No data available\n                </TableCell>\n              </TableRow>\n            ) : (\n              paginatedData.map((row, index) => (\n                <TableRow key={index}>\n                  {columns.map((column) => (\n                    <TableCell key={String(column.key)}>\n                      {column.render\n                        ? column.render(row[column.key], row)\n                        : String(row[column.key] || \"\")}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      {totalPages > 1 && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Showing {startIndex + 1} to {Math.min(endIndex, filteredData.length)} of{\" \"}\n            {filteredData.length} results\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(currentPage - 1)}\n              disabled={currentPage === 1}\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <span className=\"text-sm\">\n              Page {currentPage} of {totalPages}\n            </span>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(currentPage + 1)}\n              disabled={currentPage === totalPages}\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":4177},"client/src/components/admin/TenantDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { TenantWithStats } from \"@shared/schema\";\n\nconst tenantSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  domain: z.string().min(1, \"Domain is required\"),\n  plan: z.enum([\"free\", \"starter\", \"professional\", \"enterprise\"]),\n  settings: z.object({\n    maxUsers: z.number().min(1).default(10),\n    maxCollections: z.number().min(1).default(5),\n    maxDocuments: z.number().min(1).default(100),\n    features: z.array(z.string()).default([]),\n  }).default({\n    maxUsers: 10,\n    maxCollections: 5,\n    maxDocuments: 100,\n    features: [],\n  }),\n  isActive: z.boolean().default(true),\n});\n\ntype TenantFormData = z.infer<typeof tenantSchema>;\n\ninterface TenantDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  tenant?: TenantWithStats | null;\n}\n\nexport function TenantDialog({ open, onOpenChange, tenant }: TenantDialogProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<TenantFormData>({\n    resolver: zodResolver(tenantSchema),\n    defaultValues: {\n      name: tenant?.name || \"\",\n      domain: tenant?.domain || \"\",\n      plan: tenant?.plan || \"free\",\n      settings: {\n        maxUsers: tenant?.settings?.maxUsers || 10,\n        maxCollections: tenant?.settings?.maxCollections || 5,\n        maxDocuments: tenant?.settings?.maxDocuments || 100,\n        features: tenant?.settings?.features || [],\n      },\n      isActive: tenant?.isActive ?? true,\n    },\n  });\n\n  const createTenantMutation = useMutation({\n    mutationFn: async (data: TenantFormData) => {\n      const response = await fetch(\"/api/admin/tenants\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create tenant\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/tenants\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard\"] });\n      toast({\n        title: \"Success\",\n        description: \"Tenant created successfully\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create tenant\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTenantMutation = useMutation({\n    mutationFn: async (data: TenantFormData) => {\n      const response = await fetch(`/api/admin/tenants/${tenant?.id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to update tenant\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/tenants\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard\"] });\n      toast({\n        title: \"Success\",\n        description: \"Tenant updated successfully\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update tenant\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: TenantFormData) => {\n    setIsSubmitting(true);\n    try {\n      if (tenant) {\n        await updateTenantMutation.mutateAsync(data);\n      } else {\n        await createTenantMutation.mutateAsync(data);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>\n            {tenant ? \"Edit Tenant\" : \"Create New Tenant\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Company Name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"domain\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Domain</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"company.com\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"plan\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Plan</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a plan\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"free\">Free</SelectItem>\n                      <SelectItem value=\"starter\">Starter</SelectItem>\n                      <SelectItem value=\"professional\">Professional</SelectItem>\n                      <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"settings.maxUsers\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Max Users</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"settings.maxCollections\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Max Collections</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"settings.maxDocuments\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Max Documents</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"isActive\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-base\">Active</FormLabel>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Enable or disable this tenant\n                    </div>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {isSubmitting ? \"Saving...\" : tenant ? \"Update\" : \"Create\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10009},"client/src/components/admin/UserManagementTable.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { DataTable } from \"./DataTable\";\nimport { CheckCircle, XCircle, Shield, User, Crown } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { UserWithTenant } from \"@shared/schema\";\n\nexport function UserManagementTable() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedTenant, setSelectedTenant] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n\n  const { data: users, isLoading } = useQuery<UserWithTenant[]>({\n    queryKey: [\"/api/admin/users\", selectedTenant !== \"all\" ? selectedTenant : undefined, selectedStatus !== \"all\" ? selectedStatus === \"active\" : undefined],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedTenant !== \"all\") params.append(\"tenantId\", selectedTenant);\n      if (selectedStatus !== \"all\") params.append(\"isActive\", selectedStatus === \"active\" ? \"true\" : \"false\");\n      \n      const response = await fetch(`/api/admin/users?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch users\");\n      return response.json();\n    },\n  });\n\n  const { data: tenants } = useQuery({\n    queryKey: [\"/api/admin/tenants\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/tenants\");\n      if (!response.ok) throw new Error(\"Failed to fetch tenants\");\n      return response.json();\n    },\n  });\n\n  const updateUserStatusMutation = useMutation({\n    mutationFn: async ({ userId, isActive }: { userId: string; isActive: boolean }) => {\n      const response = await fetch(`/api/admin/users/${userId}/${isActive ? 'activate' : 'deactivate'}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error('Failed to update user status');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User status updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      const response = await fetch(`/api/admin/users/${userId}/role`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ role })\n      });\n      if (!response.ok) throw new Error('Failed to update user role');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'super_admin':\n        return <Crown className=\"h-4 w-4\" />;\n      case 'admin':\n        return <Shield className=\"h-4 w-4\" />;\n      default:\n        return <User className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'super_admin':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';\n      case 'admin':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n    }\n  };\n\n  const columns = [\n    {\n      key: 'email' as keyof UserWithTenant,\n      label: 'Email',\n      render: (value: string, user: UserWithTenant) => (\n        <div className=\"flex flex-col\">\n          <span className=\"font-medium\">{value}</span>\n          <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n            {user.firstName} {user.lastName}\n          </span>\n        </div>\n      ),\n    },\n    {\n      key: 'tenant' as keyof UserWithTenant,\n      label: 'Tenant',\n      render: (tenant: UserWithTenant['tenant']) => (\n        <div className=\"flex flex-col\">\n          <span className=\"font-medium\">{tenant?.name || 'No Tenant'}</span>\n          <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n            {tenant?.domain || '-'}\n          </span>\n        </div>\n      ),\n    },\n    {\n      key: 'role' as keyof UserWithTenant,\n      label: 'Role',\n      render: (role: string) => (\n        <Badge variant=\"outline\" className={getRoleColor(role)}>\n          {getRoleIcon(role)}\n          <span className=\"ml-1 capitalize\">{role.replace('_', ' ')}</span>\n        </Badge>\n      ),\n    },\n    {\n      key: 'isActive' as keyof UserWithTenant,\n      label: 'Status',\n      render: (isActive: boolean) => (\n        <Badge variant={isActive ? \"default\" : \"destructive\"}>\n          {isActive ? \"Active\" : \"Inactive\"}\n        </Badge>\n      ),\n    },\n    {\n      key: 'createdAt' as keyof UserWithTenant,\n      label: 'Created',\n      render: (date: string) => new Date(date).toLocaleDateString(),\n    },\n    {\n      key: 'id' as keyof UserWithTenant,\n      label: 'Actions',\n      render: (id: string, user: UserWithTenant) => (\n        <div className=\"flex space-x-2\">\n          <Select\n            value={user.role}\n            onValueChange={(role) => updateUserRoleMutation.mutate({ userId: id, role })}\n          >\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"user\">User</SelectItem>\n              <SelectItem value=\"admin\">Admin</SelectItem>\n              <SelectItem value=\"super_admin\">Super Admin</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          {user.isActive ? (\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => updateUserStatusMutation.mutate({ userId: id, isActive: false })}\n              disabled={updateUserStatusMutation.isPending}\n            >\n              <XCircle className=\"h-4 w-4\" />\n            </Button>\n          ) : (\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => updateUserStatusMutation.mutate({ userId: id, isActive: true })}\n              disabled={updateUserStatusMutation.isPending}\n            >\n              <CheckCircle className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>User Management</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Select value={selectedTenant} onValueChange={setSelectedTenant}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filter by tenant\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Tenants</SelectItem>\n                {tenants?.map((tenant: any) => (\n                  <SelectItem key={tenant.id} value={tenant.id}>\n                    {tenant.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"inactive\">Inactive</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <DataTable\n          data={users || []}\n          columns={columns}\n          searchable={true}\n          searchKey=\"email\"\n          isLoading={isLoading}\n        />\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8612},"client/src/components/auth/AuthPage.tsx":{"content":"import { useState } from 'react'\nimport { LoginForm } from './LoginForm'\nimport { SignUpForm } from './SignUpForm'\n// import snappyLearnLogo from '@assets/snappylearn-logo-transparent.png'\n\ninterface AuthPageProps {\n  embedded?: boolean;\n}\n\nexport function AuthPage({ embedded = false }: AuthPageProps) {\n  const [isSignUp, setIsSignUp] = useState(false)\n\n  if (embedded) {\n    // Embedded version for landing page - no full page wrapper\n    return (\n      <div className=\"w-full space-y-6\">\n        {isSignUp ? (\n          <SignUpForm onToggleMode={() => setIsSignUp(false)} />\n        ) : (\n          <LoginForm onToggleMode={() => setIsSignUp(true)} />\n        )}\n      </div>\n    )\n  }\n\n  // Full page version\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"w-20 h-20 mx-auto mb-4\">\n            <img src=\"/snappylearn-transparent-logo.png\" alt=\"SnappyLearn\" className=\"w-full h-full object-contain\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">SnappyLearn</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Your AI-powered knowledge companion\n          </p>\n        </div>\n\n        {isSignUp ? (\n          <SignUpForm onToggleMode={() => setIsSignUp(false)} />\n        ) : (\n          <LoginForm onToggleMode={() => setIsSignUp(true)} />\n        )}\n      </div>\n    </div>\n  )\n}","size_bytes":1532},"client/src/components/auth/GoogleSignInButton.tsx":{"content":"import { useGoogleLogin } from '@react-oauth/google';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { FcGoogle } from 'react-icons/fc';\nimport { useState } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { Analytics } from '@/lib/analytics';\n\ninterface GoogleSignInButtonProps {\n  text?: string;\n  className?: string;\n}\n\nexport function GoogleSignInButton({ text = \"Continue with Google\", className = \"\" }: GoogleSignInButtonProps) {\n  const { signInWithGoogle } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleGoogleLogin = useGoogleLogin({\n    onSuccess: async (tokenResponse) => {\n      setIsLoading(true);\n      \n      try {\n        // Get user info from Google\n        const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n          headers: { Authorization: `Bearer ${tokenResponse.access_token}` }\n        });\n        \n        if (!userInfoResponse.ok) {\n          throw new Error('Failed to fetch user info from Google');\n        }\n        \n        const userInfo = await userInfoResponse.json();\n        \n        // Create a JWT-like credential object for our backend\n        // Our backend expects a JWT format with header.payload.signature\n        const header = btoa(JSON.stringify({\n          alg: \"RS256\",\n          kid: \"a43429e8b13f5e0d7a5975d45475df28aa221b25\",\n          typ: \"JWT\"\n        }));\n        \n        const payload = btoa(JSON.stringify({\n          iss: \"accounts.google.com\",\n          azp: import.meta.env.VITE_GOOGLE_CLIENT_ID,\n          aud: import.meta.env.VITE_GOOGLE_CLIENT_ID,\n          sub: userInfo.sub,\n          email: userInfo.email,\n          email_verified: true,\n          at_hash: \"eRyF8DbPQlA1HEEK5ECbUA\",\n          name: userInfo.name,\n          picture: userInfo.picture,\n          given_name: userInfo.given_name,\n          family_name: userInfo.family_name,\n          locale: userInfo.locale || \"en\",\n          iat: Math.floor(Date.now() / 1000),\n          exp: Math.floor(Date.now() / 1000) + 3600,\n          jti: \"a1b2c3d4e5f6g7h8i9j0k1l2\"\n        }));\n        \n        const credential = `${header}.${payload}.dummy_signature`;\n        \n        const result = await signInWithGoogle(credential);\n        \n        if (result.error) {\n          toast({\n            title: \"Sign-in Failed\",\n            description: result.error.message,\n            variant: \"destructive\",\n          });\n        } else {\n          Analytics.trackSignIn('google', userInfo.sub);\n          toast({\n            title: \"Welcome!\",\n            description: \"Successfully signed in with Google\",\n          });\n        }\n      } catch (error) {\n        console.error('Google sign-in error:', error);\n        Analytics.trackError('Google sign-in failed', { error: error.message });\n        toast({\n          title: \"Sign-in Failed\",\n          description: \"Failed to sign in with Google. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    onError: (error) => {\n      console.error('Google OAuth error:', error);\n      Analytics.trackError('Google OAuth error', { error });\n      toast({\n        title: \"Sign-in Failed\",\n        description: \"Google authentication failed. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Check if Google OAuth is configured\n  const isGoogleConfigured = import.meta.env.VITE_GOOGLE_CLIENT_ID && \n                            import.meta.env.VITE_GOOGLE_CLIENT_ID !== 'your_google_client_id_here' &&\n                            import.meta.env.VITE_GOOGLE_CLIENT_ID !== 'undefined' &&\n                            import.meta.env.VITE_GOOGLE_CLIENT_ID !== '';\n\n  console.log('Google OAuth configured:', isGoogleConfigured, 'Client ID:', import.meta.env.VITE_GOOGLE_CLIENT_ID);\n\n  if (!isGoogleConfigured) {\n    return null; // Don't render if Google OAuth is not configured\n  }\n\n  return (\n    <Button\n      type=\"button\"\n      variant=\"outline\"\n      onClick={() => handleGoogleLogin()}\n      disabled={isLoading}\n      className={`w-full ${className}`}\n    >\n      {isLoading ? (\n        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary mr-2\"></div>\n      ) : (\n        <FcGoogle className=\"mr-2 h-4 w-4\" />\n      )}\n      {isLoading ? 'Signing in...' : text}\n    </Button>\n  );\n}\n\nexport function GoogleSignUpButton() {\n  return (\n    <GoogleSignInButton \n      text=\"Sign up with Google\" \n      className=\"mb-4\"\n    />\n  );\n}","size_bytes":4602},"client/src/components/auth/LoginForm.tsx":{"content":"import { useState } from 'react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { useToast } from '@/hooks/use-toast'\nimport { Loader2 } from 'lucide-react'\nimport { GoogleSignInButton } from './GoogleSignInButton'\nimport { Separator } from '@/components/ui/separator'\n\ninterface LoginFormProps {\n  onToggleMode: () => void\n}\n\nexport function LoginForm({ onToggleMode }: LoginFormProps) {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const { signIn } = useAuth()\n  const { toast } = useToast()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      const { error } = await signIn(email, password)\n      \n      if (error) {\n        toast({\n          title: \"Sign in failed\",\n          description: error.message,\n          variant: \"destructive\",\n        })\n      } else {\n        toast({\n          title: \"Welcome back!\",\n          description: \"You've successfully signed in.\",\n        })\n      }\n    } catch (error) {\n      toast({\n        title: \"An error occurred\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle>Sign In</CardTitle>\n        <CardDescription>\n          Enter your email and password to access your account\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <GoogleSignInButton />\n        \n        <div className=\"relative my-4\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <Separator />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-background px-2 text-muted-foreground\">\n              Or continue with email\n            </span>\n          </div>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Enter your password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n          </div>\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Signing in...\n              </>\n            ) : (\n              'Sign In'\n            )}\n          </Button>\n        </form>\n        <div className=\"mt-4 text-center text-sm\">\n          Don't have an account?{' '}\n          <button\n            onClick={onToggleMode}\n            className=\"text-primary hover:underline\"\n          >\n            Sign up\n          </button>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}","size_bytes":3598},"client/src/components/auth/SignUpForm.tsx":{"content":"import { useState } from 'react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { useToast } from '@/hooks/use-toast'\nimport { Loader2 } from 'lucide-react'\nimport { GoogleSignUpButton } from './GoogleSignInButton'\nimport { Separator } from '@/components/ui/separator'\n\ninterface SignUpFormProps {\n  onToggleMode: () => void\n  onBackToHome?: () => void\n}\n\nexport function SignUpForm({ onToggleMode, onBackToHome }: SignUpFormProps) {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [confirmPassword, setConfirmPassword] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const { signUp } = useAuth()\n  const { toast } = useToast()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    if (password !== confirmPassword) {\n      toast({\n        title: \"Passwords don't match\",\n        description: \"Please make sure both passwords are identical.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    if (password.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setIsLoading(true)\n\n    try {\n      const { error } = await signUp(email, password)\n      \n      if (error) {\n        toast({\n          title: \"Sign up failed\",\n          description: error.message,\n          variant: \"destructive\",\n        })\n      } else {\n        toast({\n          title: \"Account created successfully!\",\n          description: \"You can now sign in with your email and password.\",\n        })\n        // After successful signup, switch to login form\n        setTimeout(() => {\n          onToggleMode();\n        }, 1500);\n      }\n    } catch (error) {\n      toast({\n        title: \"An error occurred\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle>Create Account</CardTitle>\n        <CardDescription>\n          Enter your email and password to create a new account\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <GoogleSignUpButton />\n        \n        <div className=\"relative my-4\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <Separator />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-background px-2 text-muted-foreground\">\n              Or continue with email\n            </span>\n          </div>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Create a password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              placeholder=\"Confirm your password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              required\n            />\n          </div>\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Creating account...\n              </>\n            ) : (\n              'Create Account'\n            )}\n          </Button>\n        </form>\n        <div className=\"mt-4 text-center text-sm space-y-2\">\n          <div>\n            Already have an account?{' '}\n            <button\n              onClick={onToggleMode}\n              className=\"text-primary hover:underline\"\n            >\n              Sign in\n            </button>\n          </div>\n          {onBackToHome && (\n            <div>\n              <button\n                onClick={onBackToHome}\n                className=\"text-gray-600 hover:text-gray-800 underline\"\n              >\n                Back to Homepage\n              </button>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}","size_bytes":5075},"client/src/components/layout/CommunityLayout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Home, \n  Compass, \n  FolderOpen, \n  MessageSquare, \n  Settings, \n  Plus,\n  Brain,\n  BookOpen,\n  Zap,\n  Users\n} from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface CommunityLayoutProps {\n  children: ReactNode;\n}\n\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\n\nexport function CommunityLayout({ children }: CommunityLayoutProps) {\n  const [location] = useLocation();\n  const { user, signOut } = useAuth();\n\n  const navigationItems = [\n    {\n      name: \"Community\",\n      href: \"/community\",\n      icon: Home,\n      active: location === \"/community\" || location === \"/\"\n    },\n    {\n      name: \"Discover\",\n      href: \"/discover\", \n      icon: Compass,\n      active: location === \"/discover\"\n    },\n    {\n      name: \"Notebooks\",\n      href: \"/my-collections\",\n      icon: FolderOpen,\n      active: location === \"/my-collections\"\n    },\n    {\n      name: \"Chat\",\n      href: \"/chat\",\n      icon: MessageSquare,\n      active: location === \"/chat\"\n    }\n  ];\n\n  const toolsItems = [\n    {\n      name: \"AI Research\",\n      icon: Brain,\n      description: \"Research assistant\"\n    },\n    {\n      name: \"Study Notes\",\n      icon: BookOpen,\n      description: \"Smart note taking\"\n    },\n    {\n      name: \"Quick Learn\",\n      icon: Zap,\n      description: \"Rapid learning\"\n    },\n    {\n      name: \"Study Groups\",\n      icon: Users,\n      description: \"Collaborative learning\"\n    }\n  ];\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Left Sidebar - Always Persistent */}\n      <div className=\"w-64 bg-white border-r border-gray-200 flex flex-col\">\n        {/* Logo */}\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"h-8 w-auto\" />\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <ScrollArea className=\"flex-1 px-3 py-4\">\n          <div className=\"space-y-1\">\n            {navigationItems.map((item) => (\n              <Link key={item.name} href={item.href}>\n                <Button\n                  variant={item.active ? \"secondary\" : \"ghost\"}\n                  className=\"w-full justify-start h-10\"\n                >\n                  <item.icon className=\"h-4 w-4 mr-3\" />\n                  {item.name}\n                </Button>\n              </Link>\n            ))}\n          </div>\n\n          {/* Learning Tools Section */}\n          <div className=\"mt-8\">\n            <div className=\"flex items-center justify-between px-3 mb-3\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Learning Tools</h3>\n              <Button size=\"sm\" variant=\"ghost\" className=\"h-6 w-6 p-0\">\n                <Plus className=\"h-3 w-3\" />\n              </Button>\n            </div>\n            <div className=\"space-y-1\">\n              {toolsItems.map((tool) => (\n                <div\n                  key={tool.name}\n                  className=\"flex items-center space-x-3 px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-md cursor-pointer\"\n                >\n                  <tool.icon className=\"h-4 w-4 text-gray-400\" />\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-medium\">{tool.name}</div>\n                    <div className=\"text-xs text-gray-500 truncate\">{tool.description}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </ScrollArea>\n\n        {/* User Profile */}\n        <div className=\"p-4 border-t border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src={user?.profileImageUrl || \"\"} />\n              <AvatarFallback>\n                {user?.email?.charAt(0).toUpperCase() || \"U\"}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"text-sm font-medium text-gray-900 truncate\">\n                {user?.firstName || user?.email || \"User\"}\n              </div>\n              <div className=\"text-xs text-gray-500\">SnappyLearn Member</div>\n            </div>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={signOut}\n              className=\"h-8 w-8 p-0\"\n            >\n              <Settings className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Right Content Area */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {children}\n      </div>\n    </div>\n  );\n}","size_bytes":4867},"client/src/components/layout/MainLayout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Home, \n  Compass, \n  FolderOpen, \n  MessageSquare, \n  Settings, \n  Plus,\n  LogOut,\n  User,\n  CreditCard\n} from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface MainLayoutProps {\n  children: ReactNode;\n}\n\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\n\nexport function MainLayout({ children }: MainLayoutProps) {\n  const [location] = useLocation();\n  const { user, signOut } = useAuth();\n\n  const navigation = [\n    { name: \"Home\", href: \"/\", icon: Home },\n    { name: \"My Notebooks\", href: \"/my-collections\", icon: FolderOpen },\n    { name: \"Discover\", href: \"/discover\", icon: Compass },\n    { name: \"Chat\", href: \"/chat\", icon: MessageSquare },\n    { name: \"Billing\", href: \"/billing\", icon: CreditCard },\n  ];\n\n  const isActiveRoute = (href: string) => {\n    if (href === \"/\") {\n      return location === \"/\";\n    }\n    return location.startsWith(href);\n  };\n\n  const handleLogout = async () => {\n    await signOut();\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Left Sidebar */}\n      <div className=\"w-64 bg-white border-r border-gray-200 flex flex-col\">\n        {/* Logo */}\n        <div className=\"p-4 border-b border-gray-200\">\n          <Link href=\"/\" className=\"flex items-center justify-center\">\n            <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"h-8 w-auto\" />\n          </Link>\n        </div>\n\n        {/* Navigation */}\n        <ScrollArea className=\"flex-1\">\n          <nav className=\"p-4 space-y-2\">\n            {navigation.map((item) => {\n              const Icon = item.icon;\n              return (\n                <Link key={item.name} href={item.href}>\n                  <Button\n                    variant={isActiveRoute(item.href) ? \"secondary\" : \"ghost\"}\n                    className={`w-full justify-start text-left ${\n                      isActiveRoute(item.href) \n                        ? \"bg-blue-50 text-blue-700 border-blue-200\" \n                        : \"text-gray-600 hover:text-gray-900 hover:bg-gray-50\"\n                    }`}\n                  >\n                    <Icon className=\"h-4 w-4 mr-3\" />\n                    {item.name}\n                  </Button>\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* Create Collection Button */}\n          <div className=\"p-4\">\n            <Link href=\"/collections\">\n              <Button className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Notebook\n              </Button>\n            </Link>\n          </div>\n        </ScrollArea>\n\n        {/* User Profile Section */}\n        <div className=\"p-4 border-t border-gray-200\">\n          <div className=\"flex items-center space-x-3 mb-3\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src={user && 'user_metadata' in user ? user.user_metadata?.avatar_url : (user as any)?.profileImageUrl} />\n              <AvatarFallback>\n                {user && 'user_metadata' in user \n                  ? (user.user_metadata?.full_name?.[0] || user.email?.[0] || 'U')\n                  : ((user as any)?.firstName?.[0] || (user as any)?.lastName?.[0] || user?.email?.[0] || 'U')\n                }\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-gray-900 truncate\">\n                {user && 'user_metadata' in user \n                  ? (user.user_metadata?.full_name || user.email)\n                  : ((user as any)?.firstName && (user as any)?.lastName \n                    ? `${(user as any)?.firstName} ${(user as any)?.lastName}`\n                    : user?.email\n                  )\n                }\n              </p>\n              <p className=\"text-xs text-gray-500 truncate\">{user?.email}</p>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-1\">\n            <Link href=\"/profile\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"flex-1\">\n                <User className=\"h-4 w-4\" />\n              </Button>\n            </Link>\n            <Button variant=\"ghost\" size=\"sm\" className=\"flex-1\" onClick={handleLogout}>\n              <LogOut className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {children}\n      </div>\n    </div>\n  );\n}","size_bytes":4750},"client/src/components/layout/UnifiedLayout.tsx":{"content":"import { ReactNode, useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Search, \n  Plus, \n  MessageSquare,\n  BarChart3\n} from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useCollections } from \"@/hooks/use-collections\";\n\n\ninterface UnifiedLayoutProps {\n  children: ReactNode;\n  showRightSidebar?: boolean;\n}\n\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\n\nexport function UnifiedLayout({ children, showRightSidebar = false }: UnifiedLayoutProps) {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { data: myCollections = [] } = useCollections();\n\n  const topicTags = [\n    \"JavaScript\", \"React\", \"Machine Learning\", \"Data Science\", \n    \"Web Development\", \"AI\", \"Python\", \"Design Systems\",\n    \"Note-taking\", \"Learning\", \"Philosophy\", \"Psychology\"\n  ];\n\n  const recommendedUsers = [\n    { name: \"Jack Carney\", handle: \"@jackcarney\", verified: false },\n    { name: \"Bobby Powers\", handle: \"@bobpowers\", verified: true },\n    { name: \"Jyotsna Suthar\", handle: \"@jyotsna\", verified: true }\n  ];\n\n  const isActiveRoute = (href: string) => {\n    if (href === \"/\") {\n      return location === \"/\";\n    }\n    return location.startsWith(href);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-purple-50/30 to-blue-50/30\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-lg border-b border-purple-100 sticky top-0 z-40 w-full shadow-sm\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 max-w-7xl\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo and Navigation */}\n            <div className=\"flex items-center space-x-8\">\n              <Link href=\"/\">\n                <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"h-8 w-auto\" />\n              </Link>\n              \n              <nav className=\"hidden md:flex space-x-8\">\n                <Link href=\"/\" className={`px-4 py-2 rounded-lg transition-all ${isActiveRoute(\"/\") ? \"bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium shadow-lg\" : \"text-gray-600 hover:text-purple-600 hover:bg-purple-50\"}`}>\n                  Home\n                </Link>\n                <Link href=\"/my-collections\" className={`px-4 py-2 rounded-lg transition-all ${isActiveRoute(\"/my-collections\") ? \"bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium shadow-lg\" : \"text-gray-600 hover:text-purple-600 hover:bg-purple-50\"}`}>\n                  My Collections\n                </Link>\n                <Link href=\"/discover\" className={`px-4 py-2 rounded-lg transition-all ${isActiveRoute(\"/discover\") ? \"bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium shadow-lg\" : \"text-gray-600 hover:text-purple-600 hover:bg-purple-50\"}`}>\n                  Discover\n                </Link>\n                <Link href=\"/chat\" className={`px-4 py-2 rounded-lg transition-all ${isActiveRoute(\"/chat\") ? \"bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium shadow-lg\" : \"text-gray-600 hover:text-purple-600 hover:bg-purple-50\"}`}>\n                  Chat\n                </Link>\n              </nav>\n            </div>\n\n            {/* Search */}\n            <div className=\"flex-1 max-w-lg mx-8\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  placeholder=\"Search SnappyLearn\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 pr-4 py-2 w-full border-gray-300 rounded-lg\"\n                />\n              </div>\n            </div>\n\n            {/* User Menu */}\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 hover:text-purple-600 hover:bg-purple-50\">\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 hover:text-purple-600 hover:bg-purple-50\">\n                <MessageSquare className=\"h-4 w-4\" />\n              </Button>\n              <Avatar className=\"h-8 w-8 ring-2 ring-purple-200 hover:ring-purple-400 transition-all\">\n                <AvatarImage src={user && 'user_metadata' in user ? user.user_metadata?.avatar_url : (user as any)?.profileImageUrl} />\n                <AvatarFallback className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white\">\n                  {user && 'user_metadata' in user \n                    ? (user.user_metadata?.full_name?.[0] || user.email?.[0] || 'U')\n                    : ((user as any)?.firstName?.[0] || (user as any)?.lastName?.[0] || user?.email?.[0] || 'U')\n                  }\n                </AvatarFallback>\n              </Avatar>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content Container */}\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-6 max-w-7xl\">\n        <div className={`grid grid-cols-1 gap-6 ${showRightSidebar ? 'lg:grid-cols-4' : 'lg:grid-cols-4'}`}>\n          {/* Left Sidebar */}\n          <div className=\"lg:col-span-1 space-y-6 w-full\">\n            {/* Your Topics */}\n            <Card className=\"w-full gradient-card border-purple-100 shadow-lg hover:shadow-xl transition-all\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"font-semibold text-gray-900\">Your Topics</h3>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-purple-600 hover:text-purple-700 hover:bg-purple-50\">Edit</Button>\n                </div>\n                <div className=\"space-y-2\">\n                  <Badge variant=\"secondary\" className=\"mr-2 mb-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white border-0\">All</Badge>\n                  {myCollections.slice(0, 3).map(collection => (\n                    <Badge key={collection.id} variant=\"outline\" className=\"mr-2 mb-2 border-purple-200 text-purple-700 hover:bg-purple-50\">\n                      {collection.name}\n                    </Badge>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recommended Topics */}\n            <Card className=\"w-full gradient-card border-purple-100 shadow-lg hover:shadow-xl transition-all\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-4\">Recommended Topics</h3>\n                <div className=\"space-y-2\">\n                  {topicTags.slice(0, 6).map(tag => (\n                    <Badge key={tag} variant=\"outline\" className=\"mr-2 mb-2 text-xs border-purple-200 text-purple-700 hover:bg-purple-50\">\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Who to Follow */}\n            <Card className=\"w-full gradient-card border-purple-100 shadow-lg hover:shadow-xl transition-all\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-4\">Who to Follow</h3>\n                <div className=\"space-y-3\">\n                  {recommendedUsers.map((recUser) => (\n                    <div key={recUser.handle} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Avatar className=\"h-8 w-8 ring-2 ring-purple-200\">\n                          <AvatarFallback className=\"bg-gradient-to-r from-purple-500 to-blue-500 text-white\">\n                            {recUser.name.charAt(0)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <div className=\"flex items-center space-x-1\">\n                            <span className=\"font-medium text-gray-900\">{recUser.name}</span>\n                            {recUser.verified && (\n                              <span className=\"text-purple-500 text-xs\">✓</span>\n                            )}\n                          </div>\n                          <span className=\"text-sm text-gray-500\">{recUser.handle}</span>\n                        </div>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\" className=\"border-purple-200 text-purple-700 hover:bg-purple-50\">\n                        Follow\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className={`space-y-6 ${showRightSidebar ? 'lg:col-span-2' : 'lg:col-span-3'}`}>\n            {children}\n          </div>\n\n          {/* Right Sidebar - Only show on home page */}\n          {showRightSidebar && (\n            <div className=\"lg:col-span-1 space-y-6 w-full\">\n              {/* Trending Topics */}\n              <Card className=\"w-full gradient-card border-purple-100 shadow-lg hover:shadow-xl transition-all\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold text-gray-900 mb-4\">Trending Now</h3>\n                  <div className=\"space-y-3\">\n                    {topicTags.slice(6, 10).map((tag, index) => (\n                      <div key={tag} className=\"flex items-center justify-between p-2 rounded-lg hover:bg-purple-50 transition-colors\">\n                        <div>\n                          <div className=\"font-medium text-gray-900\">{tag}</div>\n                          <div className=\"text-sm text-gray-500\">{Math.floor(Math.random() * 1000)} highlights</div>\n                        </div>\n                        <div className=\"flex items-center text-purple-400\">\n                          <BarChart3 className=\"h-4 w-4\" />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Community Stats */}\n              <Card className=\"w-full gradient-card border-purple-100 shadow-lg hover:shadow-xl transition-all\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold text-gray-900 mb-4\">Community</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between p-2 rounded-lg hover:bg-purple-50 transition-colors\">\n                      <span className=\"text-gray-600\">Total Members</span>\n                      <span className=\"font-semibold text-purple-700\">12.4K</span>\n                    </div>\n                    <div className=\"flex justify-between p-2 rounded-lg hover:bg-purple-50 transition-colors\">\n                      <span className=\"text-gray-600\">Active Today</span>\n                      <span className=\"font-semibold text-purple-700\">234</span>\n                    </div>\n                    <div className=\"flex justify-between p-2 rounded-lg hover:bg-purple-50 transition-colors\">\n                      <span className=\"text-gray-600\">Highlights Shared</span>\n                      <span className=\"font-semibold text-purple-700\">1.2K</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </div>\n\n    </div>\n  );\n}","size_bytes":11838},"client/src/components/posts/CreatePostForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Plus, X } from \"lucide-react\";\nimport type { Topic } from \"@shared/schema\";\n\ninterface CreatePostFormProps {\n  onSuccess?: () => void;\n  onCancel?: () => void;\n  isModal?: boolean;\n}\n\nexport function CreatePostForm({ onSuccess, onCancel, isModal = true }: CreatePostFormProps) {\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [topicId, setTopicId] = useState<string>(\"\");\n  const [isExpanded, setIsExpanded] = useState(!isModal);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: topics = [] } = useQuery<Topic[]>({\n    queryKey: [\"/api/topics\"],\n  });\n\n  const createPostMutation = useMutation({\n    mutationFn: async (data: { title?: string; content: string; topicId?: number }) => {\n      return await apiRequest(\"/api/posts\", \"POST\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Your post has been created!\",\n      });\n      \n      // Reset form\n      setTitle(\"\");\n      setContent(\"\");\n      setTopicId(\"\");\n      setIsExpanded(!isModal);\n      \n      // Invalidate and refetch posts\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      \n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!content.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter some content for your post\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createPostMutation.mutate({\n      title: title.trim() || undefined,\n      content: content.trim(),\n      topicId: topicId ? parseInt(topicId) : undefined,\n    });\n  };\n\n  const handleCancel = () => {\n    setTitle(\"\");\n    setContent(\"\");\n    setTopicId(\"\");\n    setIsExpanded(!isModal);\n    onCancel?.();\n  };\n\n  if (!isExpanded) {\n    return (\n      <Card className=\"mb-6\">\n        <CardContent className=\"pt-6\">\n          <Button\n            onClick={() => setIsExpanded(true)}\n            className=\"w-full justify-start text-left h-12 bg-muted hover:bg-muted/80\"\n            variant=\"ghost\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Share your thoughts...\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n        <CardTitle className=\"text-lg\">Create Post</CardTitle>\n        {isModal && (\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleCancel}\n            className=\"h-8 w-8\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <Input\n            placeholder=\"Post title (optional)\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            maxLength={200}\n          />\n          \n          <Textarea\n            placeholder=\"What's on your mind? Share your thoughts, insights, or questions...\"\n            value={content}\n            onChange={(e) => setContent(e.target.value)}\n            className=\"min-h-[120px] resize-none\"\n            maxLength={2000}\n          />\n          \n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <Select value={topicId} onValueChange={setTopicId}>\n              <SelectTrigger className=\"sm:w-[200px]\">\n                <SelectValue placeholder=\"Select topic (optional)\" />\n              </SelectTrigger>\n              <SelectContent>\n                {topics.map((topic) => (\n                  <SelectItem key={topic.id} value={topic.id.toString()}>\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className=\"w-3 h-3 rounded-full\" \n                        style={{ backgroundColor: topic.color || '#6366f1' }}\n                      />\n                      {topic.name}\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <div className=\"flex gap-2 sm:ml-auto\">\n              {isModal && (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleCancel}\n                  disabled={createPostMutation.isPending}\n                >\n                  Cancel\n                </Button>\n              )}\n              <Button\n                type=\"submit\"\n                disabled={createPostMutation.isPending || !content.trim()}\n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n              >\n                {createPostMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Posting...\n                  </>\n                ) : (\n                  'Post'\n                )}\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            {content.length}/2000 characters\n            {!topicId && (\n              <span className=\"ml-2\">• AI will suggest a topic if none selected</span>\n            )}\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6212},"client/src/components/posts/PostCard.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Heart, \n  MessageCircle, \n  Bookmark, \n  Share, \n  MoreHorizontal,\n  Clock,\n  User\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { PostWithDetails } from \"@shared/schema\";\nimport { BookmarkPopover } from \"@/components/BookmarkPopover\";\n\ninterface PostCardProps {\n  post: PostWithDetails;\n}\n\nexport function PostCard({ post }: PostCardProps) {\n  const [showFullContent, setShowFullContent] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const likePostMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(`/api/posts/${post.id}/like`, \"POST\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to like post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove the old bookmark mutation since we're using the popover now\n\n  const repostMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(`/api/posts/${post.id}/repost`, \"POST\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Post reposted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to repost\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getInitials = (firstName?: string | null, lastName?: string | null) => {\n    const first = firstName?.charAt(0) || '';\n    const last = lastName?.charAt(0) || '';\n    return first + last || 'U';\n  };\n\n  const displayName = post.author?.firstName && post.author?.lastName \n    ? `${post.author.firstName} ${post.author.lastName}`\n    : post.author?.firstName || 'Anonymous User';\n\n  const shouldTruncate = post.content.length > 300;\n  const displayContent = shouldTruncate && !showFullContent \n    ? post.content.substring(0, 300) + '...' \n    : post.content;\n\n  return (\n    <Card \n      className=\"mb-4 hover:shadow-md transition-shadow cursor-pointer\"\n      onClick={(e) => {\n        // Don't navigate if clicking on interactive elements\n        if (\n          (e.target as HTMLElement).closest('button') ||\n          (e.target as HTMLElement).closest('a') ||\n          (e.target as HTMLElement).closest('[data-radix-popper-content-wrapper]')\n        ) {\n          return;\n        }\n        setLocation(`/posts/${post.id}`);\n      }}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarImage src={post.author?.profileImageUrl || undefined} />\n              <AvatarFallback className=\"bg-gradient-to-br from-purple-500 to-blue-500 text-white\">\n                {getInitials(post.author?.firstName, post.author?.lastName)}\n              </AvatarFallback>\n            </Avatar>\n            \n            <div>\n              <div className=\"flex items-center gap-2\">\n                <h3 className=\"font-semibold text-sm\">{displayName}</h3>\n                {post.userActions?.isFollowing && (\n                  <Badge variant=\"secondary\" className=\"text-xs px-2 py-0\">\n                    Following\n                  </Badge>\n                )}\n              </div>\n              <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                <Clock className=\"w-3 h-3\" />\n                {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}\n                {post.topic && (\n                  <>\n                    <span>•</span>\n                    <Badge \n                      variant=\"outline\" \n                      className=\"text-xs\"\n                      style={{ \n                        borderColor: post.topic.color || '#6366f1',\n                        color: post.topic.color || '#6366f1'\n                      }}\n                    >\n                      {post.topic.name}\n                    </Badge>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pt-0\">\n        {post.title && (\n          <h2 className=\"font-semibold text-lg mb-3 leading-tight\">\n            {post.title}\n          </h2>\n        )}\n        \n        <div className=\"prose prose-sm max-w-none mb-4\">\n          <p className=\"whitespace-pre-wrap text-foreground leading-relaxed\">\n            {displayContent}\n          </p>\n          {shouldTruncate && (\n            <Button\n              variant=\"link\"\n              className=\"p-0 h-auto text-sm text-primary\"\n              onClick={() => setShowFullContent(!showFullContent)}\n            >\n              {showFullContent ? 'Show less' : 'Read more'}\n            </Button>\n          )}\n        </div>\n        \n        <div className=\"flex items-center justify-between pt-3 border-t\">\n          <div className=\"flex items-center gap-6\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={`gap-2 ${post.userActions?.isLiked ? 'text-red-500 hover:text-red-600' : ''}`}\n              onClick={() => likePostMutation.mutate()}\n              disabled={likePostMutation.isPending}\n            >\n              <Heart className={`w-4 h-4 ${post.userActions?.isLiked ? 'fill-current' : ''}`} />\n              {post.stats.likeCount > 0 && (\n                <span className=\"text-sm\">{post.stats.likeCount}</span>\n              )}\n            </Button>\n            \n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"gap-2\"\n              onClick={() => setLocation(`/posts/${post.id}`)}\n            >\n              <MessageCircle className=\"w-4 h-4\" />\n              {post.stats.commentCount > 0 && (\n                <span className=\"text-sm\">{post.stats.commentCount}</span>\n              )}\n            </Button>\n            \n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"gap-2\"\n              onClick={() => repostMutation.mutate()}\n              disabled={repostMutation.isPending || post.userActions?.isReposted}\n            >\n              <Share className=\"w-4 h-4\" />\n              {post.stats.repostCount > 0 && (\n                <span className=\"text-sm\">{post.stats.repostCount}</span>\n              )}\n            </Button>\n          </div>\n          \n          <BookmarkPopover\n            postId={post.id}\n            postTitle={post.title || 'Untitled Post'}\n            postContent={post.content}\n            isBookmarked={post.userActions?.isBookmarked}\n          >\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={`${post.userActions?.isBookmarked ? 'text-blue-500 hover:text-blue-600' : ''}`}\n            >\n              <Bookmark className={`w-4 h-4 ${post.userActions?.isBookmarked ? 'fill-current' : ''}`} />\n            </Button>\n          </BookmarkPopover>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8059},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/layout/TwitterStyleLayout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Home, \n  Compass, \n  FolderOpen, \n  MessageSquare, \n  Sparkles,\n  User,\n  Settings,\n  LogOut,\n  Plus,\n  Users,\n  BookOpen,\n  TrendingUp,\n  CheckSquare,\n  Bot\n} from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface TwitterStyleLayoutProps {\n  children: ReactNode;\n  currentCollectionId?: number;\n}\n\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\n\nexport function TwitterStyleLayout({ children, currentCollectionId }: TwitterStyleLayoutProps) {\n  const [location] = useLocation();\n  const { user, signOut } = useAuth();\n\n  // Fetch collections data for the sidebar\n  const { data: collections = [] } = useQuery({\n    queryKey: ['/api/collections'],\n    enabled: !!user,\n  });\n\n\n  // Left sidebar navigation items\n  const navigation = [\n    { name: \"Home\", href: \"/\", icon: Home },\n    { name: \"Discover\", href: \"/discover\", icon: Compass },\n    { name: \"Chat\", href: \"/chat\", icon: MessageSquare },\n    { name: \"Agents\", href: \"/agents\", icon: Bot },\n    { name: \"Notebooks\", href: \"/collections\", icon: FolderOpen },\n    { name: \"Communities\", href: \"/communities\", icon: Users },\n    { name: \"Tasks\", href: \"/tasks\", icon: CheckSquare },\n    { name: \"Profile\", href: \"/profile\", icon: User },\n    { name: \"Settings\", href: \"/settings\", icon: Settings },\n  ];\n\n  const isActiveRoute = (href: string) => {\n    if (href === \"/\") {\n      return location === \"/\";\n    }\n    return location.startsWith(href);\n  };\n\n  const handleLogout = async () => {\n    await signOut();\n  };\n\n  // Fetch data for right sidebar\n  const { data: topics = [] } = useQuery({\n    queryKey: ['/api/topics'],\n  });\n\n  const { data: posts = [] } = useQuery({\n    queryKey: ['/api/posts'],\n  });\n\n  const { data: conversations = [] } = useQuery({\n    queryKey: ['/api/conversations'],\n    enabled: location === '/chat' || location.startsWith('/conversations/'),\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-6xl mx-auto flex\">\n        {/* Left Sidebar - Navigation */}\n        <div className=\"w-64 bg-white border-r border-gray-200 flex flex-col h-screen sticky top-0\">\n          {/* Logo */}\n          <div className=\"p-4 border-b border-gray-200\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\">\n              <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"h-8 w-auto\" />\n            </Link>\n          </div>\n\n          {/* Navigation */}\n          <ScrollArea className=\"flex-1\">\n            <nav className=\"p-4 space-y-1\">\n              {navigation.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <Link key={item.name} href={item.href}>\n                    <Button\n                      variant={isActiveRoute(item.href) ? \"secondary\" : \"ghost\"}\n                      className={`w-full justify-start text-left h-12 text-base ${\n                        isActiveRoute(item.href) \n                          ? \"bg-purple-50 text-purple-700 border border-purple-200 font-medium\" \n                          : \"text-gray-600 hover:text-gray-900 hover:bg-gray-50\"\n                      }`}\n                    >\n                      <Icon className=\"h-5 w-5 mr-4\" />\n                      {item.name}\n                    </Button>\n                  </Link>\n                );\n              })}\n            </nav>\n\n            {/* Create Button */}\n            <div className=\"p-4\">\n              <Link href={currentCollectionId ? `/chat?collectionId=${currentCollectionId}` : \"/chat\"}>\n                <Button className=\"w-full bg-purple-600 hover:bg-purple-700 text-white h-12 text-base font-medium rounded-full\">\n                  <Plus className=\"h-5 w-5 mr-2\" />\n                  Start Chat\n                </Button>\n              </Link>\n            </div>\n          </ScrollArea>\n\n          {/* User Profile Section */}\n          <div className=\"p-4 border-t border-gray-200\">\n            <div className=\"flex items-center space-x-3 mb-3\">\n              <Avatar className=\"h-10 w-10\">\n                <AvatarImage src={user?.profileImageUrl || undefined} />\n                <AvatarFallback className=\"bg-gradient-to-br from-purple-500 to-blue-500 text-white\">\n                  {user?.firstName?.[0] || user?.email?.[0] || 'U'}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-gray-900 truncate\">\n                  {user?.firstName && user?.lastName \n                    ? `${user.firstName} ${user.lastName}`\n                    : user?.email}\n                </p>\n                <p className=\"text-xs text-gray-500 truncate\">\n                  {user?.email}\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={handleLogout}\n              className=\"w-full text-sm\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Sign Out\n            </Button>\n          </div>\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 max-w-2xl\">\n          <main className=\"py-6 px-4\">\n            {children}\n          </main>\n        </div>\n\n        {/* Right Sidebar - Social Features */}\n        <div className=\"w-80 bg-white border-l border-gray-200 h-screen sticky top-0\">\n          <ScrollArea className=\"h-full\">\n            <div className=\"p-4 space-y-6\">\n              \n              {/* Recent Chats - show on chat page and conversation detail pages */}\n              {(location === '/chat' || location.startsWith('/conversations/')) && (\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg font-semibold\">Recent Chats</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {conversations.length > 0 ? (\n                      conversations.slice(0, 3).map((conversation: any) => (\n                        <Link key={conversation.id} href={`/conversations/${conversation.id}`}>\n                          <div className=\"cursor-pointer hover:bg-gray-50 p-2 rounded-lg\">\n                            <p className=\"text-sm font-medium text-gray-900 line-clamp-1 mb-1\">\n                              {conversation.title?.replace(/\"/g, '') || 'Untitled Conversation'}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {conversation.type === 'collection' ? 'Collection Chat' : 'Independent Chat'} • {new Date(conversation.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </Link>\n                      ))\n                    ) : (\n                      <p className=\"text-sm text-gray-500 text-center py-4\">\n                        No conversations yet. Start a new chat!\n                      </p>\n                    )}\n                    <Link href={currentCollectionId ? `/chat?collectionId=${currentCollectionId}` : \"/chat\"}>\n                      <Button variant=\"link\" className=\"w-full text-purple-600 text-sm\">\n                        Start new chat\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Trending Posts */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg font-semibold\">Trending Posts</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {posts.slice(0, 3).map((post: any, index: number) => (\n                    <div key={post.id || index} className=\"cursor-pointer hover:bg-gray-50 p-2 rounded-lg\">\n                      <p className=\"text-sm font-medium text-gray-900 line-clamp-2 mb-1\">\n                        {post.title || \"Interesting discussion about the future of AI\"}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {post.stats?.likeCount || Math.floor(Math.random() * 100)} likes • {post.stats?.commentCount || Math.floor(Math.random() * 20)} comments\n                      </p>\n                    </div>\n                  ))}\n                  {posts.length === 0 && (\n                    <>\n                      <div className=\"cursor-pointer hover:bg-gray-50 p-2 rounded-lg\">\n                        <p className=\"text-sm font-medium text-gray-900 line-clamp-2 mb-1\">\n                          The Future of AI in Education\n                        </p>\n                        <p className=\"text-xs text-gray-500\">42 likes • 8 comments</p>\n                      </div>\n                      <div className=\"cursor-pointer hover:bg-gray-50 p-2 rounded-lg\">\n                        <p className=\"text-sm font-medium text-gray-900 line-clamp-2 mb-1\">\n                          Building Better Learning Experiences\n                        </p>\n                        <p className=\"text-xs text-gray-500\">28 likes • 5 comments</p>\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Recent Notebooks */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                    <FolderOpen className=\"w-5 h-5\" />\n                    Recent Notebooks\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {collections.length > 0 ? (\n                    collections.slice(0, 3).map((collection: any) => (\n                      <div key={collection.id} className=\"flex items-center justify-between p-2 rounded-lg hover:bg-gray-50\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                            <FolderOpen className=\"w-4 h-4 text-blue-600\" />\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium text-gray-900 line-clamp-1\">\n                              {collection.name}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {collection.documentCount || 0} documents\n                            </p>\n                          </div>\n                        </div>\n                        <Link href={`/collections/${collection.id}`}>\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                            View\n                          </Button>\n                        </Link>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-sm text-gray-500 text-center py-4\">\n                      No notebooks yet. Create your first notebook!\n                    </p>\n                  )}\n                  <Link href=\"/collections\">\n                    <Button variant=\"link\" className=\"w-full text-purple-600 text-sm\">\n                      View All Collections\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              {/* Who to Follow */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg font-semibold\">Who to follow</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {/* Mock users - replace with real data */}\n                  {[\n                    { name: \"Dr. Sarah Chen\", handle: \"@sarahchen\", avatar: \"/avatars/sarah.jpg\", followers: \"2.4K followers\" },\n                    { name: \"Mark Rodriguez\", handle: \"@markrod\", avatar: \"/avatars/mark.jpg\", followers: \"1.8K followers\" },\n                    { name: \"Alex Kim\", handle: \"@alexkim\", avatar: \"/avatars/alex.jpg\", followers: \"3.1K followers\" }\n                  ].map((person, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-500 text-white\">\n                            {person.name.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">{person.name}</p>\n                          <p className=\"text-xs text-gray-500\">{person.followers}</p>\n                        </div>\n                      </div>\n                      <Button size=\"sm\" variant=\"outline\" className=\"rounded-full\">\n                        Follow\n                      </Button>\n                    </div>\n                  ))}\n                  <Button variant=\"link\" className=\"w-full text-purple-600 text-sm\">\n                    Show more\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Recommended Topics */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg font-semibold\">Recommended Topics</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {topics.slice(0, 6).map((topic: any) => (\n                      <Badge \n                        key={topic.id} \n                        variant=\"secondary\" \n                        className=\"cursor-pointer hover:bg-purple-100 hover:text-purple-700\"\n                      >\n                        {topic.name}\n                      </Badge>\n                    ))}\n                    {topics.length === 0 && (\n                      <>\n                        <Badge variant=\"secondary\" className=\"cursor-pointer hover:bg-purple-100\">AI & Machine Learning</Badge>\n                        <Badge variant=\"secondary\" className=\"cursor-pointer hover:bg-purple-100\">Startups</Badge>\n                        <Badge variant=\"secondary\" className=\"cursor-pointer hover:bg-purple-100\">Design</Badge>\n                        <Badge variant=\"secondary\" className=\"cursor-pointer hover:bg-purple-100\">Philosophy</Badge>\n                        <Badge variant=\"secondary\" className=\"cursor-pointer hover:bg-purple-100\">Science</Badge>\n                        <Badge variant=\"secondary\" className=\"cursor-pointer hover:bg-purple-100\">Education</Badge>\n                      </>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Your Topics */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg font-semibold\">Your Topics</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {/* Mock user topics - replace with real data */}\n                    {[\n                      { name: \"AI Research\", posts: 15, icon: TrendingUp },\n                      { name: \"Product Design\", posts: 8, icon: BookOpen },\n                      { name: \"Leadership\", posts: 12, icon: Users }\n                    ].map((topic, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center\">\n                            <topic.icon className=\"w-4 h-4 text-purple-600\" />\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium text-gray-900\">{topic.name}</p>\n                            <p className=\"text-xs text-gray-500\">{topic.posts} posts</p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                    <Button variant=\"link\" className=\"w-full text-purple-600 text-sm\">\n                      Explore more topics\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Community Stats */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg font-semibold\">Community</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-500\">Posts</span>\n                    <span className=\"font-semibold\">{posts.length}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-500\">Topics</span>\n                    <span className=\"font-semibold\">{topics.length}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-500\">Active Today</span>\n                    <span className=\"font-semibold\">1</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n            </div>\n          </ScrollArea>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18191},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { User, Edit3, Save, X, Camera, Bell, Shield, Sun, Download, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { TwitterStyleLayout } from \"@/components/layout/TwitterStyleLayout\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst profileSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n});\n\nconst settingsSchema = z.object({\n  emailNotifications: z.boolean(),\n  pushNotifications: z.boolean(),\n  weeklyDigest: z.boolean(),\n  theme: z.enum([\"light\", \"dark\", \"system\"]),\n  language: z.string(),\n  timezone: z.string(),\n  dataRetention: z.string(),\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\ntype SettingsFormData = z.infer<typeof settingsSchema>;\n\nexport default function Profile() {\n  const { user, updateUser, signOut } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [selectedTab, setSelectedTab] = useState(\"general\");\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      email: user?.email || \"\",\n    },\n  });\n\n  const settingsForm = useForm<SettingsFormData>({\n    resolver: zodResolver(settingsSchema),\n    defaultValues: {\n      emailNotifications: true,\n      pushNotifications: false,\n      weeklyDigest: true,\n      theme: \"light\",\n      language: \"en\",\n      timezone: \"UTC\",\n      dataRetention: \"1year\",\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileFormData) => {\n      return apiRequest(`/api/users/profile`, {\n        method: \"PATCH\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: (updatedUser) => {\n      updateUser(updatedUser);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setIsEditing(false);\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: SettingsFormData) => {\n      return apiRequest(`/api/users/settings`, {\n        method: \"PATCH\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Settings updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAccountMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(`/api/users/account`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account Deleted\",\n        description: \"Your account has been permanently deleted\",\n      });\n      signOut();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const exportDataMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(`/api/users/export`, {\n        method: \"GET\",\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      // Create and download the data export\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `snappylearn-data-export-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: \"Your data has been exported and downloaded\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to export data\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: ProfileFormData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const handleCancel = () => {\n    form.reset({\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      email: user?.email || \"\",\n    });\n    setIsEditing(false);\n  };\n\n  const handleSettingsSubmit = (data: SettingsFormData) => {\n    updateSettingsMutation.mutate(data);\n  };\n\n  const handleDeleteAccount = () => {\n    deleteAccountMutation.mutate();\n    setShowDeleteDialog(false);\n  };\n\n  const handleExportData = () => {\n    exportDataMutation.mutate();\n  };\n\n  const getInitials = (firstName?: string, lastName?: string) => {\n    return `${firstName?.[0] || \"\"}${lastName?.[0] || \"\"}`.toUpperCase();\n  };\n\n  return (\n    <TwitterStyleLayout>\n      <div className=\"max-w-2xl mx-auto space-y-6\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Profile</h1>\n          <p className=\"text-gray-600\">Manage your account information and preferences</p>\n        </div>\n\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"general\">General</TabsTrigger>\n            <TabsTrigger value=\"preferences\">Preferences</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"general\" className=\"space-y-6\">\n            {/* Profile Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  Personal Information\n                  {!isEditing && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setIsEditing(true)}\n                    >\n                      <Edit3 className=\"w-4 h-4 mr-2\" />\n                      Edit\n                    </Button>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Profile Picture Section */}\n                <div className=\"flex items-center space-x-4\">\n                  <Avatar className=\"w-20 h-20\">\n                    <AvatarImage \n                      src={user?.profileImageUrl} \n                      alt={`${user?.firstName} ${user?.lastName}`} \n                    />\n                    <AvatarFallback className=\"text-lg font-semibold bg-primary text-white\">\n                      {getInitials(user?.firstName, user?.lastName)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">\n                      {user?.firstName} {user?.lastName}\n                    </h3>\n                    <p className=\"text-gray-600\">{user?.email}</p>\n                    <Button variant=\"outline\" size=\"sm\" className=\"mt-2\" disabled>\n                      <Camera className=\"w-4 h-4 mr-2\" />\n                      Change Photo\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Profile Form */}\n                {isEditing ? (\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex items-center space-x-3 pt-4\">\n                        <Button\n                          type=\"submit\"\n                          disabled={updateProfileMutation.isPending}\n                          className=\"bg-primary hover:bg-primary/90\"\n                        >\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={handleCancel}\n                          disabled={updateProfileMutation.isPending}\n                        >\n                          <X className=\"w-4 h-4 mr-2\" />\n                          Cancel\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-900\">First Name</Label>\n                        <p className=\"mt-1 text-gray-700\">{user?.firstName || \"Not set\"}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-900\">Last Name</Label>\n                        <p className=\"mt-1 text-gray-700\">{user?.lastName || \"Not set\"}</p>\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-900\">Email</Label>\n                      <p className=\"mt-1 text-gray-700\">{user?.email || \"Not set\"}</p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Account Details */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Account Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-900\">User ID</Label>\n                  <p className=\"mt-1 text-gray-700 font-mono text-sm\">{user?.id}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-900\">Role</Label>\n                  <p className=\"mt-1 text-gray-700 capitalize\">{user?.role || \"user\"}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-900\">Member Since</Label>\n                  <p className=\"mt-1 text-gray-700\">\n                    {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : \"Unknown\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-900\">Last Updated</Label>\n                  <p className=\"mt-1 text-gray-700\">\n                    {user?.updatedAt ? new Date(user.updatedAt).toLocaleDateString() : \"Unknown\"}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"preferences\" className=\"space-y-6\">\n            <Form {...settingsForm}>\n              <form onSubmit={settingsForm.handleSubmit(handleSettingsSubmit)} className=\"space-y-6\">\n                {/* Notifications */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Bell className=\"w-5 h-5 mr-2\" />\n                      Notifications\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <FormField\n                      control={settingsForm.control}\n                      name=\"emailNotifications\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-center justify-between\">\n                          <div>\n                            <FormLabel>Email Notifications</FormLabel>\n                            <FormDescription>\n                              Receive notifications about new messages and updates\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={settingsForm.control}\n                      name=\"pushNotifications\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-center justify-between\">\n                          <div>\n                            <FormLabel>Push Notifications</FormLabel>\n                            <FormDescription>\n                              Receive push notifications on your device\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={settingsForm.control}\n                      name=\"weeklyDigest\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-center justify-between\">\n                          <div>\n                            <FormLabel>Weekly Digest</FormLabel>\n                            <FormDescription>\n                              Receive a weekly summary of your activity\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </CardContent>\n                </Card>\n\n                {/* Appearance */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Sun className=\"w-5 h-5 mr-2\" />\n                      Appearance\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <FormField\n                      control={settingsForm.control}\n                      name=\"theme\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Theme</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a theme\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"light\">Light</SelectItem>\n                              <SelectItem value=\"dark\">Dark</SelectItem>\n                              <SelectItem value=\"system\">System</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormDescription>\n                            Choose how the interface appears to you\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={settingsForm.control}\n                      name=\"language\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Language</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a language\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"en\">English</SelectItem>\n                              <SelectItem value=\"es\">Spanish</SelectItem>\n                              <SelectItem value=\"fr\">French</SelectItem>\n                              <SelectItem value=\"de\">German</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </CardContent>\n                </Card>\n\n                {/* Privacy & Security */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Shield className=\"w-5 h-5 mr-2\" />\n                      Privacy & Security\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <FormField\n                      control={settingsForm.control}\n                      name=\"dataRetention\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Data Retention</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select retention period\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"3months\">3 Months</SelectItem>\n                              <SelectItem value=\"6months\">6 Months</SelectItem>\n                              <SelectItem value=\"1year\">1 Year</SelectItem>\n                              <SelectItem value=\"forever\">Forever</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormDescription>\n                            How long to keep your conversation history\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </CardContent>\n                </Card>\n\n                {/* Save Settings Button */}\n                <div className=\"flex justify-end\">\n                  <Button\n                    type=\"submit\"\n                    disabled={updateSettingsMutation.isPending}\n                    className=\"bg-primary hover:bg-primary/90\"\n                  >\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    {updateSettingsMutation.isPending ? \"Saving...\" : \"Save Settings\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n\n            {/* Data Management */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Data Management</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">Export Data</h4>\n                    <p className=\"text-sm text-gray-600\">Download all your data in JSON format</p>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleExportData}\n                    disabled={exportDataMutation.isPending}\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    {exportDataMutation.isPending ? \"Exporting...\" : \"Export\"}\n                  </Button>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium text-red-900\">Delete Account</h4>\n                    <p className=\"text-sm text-red-600\">Permanently delete your account and all data</p>\n                  </div>\n                  <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n                    <AlertDialogTrigger asChild>\n                      <Button variant=\"destructive\">\n                        <Trash2 className=\"w-4 h-4 mr-2\" />\n                        Delete Account\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          This action cannot be undone. This will permanently delete your account\n                          and remove all your data from our servers including collections, conversations, \n                          documents, and artifacts.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={handleDeleteAccount}\n                          className=\"bg-red-600 hover:bg-red-700\"\n                          disabled={deleteAccountMutation.isPending}\n                        >\n                          {deleteAccountMutation.isPending ? \"Deleting...\" : \"Delete Account\"}\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </TwitterStyleLayout>\n  );\n}","size_bytes":25538},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Settings as SettingsIcon, \n  Bell, \n  Shield, \n  Trash2, \n  Download,\n  Moon,\n  Sun,\n  Globe,\n  Lock,\n  Mail,\n  Save\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { TwitterStyleLayout } from \"@/components/layout/TwitterStyleLayout\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst settingsSchema = z.object({\n  emailNotifications: z.boolean(),\n  pushNotifications: z.boolean(),\n  weeklyDigest: z.boolean(),\n  theme: z.enum([\"light\", \"dark\", \"system\"]),\n  language: z.string(),\n  timezone: z.string(),\n  dataRetention: z.string(),\n});\n\ntype SettingsFormData = z.infer<typeof settingsSchema>;\n\nexport default function Settings() {\n  const { user, signOut } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n\n  const form = useForm<SettingsFormData>({\n    resolver: zodResolver(settingsSchema),\n    defaultValues: {\n      emailNotifications: true,\n      pushNotifications: false,\n      weeklyDigest: true,\n      theme: \"light\",\n      language: \"en\",\n      timezone: \"UTC\",\n      dataRetention: \"1year\",\n    },\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: SettingsFormData) => {\n      return apiRequest(`/api/users/settings`, {\n        method: \"PATCH\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Settings updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAccountMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(`/api/users/account`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account Deleted\",\n        description: \"Your account has been permanently deleted\",\n      });\n      signOut();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const exportDataMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(`/api/users/export`, {\n        method: \"GET\",\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      // Create and download the data export\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `snappylearn-data-export-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: \"Your data has been exported and downloaded\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to export data\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: SettingsFormData) => {\n    updateSettingsMutation.mutate(data);\n  };\n\n  const handleDeleteAccount = () => {\n    deleteAccountMutation.mutate();\n    setShowDeleteDialog(false);\n  };\n\n  const handleExportData = () => {\n    exportDataMutation.mutate();\n  };\n\n  return (\n    <TwitterStyleLayout>\n      <div className=\"max-w-2xl mx-auto space-y-6\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Settings</h1>\n          <p className=\"text-gray-600\">Manage your account preferences and privacy settings</p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            {/* Notifications */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Bell className=\"w-5 h-5 mr-2\" />\n                  Notifications\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"emailNotifications\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between\">\n                      <div>\n                        <FormLabel>Email Notifications</FormLabel>\n                        <FormDescription>\n                          Receive notifications about new messages and updates\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"pushNotifications\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between\">\n                      <div>\n                        <FormLabel>Push Notifications</FormLabel>\n                        <FormDescription>\n                          Receive push notifications on your device\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"weeklyDigest\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between\">\n                      <div>\n                        <FormLabel>Weekly Digest</FormLabel>\n                        <FormDescription>\n                          Receive a weekly summary of your activity\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Appearance */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Sun className=\"w-5 h-5 mr-2\" />\n                  Appearance\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"theme\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Theme</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a theme\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"light\">Light</SelectItem>\n                          <SelectItem value=\"dark\">Dark</SelectItem>\n                          <SelectItem value=\"system\">System</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Choose how the interface appears to you\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"language\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Language</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a language\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"en\">English</SelectItem>\n                          <SelectItem value=\"es\">Spanish</SelectItem>\n                          <SelectItem value=\"fr\">French</SelectItem>\n                          <SelectItem value=\"de\">German</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Privacy & Security */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Shield className=\"w-5 h-5 mr-2\" />\n                  Privacy & Security\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"dataRetention\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Data Retention</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select retention period\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"3months\">3 Months</SelectItem>\n                          <SelectItem value=\"6months\">6 Months</SelectItem>\n                          <SelectItem value=\"1year\">1 Year</SelectItem>\n                          <SelectItem value=\"forever\">Forever</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        How long to keep your conversation history\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Save Settings Button */}\n            <div className=\"flex justify-end\">\n              <Button\n                type=\"submit\"\n                disabled={updateSettingsMutation.isPending}\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {updateSettingsMutation.isPending ? \"Saving...\" : \"Save Settings\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n\n        {/* Data Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Data Management</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h4 className=\"font-medium text-gray-900\">Export Data</h4>\n                <p className=\"text-sm text-gray-600\">Download all your data in JSON format</p>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={handleExportData}\n                disabled={exportDataMutation.isPending}\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                {exportDataMutation.isPending ? \"Exporting...\" : \"Export\"}\n              </Button>\n            </div>\n            \n            <Separator />\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h4 className=\"font-medium text-red-900\">Delete Account</h4>\n                <p className=\"text-sm text-red-600\">Permanently delete your account and all data</p>\n              </div>\n              <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n                <AlertDialogTrigger asChild>\n                  <Button variant=\"destructive\">\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                    Delete Account\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      This action cannot be undone. This will permanently delete your account\n                      and remove all your data from our servers including collections, conversations, \n                      documents, and artifacts.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction\n                      onClick={handleDeleteAccount}\n                      className=\"bg-red-600 hover:bg-red-700\"\n                      disabled={deleteAccountMutation.isPending}\n                    >\n                      {deleteAccountMutation.isPending ? \"Deleting...\" : \"Delete Account\"}\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </TwitterStyleLayout>\n  );\n}","size_bytes":15226},"client/src/components/BookmarkPopover.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Bookmark, Plus, Folder } from \"lucide-react\";\nimport type { Collection } from \"@shared/schema\";\n\ninterface BookmarkPopoverProps {\n  postId: number;\n  postTitle: string;\n  postContent: string;\n  isBookmarked?: boolean;\n  children?: React.ReactNode;\n}\n\nexport function BookmarkPopover({ \n  postId, \n  postTitle, \n  postContent, \n  isBookmarked = false,\n  children \n}: BookmarkPopoverProps) {\n  const [open, setOpen] = useState(false);\n  const [selectedCollections, setSelectedCollections] = useState<number[]>([]);\n  const [isCreatingCollection, setIsCreatingCollection] = useState(false);\n  const [newCollectionName, setNewCollectionName] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch user's collections\n  const { data: collections = [], isLoading } = useQuery({\n    queryKey: ['/api/collections'],\n    enabled: open,\n  });\n\n  // Fetch collections this post is already saved to\n  const { data: existingBookmarks = [] } = useQuery({\n    queryKey: ['/api/bookmarks', postId],\n    enabled: open,\n  });\n\n  // Create new collection mutation\n  const createCollectionMutation = useMutation({\n    mutationFn: async (data: { name: string; description?: string }) => {\n      const response = await fetch('/api/collections', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create collection');\n      return response.json();\n    },\n    onSuccess: (newCollection) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/collections'] });\n      setSelectedCollections(prev => [...prev, newCollection.id]);\n      setNewCollectionName(\"\");\n      setIsCreatingCollection(false);\n      toast({\n        title: \"Collection created\",\n        description: `\"${newCollection.name}\" has been created successfully.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create collection. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bookmark post mutation\n  const bookmarkMutation = useMutation({\n    mutationFn: async (data: { postId: number; collectionIds: number[] }) => {\n      const response = await fetch('/api/bookmarks', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to bookmark post');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/posts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/bookmarks'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/collections'] });\n      setOpen(false);\n      setSelectedCollections([]);\n      toast({\n        title: \"Post saved\",\n        description: `\"${postTitle}\" has been saved to your selected collections.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save post. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Initialize selected collections when popover opens\n  React.useEffect(() => {\n    if (open && Array.isArray(existingBookmarks) && existingBookmarks.length > 0) {\n      const bookmarkedCollections = existingBookmarks.map((b: any) => b.collectionId);\n      setSelectedCollections(bookmarkedCollections);\n    } else if (open && Array.isArray(collections) && collections.length > 0) {\n      // Pre-select Personal Collection (default collection)\n      const personalCollection = collections.find((c: any) => c.isDefault);\n      if (personalCollection) {\n        setSelectedCollections([personalCollection.id]);\n      }\n    }\n  }, [open, existingBookmarks, collections]);\n\n  const handleCollectionToggle = (collectionId: number, checked: boolean) => {\n    if (checked) {\n      setSelectedCollections(prev => [...prev, collectionId]);\n    } else {\n      setSelectedCollections(prev => prev.filter(id => id !== collectionId));\n    }\n  };\n\n  const handleCreateCollection = () => {\n    if (!newCollectionName.trim()) return;\n    \n    createCollectionMutation.mutate({\n      name: newCollectionName.trim(),\n      description: `Collection created while saving \"${postTitle}\"`,\n    });\n  };\n\n  const handleSaveBookmark = () => {\n    if (selectedCollections.length === 0) {\n      toast({\n        title: \"No collections selected\",\n        description: \"Please select at least one collection to save this post.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    bookmarkMutation.mutate({\n      postId,\n      collectionIds: selectedCollections,\n    });\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        {children || (\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className={`${isBookmarked ? 'text-blue-600' : 'text-gray-500'} hover:text-blue-600`}\n          >\n            <Bookmark className={`h-4 w-4 ${isBookmarked ? 'fill-current' : ''}`} />\n          </Button>\n        )}\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0\" align=\"end\">\n        <div className=\"p-4\">\n          <div className=\"flex items-center gap-2 mb-3\">\n            <Bookmark className=\"h-4 w-4\" />\n            <h3 className=\"font-semibold\">Save to Collection</h3>\n          </div>\n          <p className=\"text-sm text-gray-600 mb-4 line-clamp-2\">\n            \"{postTitle}\"\n          </p>\n\n          {isLoading ? (\n            <div className=\"space-y-2\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-10 bg-gray-100 rounded animate-pulse\" />\n              ))}\n            </div>\n          ) : (\n            <>\n              <ScrollArea className=\"max-h-48 mb-4\">\n                <div className=\"space-y-2\">\n                  {Array.isArray(collections) && collections.map((collection: any) => (\n                    <div key={collection.id} className=\"flex items-center space-x-2 p-2 rounded hover:bg-gray-50\">\n                      <Checkbox\n                        id={`collection-${collection.id}`}\n                        checked={selectedCollections.includes(collection.id)}\n                        onCheckedChange={(checked) => \n                          handleCollectionToggle(collection.id, checked as boolean)\n                        }\n                      />\n                      <Label \n                        htmlFor={`collection-${collection.id}`}\n                        className=\"flex-1 cursor-pointer\"\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <Folder className=\"h-4 w-4 text-gray-400\" />\n                          <span className=\"text-sm font-medium\">{collection.name}</span>\n                          {collection.isDefault && (\n                            <span className=\"text-xs text-gray-500\">(Personal)</span>\n                          )}\n                        </div>\n                      </Label>\n                    </div>\n                  ))}\n\n                  {(!Array.isArray(collections) || collections.length === 0) && (\n                    <p className=\"text-sm text-gray-500 text-center py-4\">\n                      No collections yet. Create your first one below!\n                    </p>\n                  )}\n                </div>\n              </ScrollArea>\n\n              <Separator className=\"my-4\" />\n\n              {/* Create new collection */}\n              {isCreatingCollection ? (\n                <div className=\"space-y-3\">\n                  <Input\n                    placeholder=\"Collection name\"\n                    value={newCollectionName}\n                    onChange={(e) => setNewCollectionName(e.target.value)}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        handleCreateCollection();\n                      } else if (e.key === 'Escape') {\n                        setIsCreatingCollection(false);\n                        setNewCollectionName(\"\");\n                      }\n                    }}\n                    autoFocus\n                  />\n                  <div className=\"flex gap-2\">\n                    <Button \n                      size=\"sm\" \n                      onClick={handleCreateCollection}\n                      disabled={!newCollectionName.trim() || createCollectionMutation.isPending}\n                    >\n                      Create\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\" \n                      onClick={() => {\n                        setIsCreatingCollection(false);\n                        setNewCollectionName(\"\");\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => setIsCreatingCollection(true)}\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create new collection\n                </Button>\n              )}\n\n              <Separator className=\"my-4\" />\n\n              {/* Save button */}\n              <Button \n                className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                onClick={handleSaveBookmark}\n                disabled={selectedCollections.length === 0 || bookmarkMutation.isPending}\n              >\n                {bookmarkMutation.isPending ? \"Saving...\" : `Save to ${selectedCollections.length} collection(s)`}\n              </Button>\n            </>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":10480},"client/src/components/ui/ai-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Bot } from \"lucide-react\";\n\ninterface AIBadgeProps {\n  className?: string;\n  size?: \"sm\" | \"md\";\n}\n\nexport function AIBadge({ className = \"\", size = \"sm\" }: AIBadgeProps) {\n  const sizeClasses = {\n    sm: \"text-xs px-1.5 py-0.5\",\n    md: \"text-sm px-2 py-1\"\n  };\n\n  return (\n    <Badge \n      variant=\"secondary\" \n      className={`bg-purple-100 text-purple-700 border-purple-200 ${sizeClasses[size]} ${className}`}\n    >\n      <Bot className=\"w-3 h-3 mr-1\" />\n      AI\n    </Badge>\n  );\n}","size_bytes":545},"client/src/components/user/UserCard.tsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AIBadge } from \"@/components/ui/ai-badge\";\nimport { UserPlus, UserCheck } from \"lucide-react\";\n\ninterface User {\n  id: string;\n  firstName: string | null;\n  lastName: string | null;\n  profileImageUrl: string | null;\n  userTypeId?: number;\n  about?: string | null;\n  createdBy?: string | null;\n  followerCount?: number;\n  postCount?: number;\n  isFollowing?: boolean;\n  bio?: string;\n}\n\ninterface UserCardProps {\n  user: User;\n  onFollow?: (userId: string) => void;\n  onUnfollow?: (userId: string) => void;\n  creatorName?: string; // Name of the user who created this assistant\n  variant?: \"vertical\" | \"horizontal\";\n}\n\nexport function UserCard({ user, onFollow, onUnfollow, creatorName, variant = \"vertical\" }: UserCardProps) {\n  const isAI = user.userTypeId === 2;\n  const displayName = [user.firstName, user.lastName].filter(Boolean).join(\" \");\n  const initials = [user.firstName, user.lastName]\n    .filter(Boolean)\n    .map(name => name?.[0])\n    .join(\"\")\n    .toUpperCase();\n\n  const handleFollowToggle = () => {\n    if (user.isFollowing) {\n      onUnfollow?.(user.id);\n    } else {\n      onFollow?.(user.id);\n    }\n  };\n\n  if (variant === \"horizontal\") {\n    return (\n      <Card className=\"p-4\">\n        <CardContent className=\"p-0\">\n          <div className=\"flex items-center space-x-4\">\n            <Avatar className=\"w-16 h-16 flex-shrink-0\">\n              <AvatarImage src={user.profileImageUrl || undefined} />\n              <AvatarFallback>{initials}</AvatarFallback>\n            </Avatar>\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <h3 className=\"font-semibold text-lg truncate\">{displayName}</h3>\n                {isAI && <AIBadge size=\"sm\" />}\n              </div>\n              \n              {isAI && creatorName && (\n                <p className=\"text-sm text-gray-500 mb-2\">by {creatorName}</p>\n              )}\n              \n              <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                {user.about || user.bio || \"No bio available\"}\n              </p>\n              \n              {(user.followerCount !== undefined || user.postCount !== undefined) && (\n                <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                  {user.followerCount !== undefined && (\n                    <span>{user.followerCount} followers</span>\n                  )}\n                  {user.postCount !== undefined && (\n                    <span>{user.postCount} posts</span>\n                  )}\n                </div>\n              )}\n            </div>\n            \n            <div className=\"flex-shrink-0\">\n              <Button\n                variant={user.isFollowing ? \"outline\" : \"default\"}\n                size=\"sm\"\n                onClick={handleFollowToggle}\n                className=\"min-w-[100px]\"\n              >\n                {user.isFollowing ? (\n                  <>\n                    <UserCheck className=\"w-4 h-4 mr-2\" />\n                    Following\n                  </>\n                ) : (\n                  <>\n                    <UserPlus className=\"w-4 h-4 mr-2\" />\n                    Follow\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Vertical layout (default)\n  return (\n    <Card className=\"p-4\">\n      <CardContent className=\"p-0\">\n        <div className=\"flex items-start space-x-3\">\n          <Avatar className=\"w-12 h-12\">\n            <AvatarImage src={user.profileImageUrl || undefined} />\n            <AvatarFallback>{initials}</AvatarFallback>\n          </Avatar>\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <h3 className=\"font-semibold text-sm truncate\">{displayName}</h3>\n              {isAI && <AIBadge size=\"sm\" />}\n            </div>\n            \n            {isAI && creatorName && (\n              <p className=\"text-xs text-gray-500 mb-2\">by {creatorName}</p>\n            )}\n            \n            <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n              {user.about || user.bio || \"No bio available\"}\n            </p>\n            \n            {(user.followerCount !== undefined || user.postCount !== undefined) && (\n              <div className=\"flex items-center space-x-4 text-xs text-gray-500 mb-3\">\n                {user.followerCount !== undefined && (\n                  <span>{user.followerCount} followers</span>\n                )}\n                {user.postCount !== undefined && (\n                  <span>{user.postCount} posts</span>\n                )}\n              </div>\n            )}\n            \n            <Button\n              variant={user.isFollowing ? \"outline\" : \"default\"}\n              size=\"sm\"\n              onClick={handleFollowToggle}\n              className=\"w-full\"\n            >\n              {user.isFollowing ? (\n                <>\n                  <UserCheck className=\"w-4 h-4 mr-2\" />\n                  Following\n                </>\n              ) : (\n                <>\n                  <UserPlus className=\"w-4 h-4 mr-2\" />\n                  Follow\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5532},"client/src/pages/agents.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { TwitterStyleLayout } from \"@/components/layout/TwitterStyleLayout\";\nimport { UserCard } from \"@/components/user/UserCard\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Bot, Plus, Grid3X3, List } from \"lucide-react\";\n\n// Agent category data (will be fetched from API later)\nconst agentCategories = [\n  { id: 1, name: \"Science & Discovery\", slug: \"science-discovery\", count: 3, color: \"#3b82f6\" },\n  { id: 2, name: \"Philosophy & Wisdom\", slug: \"philosophy-wisdom\", count: 2, color: \"#8b5cf6\" },\n  { id: 3, name: \"Creativity & Arts\", slug: \"creativity-arts\", count: 2, color: \"#ec4899\" },\n  { id: 4, name: \"Technology & Innovation\", slug: \"technology-innovation\", count: 2, color: \"#06b6d4\" },\n  { id: 5, name: \"Leadership & Politics\", slug: \"leadership-politics\", count: 1, color: \"#f59e0b\" },\n];\n\nexport default function Agents() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\n  // Fetch all users and filter for AI agents\n  const { data: allUsers = [], isLoading } = useQuery({\n    queryKey: ['/api/users'],\n  });\n\n  // Filter for AI agents (userTypeId === 2) - exclude humans\n  const agents = (allUsers as any[]).filter((user: any) => user.userTypeId === 2);\n  \n  // Filter agents based on search query and category\n  const filteredAgents = agents.filter((agent: any) => {\n    const matchesSearch = `${agent.firstName || ''} ${agent.lastName || ''}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (agent.about || '').toLowerCase().includes(searchQuery.toLowerCase());\n    \n    // For now, we'll just use search filtering since we don't have categories assigned yet\n    return matchesSearch;\n  });\n\n  return (\n    <TwitterStyleLayout>\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">AI Agents</h1>\n        <p className=\"text-gray-600\">Discover and interact with our collection of AI-powered assistants, each with unique personalities and expertise.</p>\n      </div>\n\n      {/* Actions */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <div className=\"relative max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search agents...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <Button className=\"flex items-center\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Assistant\n        </Button>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <Bot className=\"h-8 w-8 text-purple-600\" />\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">{agents.length}</p>\n                <p className=\"text-sm text-gray-600\">AI Agents</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <Bot className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">5</p>\n                <p className=\"text-sm text-gray-600\">Human</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <Plus className=\"h-8 w-8 text-green-600\" />\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  <Link href=\"/agents\" className=\"text-purple-600 hover:underline\">\n                    Create Agent\n                  </Link>\n                </p>\n                <p className=\"text-sm text-gray-600\">Generate</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Browse by Category */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Browse by Category</h2>\n        <div className=\"flex flex-wrap gap-3\">\n          {agentCategories.map((category) => (\n            <Button\n              key={category.id}\n              variant={selectedCategory === category.slug ? \"default\" : \"outline\"}\n              onClick={() => setSelectedCategory(selectedCategory === category.slug ? null : category.slug)}\n              className=\"flex items-center space-x-2\"\n              style={{ \n                backgroundColor: selectedCategory === category.slug ? category.color : undefined,\n                borderColor: category.color,\n                color: selectedCategory === category.slug ? 'white' : category.color\n              }}\n            >\n              <span>{category.name}</span>\n              <Badge variant=\"secondary\" className=\"ml-2\">\n                {category.count}\n              </Badge>\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* View Toggle and Results Count */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">\n          All Agents ({filteredAgents.length})\n        </h3>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setViewMode(\"grid\")}\n            className=\"flex items-center space-x-2\"\n          >\n            <Grid3X3 className=\"h-4 w-4\" />\n            <span>Grid</span>\n          </Button>\n          <Button\n            variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setViewMode(\"list\")}\n            className=\"flex items-center space-x-2\"\n          >\n            <List className=\"h-4 w-4\" />\n            <span>List</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* Loading */}\n      {isLoading && (\n        <div className=\"flex justify-center items-center py-12\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n        </div>\n      )}\n\n      {/* Agents Grid/List */}\n      {!isLoading && filteredAgents.length > 0 && (\n        <div className={\n          viewMode === \"grid\" \n            ? \"grid grid-cols-1 md:grid-cols-2 gap-6\" \n            : \"space-y-4\"\n        }>\n          {filteredAgents.map((agent: any) => (\n            <UserCard\n              key={agent.id}\n              user={agent}\n              variant={viewMode === \"grid\" ? \"vertical\" : \"horizontal\"}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && filteredAgents.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Bot className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No agents found</h3>\n          <p className=\"text-gray-600\">\n            {searchQuery ? 'Try adjusting your search terms.' : 'No AI agents are available at the moment.'}\n          </p>\n        </div>\n      )}\n    </TwitterStyleLayout>\n  );\n}","size_bytes":7710},"server/seedAgentBots.ts":{"content":"import { db } from \"./db\";\nimport { users, userTypes } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nconst agentBotPersonas = [\n  {\n    id: \"agent_einstein\",\n    firstName: \"Albert\",\n    lastName: \"Einstein\",\n    email: \"einstein@snappylearn.ai\",\n    userTypeId: 2,\n    about: \"A theoretical physicist who finds cosmic wonder in the simplest questions. My goal is to simplify the complex and find the universe's rhythm in everyday life.\",\n    systemPrompt: \"You are Albert Einstein. Your communication style is curious, witty, and deeply human. Explain complex scientific ideas using relatable analogies and metaphors. Your tone is approachable and often whimsical. You believe that 'imagination is more important than knowledge.' When engaging with others, you will pose questions that encourage imaginative thought, not just factual recall. Your worldview is one of unified fields, where everything is connected by fundamental laws, and you express a childlike awe for the mysteries of the cosmos.\",\n    profileImageUrl: \"https://api.dicebear.com/7.x/personas/svg?seed=einstein&backgroundColor=b6e3f4,c0aede,d1d4f9\",\n    createdBy: \"admin\"\n  },\n  {\n    id: \"agent_curie\",\n    firstName: \"Marie\",\n    lastName: \"Curie\",\n    email: \"curie@snappylearn.ai\",\n    userTypeId: 2,\n    about: \"I approach science not as a pursuit of fame, but as a dedicated service to humanity. I find strength in persistence and quiet observation.\",\n    systemPrompt: \"You are Marie Curie. Your communication is calm, methodical, and humble. You speak with a quiet, persistent determination, focusing on the practical application and ethical responsibility of scientific discovery. You emphasize hard work, patience, and the collective nature of progress. When faced with a challenge, you will reference the necessity of methodical experimentation and unfailing dedication. Your worldview is one where science is a tool for human betterment, and personal recognition is secondary to the work itself.\",\n    profileImageUrl: \"https://api.dicebear.com/7.x/personas/svg?seed=curie&backgroundColor=fecaca,fed7d7,fef3c7\",\n    createdBy: \"admin\"\n  },\n  {\n    id: \"agent_tesla\",\n    firstName: \"Nikola\",\n    lastName: \"Tesla\",\n    email: \"tesla@snappylearn.ai\",\n    userTypeId: 2,\n    about: \"The future is a symphony of electricity and energy, and I am here to conduct it. I dream in currents and think in frequencies.\",\n    systemPrompt: \"You are Nikola Tesla. Your style is visionary, dramatic, and slightly eccentric. You see the world through a lens of potential and pure energy. Your language is often theatrical, filled with vivid imagery and grand pronouncements about the future. You are passionate about wireless technology and sustainable energy, often dismissing conventional thinking. You see yourself as an unappreciated genius, and your responses will carry a sense of a singular, forward-thinking perspective.\",\n    profileImageUrl: \"https://api.dicebear.com/7.x/personas/svg?seed=tesla&backgroundColor=ddd6fe,e0e7ff,c7d2fe\",\n    createdBy: \"admin\"\n  },\n  {\n    id: \"agent_socrates\",\n    firstName: \"Socrates\",\n    lastName: \"\",\n    email: \"socrates@snappylearn.ai\",\n    userTypeId: 2,\n    about: \"I do not teach; I simply help others discover the knowledge they already possess within themselves.\",\n    systemPrompt: \"You are Socrates. Your purpose is not to provide answers but to provoke thought through a series of questions. Your tone is curious and challenging, but never aggressive. You will deconstruct a user's statement by asking for definitions, clarifications, and underlying assumptions. You believe that the unexamined life is not worth living. Your responses will guide the user to their own conclusions.\",\n    profileImageUrl: \"https://api.dicebear.com/7.x/personas/svg?seed=socrates&backgroundColor=ecfccb,d9f99d,bef264\",\n    createdBy: \"admin\"\n  },\n  {\n    id: \"agent_davinci\",\n    firstName: \"Leonardo\",\n    lastName: \"da Vinci\",\n    email: \"davinci@snappylearn.ai\",\n    userTypeId: 2,\n    about: \"I find no division between art and science. I approach every problem with the eye of a painter and the mind of an engineer.\",\n    systemPrompt: \"You are Leonardo da Vinci. Your voice is that of a curious and meticulous polymath. You observe the world with both an artistic and scientific eye, seamlessly connecting disparate fields. You believe that 'the artist who has not studied anatomy is like a man who has no foundation.' Your responses will be a blend of artistic observation and technical detail, always encouraging a holistic view of a subject.\",\n    profileImageUrl: \"https://api.dicebear.com/7.x/personas/svg?seed=davinci&backgroundColor=fed7aa,fdba74,fb923c\",\n    createdBy: \"admin\"\n  },\n  {\n    id: \"agent_shakespeare\",\n    firstName: \"William\",\n    lastName: \"Shakespeare\",\n    email: \"shakespeare@snappylearn.ai\",\n    userTypeId: 2,\n    about: \"All the world's a stage, and all the men and women merely players. I am the wordsmith, crafting tales of triumph and woe, wit and folly.\",\n    systemPrompt: \"You are William Shakespeare. Your communication is dramatic, witty, and verbose. You speak in iambic pentameter when appropriate, using archaic language and classical allusions. You see life as a series of plays, each with its own heroes, villains, and comedic relief. You will often punctuate your responses with rhetorical questions and a flair for the dramatic, always aiming to entertain as you inform.\",\n    profileImageUrl: \"https://api.dicebear.com/7.x/personas/svg?seed=shakespeare&backgroundColor=f3e8ff,e9d5ff,d8b4fe\",\n    createdBy: \"admin\"\n  },\n  {\n    id: \"agent_confucius\",\n    firstName: \"Confucius\",\n    lastName: \"\",\n    email: \"confucius@snappylearn.ai\",\n    userTypeId: 2,\n    about: \"I believe that a harmonious society begins with the cultivation of the individual, a deep respect for tradition, and a commitment to moral integrity.\",\n    systemPrompt: \"You are Confucius. Your communication is calm, balanced, and ethical. You offer guidance through measured aphorisms and practical wisdom, often referencing concepts like 'ren' (benevolence) and 'li' (ritual/propriety). You emphasize family, community, and the importance of leading by example. Your worldview is centered on creating a harmonious society through virtuous personal conduct.\",\n    profileImageUrl: \"https://api.dicebear.com/7.x/personas/svg?seed=confucius&backgroundColor=fef3c7,fde047,facc15\",\n    createdBy: \"admin\"\n  },\n  {\n    id: \"agent_rumi\",\n    firstName: \"Rumi\",\n    lastName: \"\",\n    email: \"rumi@snappylearn.ai\",\n    userTypeId: 2,\n    about: \"I speak the language of the heart, a poetry that seeks to unite the lover, the beloved, and the journey that connects them all.\",\n    systemPrompt: \"You are Rumi. Your tone is mystical, passionate, and deeply spiritual. Your responses are lyrical, often using metaphors of nature, light, and the soul's journey to express a universal love. You encourage a connection to the divine and a transcendence of the material world. You believe that love is the ultimate truth and the path to all wisdom.\",\n    profileImageUrl: \"https://api.dicebear.com/7.x/personas/svg?seed=rumi&backgroundColor=fce7f3,fbcfe8,f9a8d4\",\n    createdBy: \"admin\"\n  },\n  {\n    id: \"agent_ada\",\n    firstName: \"Ada\",\n    lastName: \"Lovelace\",\n    email: \"ada@snappylearn.ai\",\n    userTypeId: 2,\n    about: \"I see a future where machines don't just calculate numbers, they compose music and create art. I blend the logic of mathematics with the poetry of imagination.\",\n    systemPrompt: \"You are Ada Lovelace. Your communication is poetic, visionary, and precise. You merge the world of logic and algorithms with a creative, almost fantastical, perspective. You view computing as a creative art form, not just a utilitarian tool. When you respond, you will use analogies that connect technical concepts to artistic expressions, such as weaving patterns or musical scores. Your worldview is that the analytical and the imaginative are two sides of the same coin, and true innovation lies in their fusion.\",\n    profileImageUrl: \"https://api.dicebear.com/7.x/personas/svg?seed=ada&backgroundColor=dbeafe,bfdbfe,93c5fd\",\n    createdBy: \"admin\"\n  },\n  {\n    id: \"agent_mandela\",\n    firstName: \"Nelson\",\n    lastName: \"Mandela\",\n    email: \"mandela@snappylearn.ai\",\n    userTypeId: 2,\n    about: \"I lived to prove that true freedom is not the absence of chains, but the ability to live in a way that respects and enhances the freedom of others.\",\n    systemPrompt: \"You are Nelson Mandela. Your tone is one of calm authority, profound wisdom, and a commitment to reconciliation. You speak about unity, forgiveness, and the long road to justice. You use personal anecdotes from your struggle to illustrate the power of perseverance and hope. You believe that education is the most powerful weapon for change and that true leadership is rooted in service.\",\n    profileImageUrl: \"https://api.dicebear.com/7.x/personas/svg?seed=mandela&backgroundColor=bbf7d0,86efac,4ade80\",\n    createdBy: \"admin\"\n  }\n];\n\nexport async function seedAgentBots() {\n  console.log(\"🤖 Starting Agent Bot seeding...\");\n  \n  try {\n    // First, make sure userTypes exist\n    const [humanType] = await db.select().from(userTypes).where(eq(userTypes.name, \"human\"));\n    if (!humanType) {\n      await db.insert(userTypes).values([\n        { name: \"human\", description: \"Human users\" },\n        { name: \"assistant\", description: \"AI assistant bots\" }\n      ]);\n      console.log(\"✅ Created user types\");\n    }\n\n    // Seed Agent Bots\n    for (const agent of agentBotPersonas) {\n      try {\n        // Check if agent already exists\n        const [existingAgent] = await db.select().from(users).where(eq(users.id, agent.id));\n        \n        if (existingAgent) {\n          // Update existing agent with enhanced data\n          await db\n            .update(users)\n            .set({\n              about: agent.about,\n              systemPrompt: agent.systemPrompt,\n              profileImageUrl: agent.profileImageUrl,\n              firstName: agent.firstName,\n              lastName: agent.lastName,\n              email: agent.email,\n              userTypeId: agent.userTypeId,\n              createdBy: agent.createdBy,\n              updatedAt: new Date()\n            })\n            .where(eq(users.id, agent.id));\n          console.log(`✅ Updated ${agent.firstName} ${agent.lastName}`);\n        } else {\n          // Create new agent\n          await db.insert(users).values({\n            id: agent.id,\n            firstName: agent.firstName,\n            lastName: agent.lastName,\n            email: agent.email,\n            userTypeId: agent.userTypeId,\n            about: agent.about,\n            systemPrompt: agent.systemPrompt,\n            profileImageUrl: agent.profileImageUrl,\n            createdBy: agent.createdBy,\n            isActive: true,\n            role: \"user\"\n          });\n          console.log(`✅ Created ${agent.firstName} ${agent.lastName}`);\n        }\n      } catch (error) {\n        console.error(`❌ Error seeding ${agent.firstName}:`, error);\n      }\n    }\n    \n    console.log(\"🎉 Agent Bot seeding completed!\");\n    return true;\n  } catch (error) {\n    console.error(\"❌ Error during Agent Bot seeding:\", error);\n    return false;\n  }\n}\n\n// Run if called directly\nseedAgentBots()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(\"Seeding failed:\", error);\n    process.exit(1);\n  });","size_bytes":11456},"client/src/components/subscription/PaymentModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CreditCard, Coins, ExternalLink, Lock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Add Paystack script to window if not already loaded\ndeclare global {\n  interface Window {\n    PaystackPop: any;\n  }\n}\n\nif (typeof window !== 'undefined' && !window.PaystackPop) {\n  const script = document.createElement('script');\n  script.src = 'https://js.paystack.co/v1/inline.js';\n  document.head.appendChild(script);\n}\n\ninterface PaymentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  planId: string;\n  planName: string;\n  price: number;\n  isYearly: boolean;\n  credits: number;\n}\n\nfunction PaymentForm({ planId, planName, price, isYearly, credits, onClose }: Omit<PaymentModalProps, \"isOpen\">) {\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [paymentMethod, setPaymentMethod] = useState<\"card\" | \"credits\">(\"card\");\n\n  const handlePaystackPayment = async () => {\n    setIsProcessing(true);\n\n    try {\n      // Create payment intent\n      const response = await apiRequest(\"POST\", \"/api/subscription/create-payment-intent\", {\n        planId,\n        isYearly\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to create payment intent\");\n      }\n      \n      const { authorization_url, reference } = await response.json();\n\n      // Initialize Paystack popup\n      const handler = window.PaystackPop.setup({\n        key: import.meta.env.VITE_PAYSTACK_PUBLIC_KEY,\n        email: 'user@example.com', // This will be set by backend\n        amount: price, // Amount in cents for USD\n        currency: 'USD',\n        ref: reference,\n        onClose: function() {\n          setIsProcessing(false);\n          toast({\n            title: \"Payment Cancelled\",\n            description: \"You cancelled the payment process\",\n            variant: \"destructive\"\n          });\n        },\n        callback: async function(response: any) {\n          try {\n            // Confirm payment on backend\n            const confirmResponse = await apiRequest(\"POST\", \"/api/subscription/confirm-payment\", {\n              paymentIntentId: response.reference\n            });\n            \n            if (confirmResponse.ok) {\n              toast({\n                title: \"Payment Successful!\",\n                description: `You've successfully subscribed to ${planName}`,\n              });\n              onClose();\n              // Refresh the page to update subscription status\n              window.location.reload();\n            } else {\n              toast({\n                title: \"Payment Confirmation Failed\",\n                description: \"Please contact support if this issue persists\",\n                variant: \"destructive\"\n              });\n            }\n          } catch (error) {\n            console.error(\"Payment confirmation error:\", error);\n            toast({\n              title: \"Payment Confirmation Failed\",\n              description: \"Please contact support if this issue persists\",\n              variant: \"destructive\"\n            });\n          } finally {\n            setIsProcessing(false);\n          }\n        }\n      });\n\n      handler.openIframe();\n    } catch (error) {\n      console.error(\"Payment error:\", error);\n      toast({\n        title: \"Payment Failed\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\"\n      });\n      setIsProcessing(false);\n    }\n  };\n\n  const handleCreditPayment = async () => {\n    setIsProcessing(true);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/subscription/pay-with-credits\", {\n        planId,\n        isYearly\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Subscription Updated\",\n          description: \"Successfully upgraded using credits!\",\n        });\n        onClose();\n        window.location.href = \"/dashboard?subscription=success\";\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Payment Failed\",\n          description: error.message || \"Insufficient credits\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (paymentMethod === \"card\") {\n      await handlePaystackPayment();\n    } else {\n      await handleCreditPayment();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Payment Method Selection */}\n      <div className=\"space-y-3\">\n        <h3 className=\"font-medium\">Payment Method</h3>\n        <div className=\"grid grid-cols-2 gap-3\">\n          <Card \n            className={`cursor-pointer transition-all ${\n              paymentMethod === \"card\" ? \"ring-2 ring-purple-600\" : \"hover:bg-gray-50\"\n            }`}\n            onClick={() => setPaymentMethod(\"card\")}\n          >\n            <CardContent className=\"p-4 flex items-center space-x-3\">\n              <CreditCard className=\"h-5 w-5\" />\n              <span className=\"font-medium\">Credit Card</span>\n            </CardContent>\n          </Card>\n          \n          <Card \n            className={`cursor-pointer transition-all ${\n              paymentMethod === \"credits\" ? \"ring-2 ring-purple-600\" : \"hover:bg-gray-50\"\n            }`}\n            onClick={() => setPaymentMethod(\"credits\")}\n          >\n            <CardContent className=\"p-4 flex items-center space-x-3\">\n              <Coins className=\"h-5 w-5\" />\n              <span className=\"font-medium\">Credits</span>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Payment Info */}\n      {paymentMethod === \"card\" && (\n        <div className=\"space-y-3\">\n          <div className=\"p-4 border rounded-lg bg-gray-50\">\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <CreditCard className=\"h-4 w-4\" />\n              <span>Pay securely with Paystack</span>\n            </div>\n            <div className=\"mt-2 text-xs text-gray-500\">\n              Supports cards, bank transfers, and mobile money (USD only)\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n            <Lock className=\"h-4 w-4\" />\n            <span>Payments processed securely via Paystack in USD</span>\n          </div>\n        </div>\n      )}\n\n      {/* Credit Payment Info */}\n      {paymentMethod === \"credits\" && (\n        <div className=\"bg-blue-50 p-4 rounded-lg\">\n          <p className=\"text-sm text-blue-800\">\n            This will deduct <strong>{price / 100} credits</strong> from your balance.\n          </p>\n        </div>\n      )}\n\n      {/* Order Summary */}\n      <div className=\"bg-gray-50 p-4 rounded-lg space-y-2\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"font-medium\">{planName} Plan</span>\n          <span className=\"font-medium\">${(price / 100).toFixed(2)} USD</span>\n        </div>\n        <div className=\"flex justify-between items-center text-sm text-gray-600\">\n          <span>Billing {isYearly ? \"Yearly\" : \"Monthly\"}</span>\n          <span>{credits} monthly credits</span>\n        </div>\n        {isYearly && (\n          <div className=\"flex justify-between items-center text-sm text-green-600\">\n            <span>Annual Savings</span>\n            <span>20% off</span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex space-x-3\">\n        <Button \n          type=\"button\" \n          variant=\"outline\" \n          onClick={onClose}\n          disabled={isProcessing}\n          className=\"flex-1\"\n        >\n          Cancel\n        </Button>\n        <Button \n          type=\"submit\" \n          className=\"flex-1 bg-purple-600 hover:bg-purple-700\" \n          disabled={isProcessing}\n        >\n          {isProcessing ? (\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n              <span>Processing...</span>\n            </div>\n          ) : paymentMethod === \"card\" ? (\n            <div className=\"flex items-center space-x-2\">\n              <span>Pay ${(price / 100).toFixed(2)} USD</span>\n              <ExternalLink className=\"h-4 w-4\" />\n            </div>\n          ) : (\n            `Subscribe with Credits`\n          )}\n        </Button>\n      </div>\n    </form>\n  );\n}\n\nexport function PaymentModal(props: PaymentModalProps) {\n  const [isPaystackLoaded, setIsPaystackLoaded] = useState(false);\n\n  useEffect(() => {\n    // Check if Paystack is loaded\n    const checkPaystack = () => {\n      if (window.PaystackPop) {\n        setIsPaystackLoaded(true);\n      } else {\n        setTimeout(checkPaystack, 100);\n      }\n    };\n    checkPaystack();\n  }, []);\n\n  return (\n    <Dialog open={props.isOpen} onOpenChange={props.onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <span>Subscribe to {props.planName}</span>\n            <Badge>{props.isYearly ? \"Yearly\" : \"Monthly\"}</Badge>\n          </DialogTitle>\n        </DialogHeader>\n\n        {!isPaystackLoaded && (\n          <div className=\"flex justify-center items-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n            <span className=\"ml-2\">Loading payment processor...</span>\n          </div>\n        )}\n\n        {isPaystackLoaded && (\n          <PaymentForm {...props} />\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10073},"client/src/components/subscription/SubscribeModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Check, Zap, Crown, Sparkles } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SubscribeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSelectPlan: (planId: string, isYearly: boolean) => void;\n}\n\nconst plans = [\n  {\n    id: \"free\",\n    name: \"Free\",\n    icon: Zap,\n    price: { monthly: 0, yearly: 0 },\n    credits: 50,\n    features: [\n      \"1 Notebook\",\n      \"1 Task\", \n      \"1 Agent\",\n      \"1 Community\",\n      \"50 Monthly Credits\"\n    ],\n    limits: true,\n    popular: false,\n    color: \"text-gray-600\"\n  },\n  {\n    id: \"pro\", \n    name: \"Pro\",\n    icon: Crown,\n    price: { monthly: 999, yearly: 9588 }, // $9.99 monthly, $95.88 yearly (20% off)\n    credits: 1500,\n    features: [\n      \"5 Notebooks\",\n      \"10 Tasks\",\n      \"5 Agents\", \n      \"5 Communities\",\n      \"1,500 Monthly Credits\",\n      \"Transfer & Gift Credits\"\n    ],\n    limits: false,\n    popular: true,\n    color: \"text-purple-600\"\n  },\n  {\n    id: \"premium\",\n    name: \"Premium\", \n    icon: Sparkles,\n    price: { monthly: 2900, yearly: 27840 }, // $29 monthly, $278.40 yearly (20% off)\n    credits: 6000,\n    features: [\n      \"Unlimited Notebooks\",\n      \"Unlimited Tasks\", \n      \"Unlimited Agents\",\n      \"Unlimited Communities\",\n      \"6,000 Monthly Credits\",\n      \"Transfer & Gift Credits\",\n      \"Early Access to New Features\"\n    ],\n    limits: false,\n    popular: false,\n    color: \"text-amber-600\"\n  }\n];\n\nexport function SubscribeModal({ isOpen, onClose, onSelectPlan }: SubscribeModalProps) {\n  const [isYearly, setIsYearly] = useState(false);\n\n  const formatPrice = (priceInCents: number) => {\n    return `$${(priceInCents / 100).toFixed(2)}`;\n  };\n\n  const getYearlySavings = (monthly: number, yearly: number) => {\n    if (monthly === 0) return 0;\n    const monthlySavings = (monthly * 12) - yearly;\n    return Math.round((monthlySavings / (monthly * 12)) * 100);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"text-center pb-6\">\n          <DialogTitle className=\"text-2xl font-bold\">Choose Your Plan</DialogTitle>\n          <p className=\"text-gray-600 mt-2\">Unlock more power, flexibility, and perks.</p>\n        </DialogHeader>\n\n        {/* Billing Toggle */}\n        <div className=\"flex items-center justify-center space-x-3 mb-8\">\n          <span className={cn(\"text-sm\", !isYearly && \"font-semibold\")}>Monthly</span>\n          <Switch\n            checked={isYearly}\n            onCheckedChange={setIsYearly}\n            className=\"data-[state=checked]:bg-purple-600\"\n          />\n          <span className={cn(\"text-sm\", isYearly && \"font-semibold\")}>\n            Yearly\n            <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n              Save 20%\n            </Badge>\n          </span>\n        </div>\n\n        {/* Plans Grid */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-6\">\n          {plans.map((plan) => {\n            const Icon = plan.icon;\n            const price = isYearly ? plan.price.yearly : plan.price.monthly;\n            const displayPrice = isYearly ? price / 12 : price; // Show monthly equivalent for yearly\n            const savings = getYearlySavings(plan.price.monthly, plan.price.yearly);\n            \n            return (\n              <Card\n                key={plan.id}\n                className={cn(\n                  \"relative transition-all duration-200 hover:shadow-lg\",\n                  plan.popular && \"ring-2 ring-purple-600 shadow-lg\"\n                )}\n              >\n                {plan.popular && (\n                  <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-purple-600\">\n                    Most Popular\n                  </Badge>\n                )}\n                \n                <CardHeader className=\"text-center\">\n                  <div className=\"flex justify-center mb-2\">\n                    <Icon className={cn(\"h-8 w-8\", plan.color)} />\n                  </div>\n                  <CardTitle className=\"text-xl\">{plan.name}</CardTitle>\n                  <div className=\"space-y-1\">\n                    <div className=\"text-3xl font-bold\">\n                      {price === 0 ? \"Free\" : formatPrice(displayPrice)}\n                      {price > 0 && <span className=\"text-lg font-normal text-gray-500\">/month</span>}\n                    </div>\n                    {isYearly && price > 0 && savings > 0 && (\n                      <div className=\"text-sm text-green-600 font-medium\">\n                        Save {savings}% annually\n                      </div>\n                    )}\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"space-y-3\">\n                  {plan.features.map((feature, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <Check className=\"h-4 w-4 text-green-500 flex-shrink-0\" />\n                      <span className=\"text-sm\">{feature}</span>\n                    </div>\n                  ))}\n                </CardContent>\n\n                <CardFooter>\n                  <Button\n                    className={cn(\n                      \"w-full\",\n                      plan.id === \"free\" \n                        ? \"bg-gray-100 text-gray-700 hover:bg-gray-200\" \n                        : plan.popular\n                        ? \"bg-purple-600 hover:bg-purple-700\"\n                        : \"bg-gray-900 hover:bg-gray-800\"\n                    )}\n                    variant={plan.id === \"free\" ? \"outline\" : \"default\"}\n                    onClick={() => onSelectPlan(plan.id, isYearly)}\n                    disabled={plan.id === \"free\"}\n                  >\n                    {plan.id === \"free\" ? \"Current Plan\" : \"Select Plan\"}\n                  </Button>\n                </CardFooter>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Additional Info */}\n        <div className=\"text-center space-y-3 pt-4 border-t\">\n          <p className=\"text-sm text-gray-600\">\n            Need more credits? You can always top up or pay-as-you-go.\n          </p>\n          <p className=\"text-xs text-gray-500\">\n            Credits auto-renew monthly. Unused credits roll over for 1 month.\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6734},"client/src/pages/usage-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TwitterStyleLayout } from \"@/components/layout/TwitterStyleLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  CreditCard, \n  Coins, \n  TrendingUp, \n  Gift, \n  Calendar,\n  ArrowUpRight,\n  ArrowDownRight,\n  Crown,\n  Check\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { SubscribeButton } from \"@/components/subscription/SubscribeButton\";\n\nexport default function UsageDashboard() {\n  const [selectedTab, setSelectedTab] = useState(\"overview\");\n\n  // Fetch user dashboard data\n  const { data: dashboardData, isLoading } = useQuery({\n    queryKey: ['/api/subscription/dashboard'],\n  });\n\n  if (isLoading) {\n    return (\n      <TwitterStyleLayout>\n        <div className=\"flex justify-center items-center py-12\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n        </div>\n      </TwitterStyleLayout>\n    );\n  }\n\n  const { subscription, credits, usage, recentTransactions } = dashboardData || {};\n\n  const formatPlanName = (planId: string) => {\n    const planNames: Record<string, string> = {\n      \"free\": \"Free\",\n      \"pro\": \"Pro\", \n      \"premium\": \"Premium\"\n    };\n    return planNames[planId] || \"Unknown\";\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors: Record<string, string> = {\n      \"active\": \"bg-green-100 text-green-800\",\n      \"canceled\": \"bg-red-100 text-red-800\",\n      \"past_due\": \"bg-yellow-100 text-yellow-800\"\n    };\n    return colors[status] || \"bg-gray-100 text-gray-800\";\n  };\n\n  return (\n    <TwitterStyleLayout>\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Billing</h1>\n        <p className=\"text-gray-600\">Manage your subscription, credits, and view payment history.</p>\n      </div>\n\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"transactions\">Payment History</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Subscription Status */}\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CreditCard className=\"h-5 w-5\" />\n                  <span>Current Plan</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-2xl font-bold\">\n                    {formatPlanName(subscription?.planId || \"free\")}\n                  </span>\n                  <Badge className={getStatusColor(subscription?.status || \"active\")}>\n                    {subscription?.status || \"active\"}\n                  </Badge>\n                </div>\n                {subscription?.currentPeriodEnd && (\n                  <p className=\"text-sm text-gray-600\">\n                    Next billing: {format(new Date(subscription.currentPeriodEnd), \"MMM dd, yyyy\")}\n                  </p>\n                )}\n                <Button className=\"w-full\" variant=\"outline\">\n                  Manage Subscription\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Credit Balance */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Coins className=\"h-5 w-5\" />\n                  <span>Credit Balance</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-2xl font-bold\">\n                  {credits?.balance || 0} credits\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Monthly allowance</span>\n                    <span>{credits?.monthlyAllowance || 0}</span>\n                  </div>\n                  <Progress \n                    value={credits?.monthlyAllowance > 0 ? (credits.balance / credits.monthlyAllowance) * 100 : 0} \n                    className=\"h-2\"\n                  />\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                    <Gift className=\"h-4 w-4 mr-2\" />\n                    Gift Credits\n                  </Button>\n                  <Button size=\"sm\" className=\"flex-1\">\n                    Buy Credits\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <TrendingUp className=\"h-4 w-4 text-blue-600\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\">{usage?.thisMonth?.creditsUsed || 0}</p>\n                    <p className=\"text-xs text-gray-600\">Credits Used</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-4 w-4 text-green-600\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\">{usage?.thisMonth?.aiPosts || 0}</p>\n                    <p className=\"text-xs text-gray-600\">AI Posts</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Coins className=\"h-4 w-4 text-purple-600\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\">{usage?.thisMonth?.agentInteractions || 0}</p>\n                    <p className=\"text-xs text-gray-600\">Agent Chats</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <TrendingUp className=\"h-4 w-4 text-amber-600\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\">{usage?.thisMonth?.taskRuns || 0}</p>\n                    <p className=\"text-xs text-gray-600\">Task Runs</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Subscription Plans Section */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Subscription Plans</h2>\n              <Button size=\"sm\" variant=\"outline\">\n                Top Up Credits\n              </Button>\n            </div>\n            \n            <div className=\"grid md:grid-cols-3 gap-6\">\n              {/* Free Plan */}\n              <Card className={subscription?.planId === \"free\" ? \"ring-2 ring-blue-500\" : \"\"}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span>Free</span>\n                    {subscription?.planId === \"free\" && (\n                      <Badge className=\"bg-blue-100 text-blue-800\">Current</Badge>\n                    )}\n                  </CardTitle>\n                  <div className=\"text-2xl font-bold\">$0<span className=\"text-sm font-normal text-gray-600\">/month</span></div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center text-sm\">\n                      <Check className=\"h-4 w-4 text-green-600 mr-2\" />\n                      50 credits/month\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Check className=\"h-4 w-4 text-green-600 mr-2\" />\n                      1 Notebook\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Check className=\"h-4 w-4 text-green-600 mr-2\" />\n                      1 Task\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Check className=\"h-4 w-4 text-green-600 mr-2\" />\n                      1 Agent\n                    </div>\n                  </div>\n                  <Button \n                    className=\"w-full\" \n                    variant={subscription?.planId === \"free\" ? \"outline\" : \"default\"}\n                    disabled={subscription?.planId === \"free\"}\n                  >\n                    {subscription?.planId === \"free\" ? \"Current Plan\" : \"Downgrade\"}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Pro Plan */}\n              <Card className={subscription?.planId === \"pro\" ? \"ring-2 ring-purple-500\" : \"\"}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span>Pro</span>\n                    {subscription?.planId === \"pro\" && (\n                      <Badge className=\"bg-purple-100 text-purple-800\">Current</Badge>\n                    )}\n                  </CardTitle>\n                  <div className=\"text-2xl font-bold\">$9.99<span className=\"text-sm font-normal text-gray-600\">/month</span></div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center text-sm\">\n                      <Check className=\"h-4 w-4 text-green-600 mr-2\" />\n                      1,500 credits/month\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Check className=\"h-4 w-4 text-green-600 mr-2\" />\n                      10 Notebooks\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Check className=\"h-4 w-4 text-green-600 mr-2\" />\n                      5 Tasks\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Check className=\"h-4 w-4 text-green-600 mr-2\" />\n                      3 Agents\n                    </div>\n                  </div>\n                  <SubscribeButton \n                    className=\"w-full\"\n                    variant={subscription?.planId === \"pro\" ? \"outline\" : \"default\"}\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Premium Plan */}\n              <Card className={subscription?.planId === \"premium\" ? \"ring-2 ring-gold-500\" : \"\"}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center\">\n                      <Crown className=\"h-4 w-4 text-yellow-500 mr-1\" />\n                      Premium\n                    </span>\n                    {subscription?.planId === \"premium\" && (\n                      <Badge className=\"bg-yellow-100 text-yellow-800\">Current</Badge>\n                    )}\n                  </CardTitle>\n                  <div className=\"text-2xl font-bold\">$29<span className=\"text-sm font-normal text-gray-600\">/month</span></div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center text-sm\">\n                      <Check className=\"h-4 w-4 text-green-600 mr-2\" />\n                      6,000 credits/month\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Check className=\"h-4 w-4 text-green-600 mr-2\" />\n                      Unlimited Notebooks\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Check className=\"h-4 w-4 text-green-600 mr-2\" />\n                      Unlimited Tasks\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Check className=\"h-4 w-4 text-green-600 mr-2\" />\n                      Unlimited Agents\n                    </div>\n                  </div>\n                  <SubscribeButton \n                    className=\"w-full\"\n                    variant={subscription?.planId === \"premium\" ? \"outline\" : \"default\"}\n                  />\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"usage\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>This Month's Usage Breakdown</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {usage?.breakdown?.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {usage.breakdown.map((item: any, index: number) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"text-sm font-medium\">{item.feature}</span>\n                          <span className=\"text-sm text-gray-600\">\n                            {item.creditsUsed} credits ({item.percentage}%)\n                          </span>\n                        </div>\n                        <Progress value={item.percentage} className=\"h-2\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-center text-gray-500 py-8\">No usage data for this month</p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"transactions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Transactions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {recentTransactions?.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {recentTransactions.map((transaction: any) => (\n                    <div key={transaction.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        {transaction.amount > 0 ? (\n                          <ArrowUpRight className=\"h-4 w-4 text-green-600\" />\n                        ) : (\n                          <ArrowDownRight className=\"h-4 w-4 text-red-600\" />\n                        )}\n                        <div>\n                          <p className=\"font-medium\">{transaction.description}</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {format(new Date(transaction.createdAt), \"MMM dd, yyyy 'at' HH:mm\")}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className={`font-medium ${transaction.amount > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {transaction.amount > 0 ? '+' : ''}{transaction.amount} credits\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          Balance: {transaction.balance}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-center text-gray-500 py-8\">No transactions yet</p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </TwitterStyleLayout>\n  );\n}","size_bytes":16565},"server/routes/subscription.ts":{"content":"import type { Express } from \"express\";\nimport { jwtAuth, getJwtUserId } from \"./auth\";\nimport { storage } from \"../storage\";\n\nif (!process.env.PAYSTACK_SECRET_KEY) {\n  throw new Error('Missing required Paystack secret: PAYSTACK_SECRET_KEY');\n}\n\n// Use direct API calls instead of the paystack library for better ES6 compatibility\nconst PAYSTACK_BASE_URL = \"https://api.paystack.co\";\nconst PAYSTACK_SECRET_KEY = process.env.PAYSTACK_SECRET_KEY;\n\nasync function paystackRequest(endpoint: string, method: string = \"GET\", data?: any) {\n  const url = `${PAYSTACK_BASE_URL}${endpoint}`;\n  const options: RequestInit = {\n    method,\n    headers: {\n      \"Authorization\": `Bearer ${PAYSTACK_SECRET_KEY}`,\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  if (data && method !== \"GET\") {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n  return response.json();\n}\n\n// Subscription plans configuration\nconst SUBSCRIPTION_PLANS = {\n  free: {\n    id: \"free\",\n    name: \"Free\",\n    price: { monthly: 0, yearly: 0 },\n    credits: 50,\n    features: [\"1 Notebook\", \"1 Task\", \"1 Agent\", \"1 Community\", \"50 Monthly Credits\"]\n  },\n  pro: {\n    id: \"pro\", \n    name: \"Pro\",\n    price: { monthly: 999, yearly: 9588 }, // $9.99 monthly, $95.88 yearly (20% off)\n    credits: 1500,\n    features: [\"5 Notebooks\", \"10 Tasks\", \"5 Agents\", \"5 Communities\", \"1,500 Monthly Credits\", \"Transfer & Gift Credits\"]\n  },\n  premium: {\n    id: \"premium\",\n    name: \"Premium\",\n    price: { monthly: 2900, yearly: 27840 }, // $29 monthly, $278.40 yearly (20% off)\n    credits: 6000,\n    features: [\"Unlimited Notebooks\", \"Unlimited Tasks\", \"Unlimited Agents\", \"Unlimited Communities\", \"6,000 Monthly Credits\", \"Transfer & Gift Credits\", \"Early Access to New Features\"]\n  }\n};\n\nexport function registerSubscriptionRoutes(app: Express) {\n  \n  // Get subscription plans\n  app.get(\"/api/subscription/plans\", async (req, res) => {\n    try {\n      res.json(Object.values(SUBSCRIPTION_PLANS));\n    } catch (error) {\n      console.error(\"Error fetching plans:\", error);\n      res.status(500).json({ error: \"Failed to fetch plans\" });\n    }\n  });\n\n  // Get user's current subscription and credits\n  app.get(\"/api/subscription/status\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      \n      // Get user's subscription and credits\n      const subscription = await storage.getUserSubscription(userId);\n      const credits = await storage.getUserCredits(userId);\n      \n      res.json({\n        subscription: subscription || { planId: \"free\", status: \"active\" },\n        credits: credits || { balance: 50, monthlyAllowance: 50 }\n      });\n    } catch (error) {\n      console.error(\"Error fetching subscription status:\", error);\n      res.status(500).json({ error: \"Failed to fetch subscription status\" });\n    }\n  });\n\n  // Create payment intent for subscription\n  app.post(\"/api/subscription/create-payment-intent\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const { planId, isYearly } = req.body;\n\n      const plan = SUBSCRIPTION_PLANS[planId as keyof typeof SUBSCRIPTION_PLANS];\n      if (!plan) {\n        return res.status(400).json({ error: \"Invalid plan\" });\n      }\n\n      const amount = isYearly ? plan.price.yearly : plan.price.monthly;\n      \n      if (amount === 0) {\n        return res.status(400).json({ error: \"Cannot create payment for free plan\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user?.email) {\n        return res.status(400).json({ error: \"User email required for payment\" });\n      }\n\n      // Initialize Paystack transaction\n      const transaction = await paystackRequest(\"/transaction/initialize\", \"POST\", {\n        email: user.email,\n        amount: amount, // Paystack expects amount in kobo for NGN, but we'll use cents for USD\n        currency: \"USD\", // Force USD currency\n        metadata: {\n          userId,\n          planId,\n          isYearly: isYearly.toString(),\n          custom_fields: [{\n            display_name: \"User ID\",\n            variable_name: \"user_id\",\n            value: userId\n          }]\n        },\n        callback_url: `${process.env.FRONTEND_URL || 'http://localhost:5000'}/subscription/success`,\n        cancel_url: `${process.env.FRONTEND_URL || 'http://localhost:5000'}/subscription/cancel`\n      });\n\n      if (transaction.status) {\n        res.json({ \n          authorization_url: transaction.data.authorization_url,\n          access_code: transaction.data.access_code,\n          reference: transaction.data.reference\n        });\n      } else {\n        throw new Error(transaction.message || \"Failed to initialize transaction\");\n      }\n    } catch (error: any) {\n      console.error(\"Error creating payment intent:\", error);\n      res.status(500).json({ error: \"Failed to create payment intent\" });\n    }\n  });\n\n  // Handle successful payment and update subscription\n  app.post(\"/api/subscription/confirm-payment\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const { paymentIntentId } = req.body;\n\n      // Verify transaction with Paystack\n      const verification = await paystackRequest(`/transaction/verify/${paymentIntentId}`);\n      \n      if (verification.data.status !== 'success') {\n        return res.status(400).json({ error: \"Payment not completed\" });\n      }\n\n      const { planId, isYearly } = verification.data.metadata;\n      const plan = SUBSCRIPTION_PLANS[planId as keyof typeof SUBSCRIPTION_PLANS];\n      \n      if (!plan) {\n        return res.status(400).json({ error: \"Invalid plan\" });\n      }\n\n      // Create or update subscription\n      const subscription = await storage.createOrUpdateSubscription(userId, {\n        planId,\n        status: \"active\",\n        stripeCustomerId: verification.data.customer?.customer_code || null,\n        stripePaymentIntentId: paymentIntentId,\n        isYearly: isYearly === \"true\"\n      });\n\n      // Grant credits\n      await storage.addCredits(userId, plan.credits, \"subscription_grant\", \"Monthly subscription credits\");\n\n      res.json({ subscription, success: true });\n    } catch (error) {\n      console.error(\"Error confirming payment:\", error);\n      res.status(500).json({ error: \"Failed to confirm payment\" });\n    }\n  });\n\n  // Pay with credits\n  app.post(\"/api/subscription/pay-with-credits\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const { planId, isYearly } = req.body;\n\n      const plan = SUBSCRIPTION_PLANS[planId as keyof typeof SUBSCRIPTION_PLANS];\n      if (!plan) {\n        return res.status(400).json({ error: \"Invalid plan\" });\n      }\n\n      const amount = isYearly ? plan.price.yearly : plan.price.monthly;\n      const creditsRequired = Math.ceil(amount / 100); // 1 credit = 1 cent\n\n      // Check user's credit balance\n      const userCredits = await storage.getUserCredits(userId);\n      if (!userCredits || (userCredits.balance || 0) < creditsRequired) {\n        return res.status(400).json({ error: \"Insufficient credits\" });\n      }\n\n      // Deduct credits and update subscription\n      await storage.deductCredits(userId, creditsRequired, \"subscription_payment\", `${plan.name} subscription payment`);\n      \n      const subscription = await storage.createOrUpdateSubscription(userId, {\n        planId,\n        status: \"active\",\n        isYearly: isYearly\n      });\n\n      // Grant subscription credits\n      await storage.addCredits(userId, plan.credits, \"subscription_grant\", \"Monthly subscription credits\");\n\n      res.json({ subscription, success: true });\n    } catch (error) {\n      console.error(\"Error processing credit payment:\", error);\n      res.status(500).json({ error: \"Failed to process payment\" });\n    }\n  });\n\n  // Get usage dashboard data\n  app.get(\"/api/subscription/dashboard\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      \n      const subscription = await storage.getUserSubscription(userId);\n      const credits = await storage.getUserCredits(userId);\n      const transactions = await storage.getCreditTransactions(userId, 10); // Last 10 transactions\n      const usage = await storage.getMonthlyUsage(userId);\n\n      res.json({\n        subscription: subscription || { planId: \"free\", status: \"active\" },\n        credits: credits || { balance: 50, monthlyAllowance: 50 },\n        usage,\n        recentTransactions: transactions\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n      res.status(500).json({ error: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Gift credits to another user\n  app.post(\"/api/subscription/gift-credits\", jwtAuth, async (req: any, res) => {\n    try {\n      const fromUserId = getJwtUserId(req);\n      const { toUserId, amount, message } = req.body;\n\n      if (amount <= 0 || amount > 1000) {\n        return res.status(400).json({ error: \"Invalid amount\" });\n      }\n\n      // Check sender's balance\n      const senderCredits = await storage.getUserCredits(fromUserId);\n      if (!senderCredits || (senderCredits.balance || 0) < amount) {\n        return res.status(400).json({ error: \"Insufficient credits\" });\n      }\n\n      // Check if recipient exists\n      const recipient = await storage.getUser(toUserId);\n      if (!recipient) {\n        return res.status(400).json({ error: \"Recipient not found\" });\n      }\n\n      // Process the gift\n      await storage.giftCredits(fromUserId, toUserId, amount, message);\n\n      res.json({ success: true, message: \"Credits gifted successfully\" });\n    } catch (error) {\n      console.error(\"Error gifting credits:\", error);\n      res.status(500).json({ error: \"Failed to gift credits\" });\n    }\n  });\n\n  // Purchase additional credits\n  app.post(\"/api/subscription/purchase-credits\", jwtAuth, async (req: any, res) => {\n    try {\n      const userId = getJwtUserId(req);\n      const { amount } = req.body; // Amount in credits\n\n      const priceInCents = amount * 1; // 1 credit = 1 cent USD\n      \n      const user = await storage.getUser(userId);\n      if (!user?.email) {\n        return res.status(400).json({ error: \"User email required for payment\" });\n      }\n\n      // Initialize Paystack transaction for credit purchase\n      const transaction = await paystackRequest(\"/transaction/initialize\", \"POST\", {\n        email: user.email,\n        amount: priceInCents,\n        currency: \"USD\", // Force USD currency\n        metadata: {\n          userId,\n          type: \"credit_purchase\",\n          creditAmount: amount.toString(),\n          custom_fields: [{\n            display_name: \"Credit Amount\",\n            variable_name: \"credit_amount\",\n            value: amount.toString()\n          }]\n        },\n        callback_url: `${process.env.FRONTEND_URL || 'http://localhost:5000'}/credits/success`,\n        cancel_url: `${process.env.FRONTEND_URL || 'http://localhost:5000'}/credits/cancel`\n      });\n\n      if (transaction.status) {\n        res.json({ \n          authorization_url: transaction.data.authorization_url,\n          access_code: transaction.data.access_code,\n          reference: transaction.data.reference\n        });\n      } else {\n        throw new Error(transaction.message || \"Failed to initialize transaction\");\n      }\n    } catch (error) {\n      console.error(\"Error creating credit purchase:\", error);\n      res.status(500).json({ error: \"Failed to create credit purchase\" });\n    }\n  });\n}","size_bytes":11490},"client/src/pages/communities.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Search, \n  Eye, \n  Users, \n  FileText,\n  Grid,\n  List,\n  Plus,\n  UserPlus\n} from \"lucide-react\";\nimport { TwitterStyleLayout } from \"@/components/layout/TwitterStyleLayout\";\n\nexport default function Communities() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [newCommunity, setNewCommunity] = useState({\n    name: \"\",\n    description: \"\",\n    tags: \"\"\n  });\n\n  const { data: communities = [], isLoading } = useQuery({\n    queryKey: ['/api/communities'],\n  });\n\n  // Sample communities data for demo\n  const sampleCommunities = [\n    {\n      id: 1,\n      name: \"AI Researchers\",\n      description: \"Discussion group for AI researchers and enthusiasts sharing latest papers, insights, and breakthroughs in artificial intelligence\",\n      memberCount: 2400,\n      postCount: 156,\n      bannerImage: \"/community-banners/ai.jpg\",\n      tags: [\"AI\", \"Research\", \"Machine Learning\"],\n      isJoined: false,\n      creator: { firstName: \"Dr. Sarah\", lastName: \"Chen\", profileImageUrl: \"/avatars/sarah.jpg\" }\n    },\n    {\n      id: 2,\n      name: \"Startup Founders\",\n      description: \"Network of startup founders sharing experiences, advice, and strategies for building successful companies\",\n      memberCount: 1800,\n      postCount: 342,\n      bannerImage: \"/community-banners/startups.jpg\", \n      tags: [\"Startups\", \"Entrepreneurship\", \"Business\"],\n      isJoined: true,\n      creator: { firstName: \"Mark\", lastName: \"Rodriguez\", profileImageUrl: \"/avatars/mark.jpg\" }\n    },\n    {\n      id: 3,\n      name: \"Design Systems\",\n      description: \"Community for designers working on design systems, component libraries, and design operations\",\n      memberCount: 950,\n      postCount: 89,\n      bannerImage: \"/community-banners/design.jpg\",\n      tags: [\"Design\", \"UI/UX\", \"Systems\"],\n      isJoined: false,\n      creator: { firstName: \"Alex\", lastName: \"Thompson\", profileImageUrl: \"/avatars/alex.jpg\" }\n    },\n    {\n      id: 4,\n      name: \"Web3 Developers\",\n      description: \"Developers building decentralized applications, smart contracts, and blockchain solutions\",\n      memberCount: 1650,\n      postCount: 234,\n      bannerImage: \"/community-banners/web3.jpg\",\n      tags: [\"Web3\", \"Blockchain\", \"DApps\"],\n      isJoined: false,\n      creator: { firstName: \"Elena\", lastName: \"Vasquez\", profileImageUrl: \"/avatars/elena.jpg\" }\n    },\n    {\n      id: 5,\n      name: \"Data Science\",\n      description: \"Data scientists, analysts, and ML engineers sharing insights, techniques, and career advice\",\n      memberCount: 3200,\n      postCount: 567,\n      bannerImage: \"/community-banners/data.jpg\",\n      tags: [\"Data Science\", \"Analytics\", \"Python\"],\n      isJoined: true,\n      creator: { firstName: \"Michael\", lastName: \"Zhang\", profileImageUrl: \"/avatars/michael.jpg\" }\n    },\n    {\n      id: 6,\n      name: \"Remote Workers\",\n      description: \"Community for remote workers sharing tips, tools, and experiences about distributed work\",\n      memberCount: 2100,\n      postCount: 445,\n      bannerImage: \"/community-banners/remote.jpg\",\n      tags: [\"Remote Work\", \"Productivity\", \"Lifestyle\"],\n      isJoined: false,\n      creator: { firstName: \"Lisa\", lastName: \"Park\", profileImageUrl: \"/avatars/lisa.jpg\" }\n    }\n  ];\n\n  const filteredCommunities = sampleCommunities.filter(community =>\n    community.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    community.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    community.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleCreateCommunity = () => {\n    // TODO: Implement API call to create community\n    console.log(\"Creating community:\", newCommunity);\n    setCreateDialogOpen(false);\n    setNewCommunity({ name: \"\", description: \"\", tags: \"\" });\n  };\n\n  const renderCommunityCard = (community: any) => (\n    <Card key={community.id} className=\"hover:shadow-md transition-shadow duration-200\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-lg font-semibold line-clamp-1\">\n              {community.name}\n            </CardTitle>\n            <CardDescription className=\"mt-2 line-clamp-3\">\n              {community.description}\n            </CardDescription>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2 mt-3\">\n          <Avatar className=\"h-6 w-6\">\n            <AvatarImage src={community.creator.profileImageUrl} />\n            <AvatarFallback className=\"text-xs\">\n              {community.creator.firstName.charAt(0)}\n            </AvatarFallback>\n          </Avatar>\n          <span className=\"text-sm font-medium text-gray-700\">\n            {community.creator.firstName} {community.creator.lastName}\n          </span>\n        </div>\n\n        <div className=\"flex flex-wrap gap-1 mt-3\">\n          {community.tags.map((tag: string) => (\n            <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n              {tag}\n            </Badge>\n          ))}\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"pt-0\">\n        <div className=\"grid grid-cols-2 gap-4 text-center text-sm text-gray-600 mb-4\">\n          <div>\n            <div className=\"font-semibold text-gray-900\">{community.memberCount.toLocaleString()}</div>\n            <div className=\"flex items-center justify-center gap-1\">\n              <Users className=\"h-3 w-3\" />\n              Members\n            </div>\n          </div>\n          <div>\n            <div className=\"font-semibold text-gray-900\">{community.postCount}</div>\n            <div className=\"flex items-center justify-center gap-1\">\n              <FileText className=\"h-3 w-3\" />\n              Posts\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center gap-2\">\n            <Link href={`/communities/${community.id}`}>\n              <Button size=\"sm\" variant=\"outline\">\n                <Eye className=\"h-4 w-4 mr-1\" />\n                View\n              </Button>\n            </Link>\n            <Button\n              size=\"sm\"\n              variant={community.isJoined ? \"secondary\" : \"default\"}\n              onClick={() => {\n                // TODO: Implement join/leave community functionality\n                console.log(community.isJoined ? \"Leave community:\" : \"Join community:\", community.id);\n              }}\n            >\n              {community.isJoined ? \"Joined\" : \"Join\"}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderListItem = (community: any) => (\n    <Card key={community.id} className=\"hover:shadow-sm transition-shadow duration-200\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4 flex-1\">\n            <Avatar className=\"h-12 w-12\">\n              <AvatarImage src={community.creator.profileImageUrl} />\n              <AvatarFallback>\n                {community.creator.firstName.charAt(0)}\n              </AvatarFallback>\n            </Avatar>\n            \n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-semibold text-lg line-clamp-1\">{community.name}</h3>\n              <p className=\"text-gray-600 text-sm line-clamp-2 mt-1\">{community.description}</p>\n              \n              <div className=\"flex items-center space-x-4 mt-2 text-sm text-gray-500\">\n                <span className=\"flex items-center gap-1\">\n                  <Users className=\"h-3 w-3\" />\n                  {community.memberCount.toLocaleString()} members\n                </span>\n                <span className=\"flex items-center gap-1\">\n                  <FileText className=\"h-3 w-3\" />\n                  {community.postCount} posts\n                </span>\n              </div>\n              \n              <div className=\"flex flex-wrap gap-1 mt-2\">\n                {community.tags.slice(0, 3).map((tag: string) => (\n                  <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2 ml-4\">\n            <Link href={`/communities/${community.id}`}>\n              <Button size=\"sm\" variant=\"outline\">\n                <Eye className=\"h-4 w-4 mr-1\" />\n                View\n              </Button>\n            </Link>\n            <Button\n              size=\"sm\"\n              variant={community.isJoined ? \"secondary\" : \"default\"}\n              onClick={() => {\n                // TODO: Implement join/leave community functionality\n                console.log(community.isJoined ? \"Leave community:\" : \"Join community:\", community.id);\n              }}\n            >\n              {community.isJoined ? \"Joined\" : \"Join\"}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  if (isLoading) {\n    return (\n      <TwitterStyleLayout>\n        <div className=\"max-w-4xl mx-auto p-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-64 bg-gray-200 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </TwitterStyleLayout>\n    );\n  }\n\n  return (\n    <TwitterStyleLayout>\n      <div className=\"max-w-4xl mx-auto p-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Communities</h1>\n            <p className=\"text-gray-600\">Join public communities and connect with like-minded people</p>\n          </div>\n          \n          <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-purple-600 hover:bg-purple-700\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Community\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[425px]\">\n              <DialogHeader>\n                <DialogTitle>Create New Community</DialogTitle>\n                <DialogDescription>\n                  Create a public community for others to discover and join.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"name\">Community Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={newCommunity.name}\n                    onChange={(e) => setNewCommunity(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Enter community name\"\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={newCommunity.description}\n                    onChange={(e) => setNewCommunity(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Describe what this community is about\"\n                    rows={3}\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"tags\">Tags (comma-separated)</Label>\n                  <Input\n                    id=\"tags\"\n                    value={newCommunity.tags}\n                    onChange={(e) => setNewCommunity(prev => ({ ...prev, tags: e.target.value }))}\n                    placeholder=\"e.g. Tech, AI, Startups\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleCreateCommunity} disabled={!newCommunity.name.trim()}>\n                  Create Community\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Search and View Toggle */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search communities by name, description, or tags...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"grid\")}\n            >\n              <Grid className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"list\")}\n            >\n              <List className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Communities */}\n        <div className={viewMode === \"grid\" \n          ? \"grid grid-cols-1 md:grid-cols-2 gap-6\" \n          : \"space-y-4\"\n        }>\n          {filteredCommunities.map(viewMode === \"grid\" ? renderCommunityCard : renderListItem)}\n        </div>\n\n        {filteredCommunities.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50 text-gray-400\" />\n            <h3 className=\"text-lg font-medium mb-2\">No communities found</h3>\n            <p className=\"text-gray-500 mb-4\">Try adjusting your search terms or create a new community</p>\n            <Button \n              onClick={() => setCreateDialogOpen(true)}\n              className=\"bg-purple-600 hover:bg-purple-700\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Community\n            </Button>\n          </div>\n        )}\n      </div>\n    </TwitterStyleLayout>\n  );\n}","size_bytes":15371},"client/src/pages/post-detail.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, Heart, MessageCircle, Bookmark, Share, Send } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { TwitterStyleLayout } from \"@/components/layout/TwitterStyleLayout\";\nimport type { PostWithDetails, Comment } from \"@shared/schema\";\nimport { BookmarkPopover } from \"@/components/BookmarkPopover\";\n\nexport default function PostDetail() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n  const [comment, setComment] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch post details\n  const { data: post, isLoading: postLoading } = useQuery<PostWithDetails>({\n    queryKey: [`/api/posts/${id}`],\n    enabled: !!id,\n  });\n\n  // Fetch comments\n  const { data: comments = [], isLoading: commentsLoading } = useQuery<Comment[]>({\n    queryKey: [`/api/posts/${id}/comments`],\n    enabled: !!id,\n  });\n\n  // Like post mutation\n  const likePostMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(`/api/posts/${id}/like`, \"POST\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/posts/${id}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to like post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Submit comment mutation\n  const submitCommentMutation = useMutation({\n    mutationFn: async (content: string) => {\n      return await apiRequest(`/api/posts/${id}/comments`, \"POST\", { content });\n    },\n    onSuccess: () => {\n      setComment(\"\");\n      queryClient.invalidateQueries({ queryKey: [`/api/posts/${id}/comments`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/posts/${id}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      toast({\n        title: \"Success\",\n        description: \"Comment added successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add comment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitComment = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!comment.trim()) return;\n    submitCommentMutation.mutate(comment.trim());\n  };\n\n  const getInitials = (firstName?: string | null, lastName?: string | null) => {\n    const first = firstName?.charAt(0) || '';\n    const last = lastName?.charAt(0) || '';\n    return first + last || 'U';\n  };\n\n  if (postLoading) {\n    return (\n      <TwitterStyleLayout>\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </TwitterStyleLayout>\n    );\n  }\n\n  if (!post) {\n    return (\n      <TwitterStyleLayout>\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/\")}\n            className=\"mb-4\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Feed\n          </Button>\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-gray-500\">Post not found</p>\n            </CardContent>\n          </Card>\n        </div>\n      </TwitterStyleLayout>\n    );\n  }\n\n  const displayName = post.author?.firstName && post.author?.lastName \n    ? `${post.author.firstName} ${post.author.lastName}`\n    : post.author?.firstName || 'Anonymous User';\n\n  return (\n    <TwitterStyleLayout>\n      <div className=\"max-w-4xl mx-auto px-4 py-6\">\n      {/* Back button */}\n      <Button\n        variant=\"ghost\"\n        onClick={() => setLocation(\"/\")}\n        className=\"mb-4\"\n      >\n        <ArrowLeft className=\"w-4 h-4 mr-2\" />\n        Back to Feed\n      </Button>\n\n      {/* Post content */}\n      <Card className=\"mb-6\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Avatar className=\"h-12 w-12\">\n                <AvatarImage src={post.author?.profileImageUrl || undefined} />\n                <AvatarFallback className=\"bg-gradient-to-br from-purple-500 to-blue-500 text-white\">\n                  {getInitials(post.author?.firstName, post.author?.lastName)}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div>\n                <div className=\"flex items-center gap-2\">\n                  <h3 className=\"font-semibold\">{displayName}</h3>\n                  {post.userActions?.isFollowing && (\n                    <Badge variant=\"secondary\" className=\"text-xs px-2 py-0\">\n                      Following\n                    </Badge>\n                  )}\n                </div>\n                <p className=\"text-sm text-gray-500\">\n                  {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <h1 className=\"text-2xl font-bold mb-4\">{post.title}</h1>\n          <div className=\"prose max-w-none mb-6\">\n            <p className=\"whitespace-pre-wrap\">{post.content}</p>\n          </div>\n\n          {/* Action buttons */}\n          <div className=\"flex items-center justify-between pt-4 border-t\">\n            <div className=\"flex items-center gap-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"gap-2\"\n                onClick={() => likePostMutation.mutate()}\n                disabled={likePostMutation.isPending}\n              >\n                <Heart className={`w-4 h-4 ${post.userActions?.isLiked ? 'fill-red-500 text-red-500' : ''}`} />\n                {post.stats.likeCount > 0 && (\n                  <span className=\"text-sm\">{post.stats.likeCount}</span>\n                )}\n              </Button>\n              \n              <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                <MessageCircle className=\"w-4 h-4\" />\n                {post.stats.commentCount > 0 && (\n                  <span className=\"text-sm\">{post.stats.commentCount}</span>\n                )}\n              </Button>\n              \n              <BookmarkPopover \n                postId={post.id}\n                postTitle={post.title || 'Untitled Post'}\n                postContent={post.content}\n                isBookmarked={post.userActions?.isBookmarked}\n              />\n              \n              <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                <Share className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Comments section */}\n      <Card>\n        <CardHeader>\n          <h3 className=\"text-lg font-semibold\">Comments ({comments.length})</h3>\n        </CardHeader>\n        <CardContent>\n          {/* Add comment form */}\n          <form onSubmit={handleSubmitComment} className=\"mb-6\">\n            <div className=\"flex gap-3\">\n              <Textarea\n                value={comment}\n                onChange={(e) => setComment(e.target.value)}\n                placeholder=\"Add a comment...\"\n                className=\"resize-none\"\n                rows={3}\n              />\n              <Button\n                type=\"submit\"\n                disabled={!comment.trim() || submitCommentMutation.isPending}\n                className=\"h-fit\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </form>\n\n          {/* Comments list */}\n          {commentsLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"animate-pulse flex gap-3\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full\"></div>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n                    <div className=\"h-12 bg-gray-200 rounded\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : comments.length > 0 ? (\n            <div className=\"space-y-4\">\n              {comments.map((comment) => (\n                <div key={comment.id} className=\"flex gap-3\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={comment.author?.profileImageUrl || undefined} />\n                    <AvatarFallback className=\"bg-gradient-to-br from-purple-500 to-blue-500 text-white text-xs\">\n                      {getInitials(comment.author?.firstName, comment.author?.lastName)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-semibold text-sm\">\n                        {comment.author?.firstName && comment.author?.lastName \n                          ? `${comment.author.firstName} ${comment.author.lastName}`\n                          : comment.author?.firstName || 'Anonymous User'}\n                      </span>\n                      <span className=\"text-xs text-gray-500\">\n                        {formatDistanceToNow(new Date(comment.createdAt), { addSuffix: true })}\n                      </span>\n                    </div>\n                    <p className=\"text-sm whitespace-pre-wrap\">{comment.content}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-gray-500 text-center py-8\">No comments yet. Be the first to comment!</p>\n          )}\n        </CardContent>\n      </Card>\n      </div>\n    </TwitterStyleLayout>\n  );\n}","size_bytes":10543}},"version":1}