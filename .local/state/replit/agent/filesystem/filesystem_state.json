{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# SnappyLearn - Document Management & AI Chat Application\n\n## Overview\n\nSnappyLearn is a full-stack document management application with AI-powered chat capabilities. Users can create document collections, upload files, and engage in intelligent conversations with an AI assistant that can reference and analyze the uploaded documents. The application supports both independent chat conversations and collection-based conversations that leverage document context.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query for server state management\n- **UI Components**: Radix UI primitives with shadcn/ui design system\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **Build Tool**: Vite for development and production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon serverless PostgreSQL\n- **AI Integration**: OpenAI GPT-4o for intelligent responses\n- **File Handling**: Multer for file uploads with in-memory storage\n- **Session Management**: PostgreSQL-based sessions\n\n### Database Schema\nThe application uses a relational database with the following key entities:\n- **Users**: User authentication and profiles\n- **Collections**: Document groupings with metadata\n- **Documents**: File storage with content and metadata\n- **Conversations**: Chat sessions (independent or collection-based)\n- **Messages**: Individual chat messages with optional source references\n\n## Key Components\n\n### Document Management\n- **File Upload**: Supports text files, PDFs, markdown, and CSV\n- **Collections**: Logical grouping of related documents\n- **Document Processing**: Content extraction and storage for AI analysis\n- **File Validation**: Type checking and size limits (10MB max)\n\n### AI Chat System\n- **Independent Chat**: General AI assistance without document context\n- **Collection Chat**: Context-aware responses using uploaded documents\n- **Source Attribution**: AI responses include document references and excerpts\n- **Conversation History**: Persistent chat sessions with message threading\n\n### User Interface\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Dashboard**: Central hub for collections and recent conversations\n- **Real-time Updates**: Optimistic updates and query invalidation\n- **File Upload**: Drag-and-drop interface with progress indicators\n- **Chat Interface**: Clean message display with source attribution\n\n## Data Flow\n\n### Document Upload Flow\n1. User selects/drops files in collection interface\n2. Client validates file types and sizes\n3. Files uploaded via multipart form data to backend\n4. Server processes and stores document content\n5. Database updated with document metadata\n6. Client cache invalidated to reflect new documents\n\n### Chat Flow\n1. User submits message in chat interface\n2. System determines conversation type (independent/collection)\n3. For collection chats: relevant documents retrieved from database\n4. OpenAI API called with message and document context\n5. AI response generated with source attribution\n6. Message and response stored in database\n7. Client interface updated with new messages\n\n### Collection Management\n1. User creates collection with name and description\n2. Documents can be uploaded to collection\n3. Collection stats (document count) automatically calculated\n4. Collection-based conversations reference all documents in collection\n\n## External Dependencies\n\n### Core Dependencies\n- **OpenAI**: GPT-4o model for AI responses and conversation generation\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: Type-safe database operations\n- **TanStack Query**: Server state management and caching\n- **Radix UI**: Accessible component primitives\n\n### Development Tools\n- **Vite**: Build tool with HMR and optimized production builds\n- **TypeScript**: Type safety across frontend and backend\n- **Tailwind CSS**: Utility-first styling framework\n- **ESBuild**: Fast JavaScript bundling for production\n\n## Deployment Strategy\n\n### Development Environment\n- **Runtime**: Node.js 20 with replit environment\n- **Development Server**: Vite dev server with Express backend\n- **Hot Reload**: Both frontend and backend support hot reloading\n- **Database**: Shared PostgreSQL instance for development\n\n### Production Build\n1. Frontend built with Vite to static assets\n2. Backend bundled with ESBuild to single Node.js file\n3. Static assets served from Express server\n4. Database migrations applied via Drizzle Kit\n5. Environment variables for API keys and database connection\n\n### Scaling Considerations\n- Stateless backend design allows horizontal scaling\n- Database connection pooling for concurrent requests\n- File storage currently in-memory (should migrate to persistent storage)\n- AI API rate limiting and error handling implemented\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n- January 28, 2025: Major architectural transformation to community-based social learning platform\n  - Pivoted from traditional document management to community-focused platform inspired by Glasp\n  - Restructured navigation: Home â†’ Community (main feed), added Discover, My Collections, Chat\n  - Added private_status_type_id to collections table for public/private sharing capabilities\n  - Created floating draggable chat widget that maximizes to dedicated /chat route\n  - Implemented new routes: /community (main), /discover (public collections), /my-collections, /chat\n  - Transformed existing dashboard functionality into dedicated /chat experience\n  - Built community feed with social discovery features and public collection browsing\n  - Maintained all existing chat and AI functionality while adding social learning features\n  - Created Glasp-inspired minimalist design adapted for SnappyLearn branding\n  - Integrated existing Google OAuth authentication system into new social landing page\n  - Preserved all working authentication components while enhancing user experience\n\n- January 28, 2025: Fixed critical authentication and database schema issues\n  - Added missing role, is_active, tenant_id, and provider columns to users table for multi-tenant SaaS support\n  - Fixed authentication duplicate key errors with improved upsertUser method\n  - Corrected artifacts hooks to use proper apiRequest function signature (method, url, data)\n  - Resolved \"Failed to execute 'fetch': '/api/artifacts' is not a valid HTTP method\" error\n  - Updated authentication middleware to properly handle new user schema structure\n  - Successfully verified authentication flow and API endpoints are working properly\n  - Prepared Google OAuth setup documentation with current Supabase project details\n\n## Recent Changes\n\n- July 17, 2025: Successfully implemented PostHog React SDK integration\n  - Removed legacy HTML script-based PostHog implementation from index.html\n  - Installed posthog-js package for React SDK integration\n  - Initialized PostHog in main.tsx with provided API key (phc_2jUnDMt7gEMy2NZgH6e09AhCS7UbusZYfqRg9bgW906)\n  - Updated Analytics service to use direct posthog import instead of window.posthog\n  - Created custom usePostHog, usePageView, and useTrackAction hooks for React components\n  - Enhanced dashboard with PostHog React hooks for improved event tracking\n  - Successfully verified PostHog React SDK functionality with browser console testing\n  - Fixed authentication redirect issues using window.location.replace() with 100ms timeout\n  - Added /api/auth/user endpoint for Google OAuth token validation and session management\n  - Resolved critical authentication flow bugs preventing dashboard access after sign-in\n\n- July 17, 2025: Fully implemented and tested Google OAuth authentication system\n  - Added @react-oauth/google package for Google OAuth integration\n  - Created GoogleOAuthWrapper provider to handle Google OAuth configuration\n  - Enhanced AuthContext with signInWithGoogle method for Google authentication\n  - Added GoogleSignInButton and GoogleSignUpButton components with Google branding\n  - Implemented complete backend Google OAuth route with JWT token processing\n  - Fixed user lookup by email to handle existing users from different auth providers\n  - Added Google login/signup buttons to existing authentication forms\n  - Integrated PostHog analytics tracking for Google authentication events\n  - Added environment variables for Google OAuth configuration (GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET)\n  - Created seamless user experience with \"Continue with Google\" or email/password options\n  - Enhanced user creation flow to handle Google user metadata (name, avatar, provider)\n  - Updated AuthContext to handle custom token system for Google OAuth users\n  - Successfully tested Google OAuth flow for existing users with full token generation\n  - Created comprehensive test suite to validate Google OAuth integration\n\n- June 26, 2025: Implemented and refined Replit authentication system\n  - Added secure Replit OpenID Connect authentication with session management\n  - Created simplified landing page with clear sign-in call-to-action\n  - Updated database schema to support string-based user IDs from Replit Auth\n  - Modified all API endpoints to use consistent user ID resolution across routes\n  - Enhanced user authentication middleware with token refresh functionality\n  - Integrated PostgreSQL-based session storage for production reliability\n  - Added user profile display with Replit profile images and user information\n  - Ensured complete data isolation between different user accounts\n  - Protected all routes and data operations with proper user authorization\n  - Rolled back multi-provider OAuth due to strategy registration issues, keeping stable Replit-only auth\n\n- June 26, 2025: UI improvements and rebranding\n  - Fixed sidebar plus icon visibility and positioning issues\n  - Made plus icons more interactive with hover effects and tooltips\n  - Rebranded application from \"MemPod AI\" to \"SnappyLearn\" across all components\n\n- June 27, 2025: Complete rebranding finalization\n  - Updated all remaining instances of \"MemPod\" to \"SnappyLearn\" in:\n    - Landing page title and footer\n    - Dashboard welcome message\n    - AI assistant identity in OpenAI service\n    - Message component AI label\n  - Ensured consistent \"SnappyLearn\" branding across entire application\n\n- June 27, 2025: Custom logo implementation\n  - Replaced all Brain icons with custom SnappyLearn logo throughout application\n  - Updated components: Landing page, Dashboard, Sidebar, Message component, Simple landing\n  - Added custom favicon using SnappyLearn logo for browser tab branding\n  - Maintained consistent visual identity with purple gradient brand colors\n\n- June 27, 2025: Chat attachment functionality implementation\n  - Added paperclip attachment button positioned inside chatbox next to send button\n  - Implemented file validation (10MB limit, supports text, PDF, markdown, CSV, Word docs)\n  - Added visual file preview with remove option before sending\n  - Enhanced backend conversation creation to process file attachments\n  - Automatic text extraction from various file types for AI processing\n  - File content seamlessly integrated with user messages for comprehensive AI responses\n\n- June 27, 2025: Updated branding with transparent logos\n  - Replaced all full logos with new transparent SnappyLearn logo versions\n  - Updated sidebar to use complete transparent logo instead of separate icon and text\n  - Applied transparent logos to landing page, dashboard, messages, and simple landing\n  - Maintained consistent visual identity with professional transparent background\n\n- July 8, 2025: Comprehensive Artifact Integration Implementation\n  - Enhanced database schema with artifacts table and artifact metadata fields in messages\n  - Implemented artifact persistence during chat conversations with automatic type detection\n  - Fixed chat history persistence for collection-based conversations with artifact context\n  - Created dedicated /artifacts page with browse and create functionality\n  - Built educational artifact tools: Code Playground, Math Visualizer, Quiz Builder\n  - Added artifact management API endpoints with full CRUD operations\n  - Enhanced OpenAI service to include conversation history in collection responses\n  - Integrated artifact cards in chat messages with view/manage capabilities\n  - Added artifacts section to sidebar navigation with interactive tools access\n  - Implemented artifact storage and retrieval system with version support\n  - Enhanced message system to store artifact metadata alongside chat content\n  - Added artifact creation templates for educational tools and interactive content\n  - Updated artifacts page to mirror Claude's interface with \"Inspiration\" tab showing sample artifacts\n  - Restored SnappyLearn branding across all landing and authentication pages\n  - Redesigned sidebar artifacts section with sample educational tools showcase\n\n## Changelog\n\nChangelog:\n- June 26, 2025. Initial setup and sidebar layout implementation\n- July 8, 2025. Complete artifact integration with educational tools and persistence","size_bytes":13296},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth-config.ts":{"content":"import { supabase } from \"./lib/supabase\";\n\n// Helper function to configure Supabase for development\nexport async function configureSupabaseForDevelopment() {\n  try {\n    // Note: Auth settings are typically configured in the Supabase dashboard\n    // For development, we'll handle email confirmation in the signup process\n    console.log('Supabase auth configured for development mode');\n  } catch (error) {\n    console.warn('Auth configuration warning:', error);\n  }\n}\n\n// Helper function to auto-confirm users for development\nexport async function autoConfirmUser(userId: string) {\n  try {\n    const { error } = await supabase.auth.admin.updateUserById(userId, {\n      email_confirm: true,\n    });\n    \n    if (error) {\n      console.warn('Could not auto-confirm user:', error.message);\n    } else {\n      console.log('User auto-confirmed for development');\n    }\n  } catch (error) {\n    console.warn('Auto-confirm warning:', error);\n  }\n}","size_bytes":942},"server/auth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4220},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// Make Supabase environment variables available for Vite\nprocess.env.VITE_SUPABASE_URL = process.env.SUPABASE_URL;\nprocess.env.VITE_SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2106},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy as OpenIDStrategy, type VerifyFunction } from \"openid-client/passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { Strategy as GitHubStrategy } from \"passport-github2\";\nimport { Strategy as FacebookStrategy } from \"passport-facebook\";\nimport { Strategy as TwitterStrategy } from \"passport-twitter\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport bcrypt from \"bcryptjs\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  userInfo: any,\n  provider: string = 'replit'\n) {\n  let userId: string;\n  let email: string;\n  let firstName: string | null = null;\n  let lastName: string | null = null;\n  let profileImageUrl: string | null = null;\n\n  // Handle different provider data formats\n  switch (provider) {\n    case 'replit':\n      userId = userInfo[\"sub\"];\n      email = userInfo[\"email\"];\n      firstName = userInfo[\"first_name\"];\n      lastName = userInfo[\"last_name\"];\n      profileImageUrl = userInfo[\"profile_image_url\"];\n      break;\n    case 'google':\n      userId = `google_${userInfo.id}`;\n      email = userInfo.emails?.[0]?.value || userInfo.email;\n      firstName = userInfo.name?.givenName;\n      lastName = userInfo.name?.familyName;\n      profileImageUrl = userInfo.photos?.[0]?.value;\n      break;\n    case 'github':\n      userId = `github_${userInfo.id}`;\n      email = userInfo.emails?.[0]?.value || userInfo.email;\n      firstName = userInfo.displayName?.split(' ')[0] || userInfo.username;\n      lastName = userInfo.displayName?.split(' ').slice(1).join(' ') || null;\n      profileImageUrl = userInfo.photos?.[0]?.value || userInfo.avatar_url;\n      break;\n    case 'facebook':\n      userId = `facebook_${userInfo.id}`;\n      email = userInfo.emails?.[0]?.value || userInfo.email;\n      firstName = userInfo.name?.givenName || userInfo.first_name;\n      lastName = userInfo.name?.familyName || userInfo.last_name;\n      profileImageUrl = userInfo.photos?.[0]?.value;\n      break;\n    case 'twitter':\n      userId = `twitter_${userInfo.id}`;\n      email = userInfo.emails?.[0]?.value || userInfo.email;\n      firstName = userInfo.displayName?.split(' ')[0] || userInfo.username;\n      lastName = userInfo.displayName?.split(' ').slice(1).join(' ') || null;\n      profileImageUrl = userInfo.photos?.[0]?.value;\n      break;\n    case 'local':\n      userId = `local_${userInfo.email}`;\n      email = userInfo.email;\n      firstName = userInfo.firstName;\n      lastName = userInfo.lastName;\n      break;\n    default:\n      throw new Error(`Unsupported provider: ${provider}`);\n  }\n\n  await storage.upsertUser({\n    id: userId,\n    email,\n    firstName,\n    lastName,\n    profileImageUrl,\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Replit OpenID Connect Strategy\n  if (process.env.REPLIT_DOMAINS) {\n    const config = await getOidcConfig();\n\n    const verify: VerifyFunction = async (\n      tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n      verified: passport.AuthenticateCallback\n    ) => {\n      const user = { provider: 'replit' };\n      updateUserSession(user, tokens);\n      await upsertUser(tokens.claims(), 'replit');\n      verified(null, user);\n    };\n\n    for (const domain of process.env.REPLIT_DOMAINS.split(\",\")) {\n      const strategy = new OpenIDStrategy(\n        {\n          name: `replitauth:${domain}`,\n          config,\n          scope: \"openid email profile offline_access\",\n          callbackURL: `https://${domain}/api/auth/replit/callback`,\n        },\n        verify,\n      );\n      passport.use(strategy);\n    }\n  }\n\n  // Google OAuth Strategy\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    passport.use(new GoogleStrategy({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL: \"/api/auth/google/callback\"\n    }, async (accessToken, refreshToken, profile, done) => {\n      try {\n        await upsertUser(profile, 'google');\n        done(null, { provider: 'google', profile });\n      } catch (error) {\n        done(error);\n      }\n    }));\n  }\n\n  // GitHub OAuth Strategy\n  if (process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET) {\n    passport.use(new GitHubStrategy({\n      clientID: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\n      callbackURL: \"/api/auth/github/callback\"\n    }, async (accessToken: any, refreshToken: any, profile: any, done: any) => {\n      try {\n        await upsertUser(profile, 'github');\n        done(null, { provider: 'github', profile });\n      } catch (error) {\n        done(error);\n      }\n    }));\n  }\n\n  // Facebook OAuth Strategy\n  if (process.env.FACEBOOK_CLIENT_ID && process.env.FACEBOOK_CLIENT_SECRET) {\n    passport.use(new FacebookStrategy({\n      clientID: process.env.FACEBOOK_CLIENT_ID,\n      clientSecret: process.env.FACEBOOK_CLIENT_SECRET,\n      callbackURL: \"/api/auth/facebook/callback\",\n      profileFields: ['id', 'emails', 'name', 'picture']\n    }, async (accessToken: any, refreshToken: any, profile: any, done: any) => {\n      try {\n        await upsertUser(profile, 'facebook');\n        done(null, { provider: 'facebook', profile });\n      } catch (error) {\n        done(error);\n      }\n    }));\n  }\n\n  // Twitter OAuth Strategy\n  if (process.env.TWITTER_CONSUMER_KEY && process.env.TWITTER_CONSUMER_SECRET) {\n    passport.use(new TwitterStrategy({\n      consumerKey: process.env.TWITTER_CONSUMER_KEY,\n      consumerSecret: process.env.TWITTER_CONSUMER_SECRET,\n      callbackURL: \"/api/auth/twitter/callback\",\n      includeEmail: true\n    }, async (token: any, tokenSecret: any, profile: any, done: any) => {\n      try {\n        await upsertUser(profile, 'twitter');\n        done(null, { provider: 'twitter', profile });\n      } catch (error) {\n        done(error);\n      }\n    }));\n  }\n\n  // Local Strategy (Email/Password)\n  passport.use(new LocalStrategy({\n    usernameField: 'email',\n    passwordField: 'password'\n  }, async (email, password, done) => {\n    try {\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.passwordHash) {\n        return done(null, false, { message: 'Invalid credentials' });\n      }\n      \n      const isValid = await bcrypt.compare(password, user.passwordHash);\n      if (!isValid) {\n        return done(null, false, { message: 'Invalid credentials' });\n      }\n      \n      done(null, { provider: 'local', profile: user });\n    } catch (error) {\n      done(error);\n    }\n  }));\n\n  passport.serializeUser((user: any, cb) => cb(null, user));\n  passport.deserializeUser((user: any, cb) => cb(null, user));\n\n  // Authentication routes\n  setupAuthRoutes(app);\n}\n\nfunction setupAuthRoutes(app: Express) {\n  // Replit Auth Routes\n  if (process.env.REPLIT_DOMAINS) {\n    app.get(\"/api/auth/replit\", (req, res, next) => {\n      passport.authenticate(`replitauth:${req.hostname}`, {\n        prompt: \"login consent\",\n        scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n      })(req, res, next);\n    });\n\n    app.get(\"/api/auth/replit/callback\", (req, res, next) => {\n      passport.authenticate(`replitauth:${req.hostname}`, {\n        successReturnToOrRedirect: \"/\",\n        failureRedirect: \"/auth?error=replit_failed\",\n      })(req, res, next);\n    });\n  }\n\n  // Google Auth Routes\n  app.get(\"/api/auth/google\", \n    passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] })\n  );\n\n  app.get(\"/api/auth/google/callback\", \n    passport.authenticate(\"google\", { \n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/auth?error=google_failed\" \n    })\n  );\n\n  // GitHub Auth Routes\n  app.get(\"/api/auth/github\", \n    passport.authenticate(\"github\", { scope: [\"user:email\"] })\n  );\n\n  app.get(\"/api/auth/github/callback\", \n    passport.authenticate(\"github\", { \n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/auth?error=github_failed\" \n    })\n  );\n\n  // Facebook Auth Routes\n  app.get(\"/api/auth/facebook\", \n    passport.authenticate(\"facebook\", { scope: [\"email\"] })\n  );\n\n  app.get(\"/api/auth/facebook/callback\", \n    passport.authenticate(\"facebook\", { \n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/auth?error=facebook_failed\" \n    })\n  );\n\n  // Twitter Auth Routes\n  app.get(\"/api/auth/twitter\", \n    passport.authenticate(\"twitter\")\n  );\n\n  app.get(\"/api/auth/twitter/callback\", \n    passport.authenticate(\"twitter\", { \n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/auth?error=twitter_failed\" \n    })\n  );\n\n  // Local Auth Routes (Email/Password)\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      // Hash password\n      const passwordHash = await bcrypt.hash(password, 12);\n      \n      // Create user\n      const user = await storage.createUser({\n        id: `local_${email}`,\n        email,\n        firstName,\n        lastName,\n        passwordHash,\n        emailVerified: false,\n      });\n\n      // Log user in\n      req.login({ provider: 'local', profile: user }, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Registration successful but login failed\" });\n        }\n        res.json({ message: \"Registration successful\", user });\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", \n    passport.authenticate(\"local\", { \n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/auth?error=login_failed\" \n    })\n  );\n\n  // Logout route\n  app.get(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.redirect(\"/\");\n    });\n  });\n\n  // Legacy routes for backward compatibility\n  app.get(\"/api/login\", (req, res) => {\n    res.redirect(\"/api/auth/replit\");\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    res.redirect(\"/api/auth/logout\");\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  // Handle Replit authentication with token refresh\n  if (user.provider === 'replit' && user.expires_at) {\n    const now = Math.floor(Date.now() / 1000);\n    if (now <= user.expires_at) {\n      return next();\n    }\n\n    const refreshToken = user.refresh_token;\n    if (!refreshToken) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    try {\n      const config = await getOidcConfig();\n      const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n      updateUserSession(user, tokenResponse);\n      return next();\n    } catch (error) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n  }\n\n  // Handle other OAuth providers (Google, GitHub, Facebook, Twitter) and local auth\n  if (user.provider && (user.profile || user.provider === 'local')) {\n    return next();\n  }\n\n  return res.status(401).json({ message: \"Unauthorized\" });\n};","size_bytes":12873},"server/routes-old.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertCollectionSchema, \n  insertDocumentSchema, \n  insertConversationSchema, \n  insertMessageSchema \n} from \"@shared/schema\";\nimport { generateIndependentResponse, generateCollectionResponse, generateConversationTitle } from \"./services/openai\";\nimport multer from \"multer\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Accept text files and PDFs\n    const allowedTypes = ['text/plain', 'text/markdown', 'application/pdf', 'text/csv'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Unsupported file type'));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Collections endpoints\n  app.get(\"/api/collections\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const collections = await storage.getCollections(userId);\n      res.json(collections);\n    } catch (error) {\n      console.error(\"Error fetching collections:\", error);\n      res.status(500).json({ error: \"Failed to fetch collections\" });\n    }\n  });\n\n  app.get(\"/api/collections/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const collection = await storage.getCollection(id, DEMO_USER_ID);\n      \n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n\n      res.json(collection);\n    } catch (error) {\n      console.error(\"Error fetching collection:\", error);\n      res.status(500).json({ error: \"Failed to fetch collection\" });\n    }\n  });\n\n  app.post(\"/api/collections\", async (req, res) => {\n    try {\n      const validatedData = insertCollectionSchema.parse({\n        ...req.body,\n        userId: DEMO_USER_ID,\n      });\n      \n      const collection = await storage.createCollection(validatedData);\n      res.status(201).json(collection);\n    } catch (error) {\n      console.error(\"Error creating collection:\", error);\n      res.status(400).json({ error: \"Failed to create collection\" });\n    }\n  });\n\n  app.delete(\"/api/collections/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteCollection(id, DEMO_USER_ID);\n      \n      if (!deleted) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting collection:\", error);\n      res.status(500).json({ error: \"Failed to delete collection\" });\n    }\n  });\n\n  // Documents endpoints\n  app.get(\"/api/collections/:id/documents\", async (req, res) => {\n    try {\n      const collectionId = parseInt(req.params.id);\n      const collection = await storage.getCollection(collectionId, DEMO_USER_ID);\n      \n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n\n      const documents = await storage.getDocuments(collectionId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ error: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.post(\"/api/collections/:id/documents\", upload.single('file'), async (req, res) => {\n    try {\n      const collectionId = parseInt(req.params.id);\n      const collection = await storage.getCollection(collectionId, DEMO_USER_ID);\n      \n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const validatedData = insertDocumentSchema.parse({\n        name: req.file.originalname,\n        content: req.file.buffer.toString('utf-8'),\n        mimeType: req.file.mimetype,\n        size: req.file.size,\n        collectionId,\n      });\n      \n      const document = await storage.createDocument(validatedData);\n      res.status(201).json(document);\n    } catch (error) {\n      console.error(\"Error uploading document:\", error);\n      res.status(400).json({ error: \"Failed to upload document\" });\n    }\n  });\n\n  app.delete(\"/api/documents/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteDocument(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ error: \"Document not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting document:\", error);\n      res.status(500).json({ error: \"Failed to delete document\" });\n    }\n  });\n\n  // Conversations endpoints\n  app.get(\"/api/conversations\", async (req, res) => {\n    try {\n      const conversations = await storage.getConversations(DEMO_USER_ID);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ error: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.get(\"/api/conversations/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const conversation = await storage.getConversation(id, DEMO_USER_ID);\n      \n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n\n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Error fetching conversation:\", error);\n      res.status(500).json({ error: \"Failed to fetch conversation\" });\n    }\n  });\n\n  app.post(\"/api/conversations\", async (req, res) => {\n    try {\n      const { message, collectionId, type } = req.body;\n\n      if (!message || !type) {\n        return res.status(400).json({ error: \"Message and type are required\" });\n      }\n\n      // Generate conversation title\n      const title = await generateConversationTitle(message);\n\n      // Create conversation\n      const validatedConversation = insertConversationSchema.parse({\n        title,\n        type,\n        collectionId: collectionId || null,\n        userId: DEMO_USER_ID,\n      });\n      \n      const conversation = await storage.createConversation(validatedConversation);\n\n      // Create user message\n      const userMessage = await storage.createMessage({\n        content: message,\n        role: \"user\",\n        conversationId: conversation.id,\n        sources: null,\n      });\n\n      // Generate AI response\n      let aiResponse;\n      if (type === \"collection\" && collectionId) {\n        const documents = await storage.getDocuments(collectionId);\n        const collection = await storage.getCollection(collectionId, DEMO_USER_ID);\n        aiResponse = await generateCollectionResponse(message, documents, collection?.name || \"Collection\");\n      } else {\n        aiResponse = await generateIndependentResponse(message);\n      }\n\n      // Create AI message\n      const aiMessage = await storage.createMessage({\n        content: aiResponse.content,\n        role: \"assistant\",\n        conversationId: conversation.id,\n        sources: aiResponse.sources || null,\n      });\n\n      res.status(201).json({\n        conversation,\n        messages: [userMessage, aiMessage],\n      });\n    } catch (error) {\n      console.error(\"Error creating conversation:\", error);\n      res.status(500).json({ error: \"Failed to create conversation\" });\n    }\n  });\n\n  // Messages endpoints\n  app.get(\"/api/conversations/:id/messages\", async (req, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const conversation = await storage.getConversation(conversationId, DEMO_USER_ID);\n      \n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n\n      const messages = await storage.getMessages(conversationId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ error: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/conversations/:id/messages\", async (req, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const { content } = req.body;\n\n      if (!content) {\n        return res.status(400).json({ error: \"Message content is required\" });\n      }\n\n      const conversation = await storage.getConversation(conversationId, DEMO_USER_ID);\n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n\n      // Create user message\n      const userMessage = await storage.createMessage({\n        content,\n        role: \"user\",\n        conversationId,\n        sources: null,\n      });\n\n      // Generate AI response\n      let aiResponse;\n      if (conversation.type === \"collection\" && conversation.collectionId) {\n        const documents = await storage.getDocuments(conversation.collectionId);\n        const collection = await storage.getCollection(conversation.collectionId, DEMO_USER_ID);\n        aiResponse = await generateCollectionResponse(content, documents, collection?.name || \"Collection\");\n      } else {\n        aiResponse = await generateIndependentResponse(content);\n      }\n\n      // Create AI message\n      const aiMessage = await storage.createMessage({\n        content: aiResponse.content,\n        role: \"assistant\",\n        conversationId,\n        sources: aiResponse.sources || null,\n      });\n\n      // Update conversation timestamp\n      await storage.updateConversation(conversationId, {});\n\n      res.status(201).json([userMessage, aiMessage]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      res.status(500).json({ error: \"Failed to send message\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10350},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupSupabaseAuth, isAuthenticated, getUserId } from \"./supabaseAuth\";\nimport { setupAuthRoutes } from \"./routes/auth\";\nimport { setupGoogleAuth } from \"./routes/googleAuth\";\nimport { registerAdminRoutes } from \"./routes/admin\";\nimport { \n  insertCollectionSchema, \n  insertDocumentSchema, \n  insertConversationSchema, \n  insertMessageSchema \n} from \"@shared/schema\";\nimport { generateIndependentResponse, generateCollectionResponse, generateConversationTitle } from \"./services/openai\";\nimport multer from \"multer\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Accept only PDF and TXT files\n    const allowedTypes = [\n      'text/plain',\n      'application/pdf'\n    ];\n    \n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Unsupported file type'));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup Supabase authentication\n  await setupSupabaseAuth(app);\n  \n  // Setup custom auth routes\n  setupAuthRoutes(app);\n  \n  // Setup Google OAuth routes\n  setupGoogleAuth(app);\n\n  // Setup admin routes\n  registerAdminRoutes(app);\n\n  // Test route to make current user admin (for development)\n  app.post(\"/api/test/make-admin\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      await storage.updateUserRole(userId, 'admin', 'system');\n      res.json({ message: \"User is now admin\" });\n    } catch (error) {\n      console.error(\"Error making user admin:\", error);\n      res.status(500).json({ error: \"Failed to make user admin\" });\n    }\n  });\n\n  // Auth routes are handled by setupSupabaseAuth\n\n  // Collections endpoints\n  app.get(\"/api/collections\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      const collections = await storage.getCollections(userId);\n      res.json(collections);\n    } catch (error) {\n      console.error(\"Error fetching collections:\", error);\n      res.status(500).json({ error: \"Failed to fetch collections\" });\n    }\n  });\n\n  app.get(\"/api/collections/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getUserId(req);\n      const collection = await storage.getCollection(id, userId);\n      \n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n\n      res.json(collection);\n    } catch (error) {\n      console.error(\"Error fetching collection:\", error);\n      res.status(500).json({ error: \"Failed to fetch collection\" });\n    }\n  });\n\n  app.post(\"/api/collections\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      const validatedData = insertCollectionSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const collection = await storage.createCollection(validatedData);\n      res.status(201).json(collection);\n    } catch (error) {\n      console.error(\"Error creating collection:\", error);\n      res.status(500).json({ error: \"Failed to create collection\" });\n    }\n  });\n\n  app.put(\"/api/collections/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updates = insertCollectionSchema.partial().parse(req.body);\n      \n      const collection = await storage.updateCollection(id, updates);\n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n      \n      res.json(collection);\n    } catch (error) {\n      console.error(\"Error updating collection:\", error);\n      res.status(500).json({ error: \"Failed to update collection\" });\n    }\n  });\n\n  app.delete(\"/api/collections/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getUserId(req);\n      const success = await storage.deleteCollection(id, userId);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting collection:\", error);\n      res.status(500).json({ error: \"Failed to delete collection\" });\n    }\n  });\n\n  // Document endpoints\n  app.get(\"/api/collections/:id/documents\", isAuthenticated, async (req: any, res) => {\n    try {\n      const collectionId = parseInt(req.params.id);\n      const userId = getUserId(req);\n      \n      // Verify user owns the collection\n      const collection = await storage.getCollection(collectionId, userId);\n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n      \n      const documents = await storage.getDocuments(collectionId, userId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ error: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.post(\"/api/collections/:id/documents\", isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      const collectionId = parseInt(req.params.id);\n      const userId = getUserId(req);\n      \n      // Verify user owns the collection\n      const collection = await storage.getCollection(collectionId, userId);\n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n      \n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      let content = '';\n      \n      // Extract text based on file type\n      if (req.file.mimetype === 'application/pdf') {\n        try {\n          const pdf = await import('pdf-parse');\n          const pdfData = await pdf.default(req.file.buffer);\n          content = pdfData.text;\n        } catch (error) {\n          console.error(\"Error extracting PDF text:\", error);\n          return res.status(400).json({ error: \"Failed to extract text from PDF\" });\n        }\n      } else if (req.file.mimetype === 'text/plain') {\n        content = req.file.buffer.toString('utf-8');\n      } else {\n        return res.status(400).json({ error: \"Unsupported file type\" });\n      }\n\n      const validatedData = insertDocumentSchema.parse({\n        name: req.file.originalname,\n        content,\n        mimeType: req.file.mimetype,\n        size: req.file.size,\n        collectionId,\n      });\n\n      const document = await storage.createDocument(validatedData);\n      res.status(201).json(document);\n    } catch (error) {\n      console.error(\"Error uploading document:\", error);\n      res.status(500).json({ error: \"Failed to upload document\" });\n    }\n  });\n\n  app.delete(\"/api/documents/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getUserId(req);\n      \n      // Get document to verify ownership through collection\n      const document = await storage.getDocument(id);\n      if (!document) {\n        return res.status(404).json({ error: \"Document not found\" });\n      }\n      \n      // Verify user owns the collection\n      const collection = await storage.getCollection(document.collectionId, userId);\n      if (!collection) {\n        return res.status(404).json({ error: \"Collection not found\" });\n      }\n      \n      const success = await storage.deleteDocument(id, userId);\n      if (!success) {\n        return res.status(404).json({ error: \"Document not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting document:\", error);\n      res.status(500).json({ error: \"Failed to delete document\" });\n    }\n  });\n\n  // Conversations endpoints\n  app.get(\"/api/conversations\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      const conversations = await storage.getConversations(userId);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ error: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.get(\"/api/conversations/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getUserId(req);\n      const conversation = await storage.getConversation(id, userId);\n      \n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n      \n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Error fetching conversation:\", error);\n      res.status(500).json({ error: \"Failed to fetch conversation\" });\n    }\n  });\n\n  // Update multer configuration to support more file types\n  const conversationUpload = multer({\n    storage: multer.memoryStorage(),\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      const allowedTypes = [\n        'text/plain',\n        'text/markdown',\n        'text/csv',\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      ];\n      \n      if (allowedTypes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error('Unsupported file type'));\n      }\n    },\n  });\n\n  app.post(\"/api/conversations\", isAuthenticated, conversationUpload.array('attachments'), async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      const { message, type, collectionId } = req.body;\n      const files = req.files as Express.Multer.File[] || [];\n\n      // Parse collectionId if it's a string from FormData\n      const parsedCollectionId = collectionId ? parseInt(collectionId) : undefined;\n\n      // Validate collection ownership if provided\n      if (parsedCollectionId) {\n        const collection = await storage.getCollection(parsedCollectionId, userId);\n        if (!collection) {\n          return res.status(404).json({ error: \"Collection not found\" });\n        }\n      }\n\n      // Process attached files if any\n      let attachmentContent = \"\";\n      if (files.length > 0) {\n        const attachmentParts: string[] = [];\n        \n        for (const file of files) {\n          let content = \"\";\n          \n          // Extract text based on file type\n          if (file.mimetype === 'application/pdf') {\n            try {\n              const pdf = await import('pdf-parse');\n              const pdfData = await pdf.default(file.buffer);\n              content = pdfData.text;\n            } catch (error) {\n              console.error(\"Error extracting PDF text:\", error);\n              return res.status(400).json({ error: `Failed to extract text from ${file.originalname}` });\n            }\n          } else if (file.mimetype === 'text/plain' || file.mimetype === 'text/markdown' || file.mimetype === 'text/csv') {\n            content = file.buffer.toString('utf-8');\n          } else {\n            return res.status(400).json({ error: `Unsupported file type: ${file.originalname}` });\n          }\n          \n          attachmentParts.push(`--- Content from ${file.originalname} ---\\n${content}\\n`);\n        }\n        \n        attachmentContent = attachmentParts.join('\\n');\n      }\n\n      // Combine message with attachment content\n      const fullMessage = attachmentContent \n        ? `${message}\\n\\n${attachmentContent}` \n        : message;\n\n      // Generate conversation title from first message\n      const title = await generateConversationTitle(message);\n\n      const conversationData = insertConversationSchema.parse({\n        title,\n        type,\n        collectionId: parsedCollectionId,\n        userId,\n      });\n\n      const conversation = await storage.createConversation(conversationData);\n\n      // Create user message\n      const userMessage = await storage.createMessage({\n        content: fullMessage,\n        role: \"user\",\n        conversationId: conversation.id,\n      });\n\n      // Generate AI response\n      let aiResponse;\n      if (type === \"collection\" && parsedCollectionId) {\n        const documents = await storage.getDocuments(parsedCollectionId, userId);\n        const collection = await storage.getCollection(parsedCollectionId, userId);\n        const collectionName = collection?.name || \"Collection\";\n        aiResponse = await generateCollectionResponse(fullMessage, documents, collectionName);\n      } else {\n        aiResponse = await generateIndependentResponse(fullMessage);\n      }\n\n      // Check if response contains artifact\n      const artifactMatch = aiResponse.content.match(/\\[ARTIFACT_START\\]([\\s\\S]*?)\\[ARTIFACT_END\\]/);\n      let artifactData = null;\n      \n      if (artifactMatch) {\n        const artifactHtml = artifactMatch[1];\n        const titleMatch = artifactHtml.match(/<!-- Artifact Title: (.*?) -->/);\n        const title = titleMatch ? titleMatch[1] : 'Interactive Content';\n        \n        // Determine artifact type based on content\n        let artifactType = 'interactive';\n        if (title.toLowerCase().includes('quiz')) artifactType = 'quiz_builder';\n        else if (title.toLowerCase().includes('calculator')) artifactType = 'math_visualizer';\n        else if (title.toLowerCase().includes('playground')) artifactType = 'code_playground';\n        else if (title.toLowerCase().includes('document')) artifactType = 'document_generator';\n        else if (title.toLowerCase().includes('presentation')) artifactType = 'presentation_maker';\n        else if (title.toLowerCase().includes('chart') || title.toLowerCase().includes('graph')) artifactType = 'data_visualizer';\n        else if (title.toLowerCase().includes('mind map')) artifactType = 'mind_map_creator';\n        \n        // Create artifact record\n        const artifact = await storage.createArtifact({\n          title,\n          type: artifactType,\n          content: artifactHtml,\n          userId,\n          collectionId: parsedCollectionId,\n          metadata: JSON.stringify({ \n            createdFrom: 'chat',\n            conversationId: conversation.id\n          })\n        });\n        \n        artifactData = {\n          artifactId: artifact.id,\n          title,\n          type: artifactType\n        };\n      }\n\n      // Create AI message\n      const aiMessage = await storage.createMessage({\n        content: aiResponse.content,\n        role: \"assistant\",\n        conversationId: conversation.id,\n        sources: aiResponse.sources ? JSON.stringify(aiResponse.sources) : null,\n        artifactData: artifactData ? JSON.stringify(artifactData) : null,\n      });\n\n      res.status(201).json({\n        conversation,\n        messages: [userMessage, aiMessage],\n      });\n    } catch (error) {\n      console.error(\"Error creating conversation:\", error);\n      res.status(500).json({ error: \"Failed to create conversation\" });\n    }\n  });\n\n  app.delete(\"/api/conversations/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getUserId(req);\n      const success = await storage.deleteConversation(id, userId);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting conversation:\", error);\n      res.status(500).json({ error: \"Failed to delete conversation\" });\n    }\n  });\n\n  // Messages endpoints\n  app.get(\"/api/conversations/:id/messages\", isAuthenticated, async (req: any, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const userId = getUserId(req);\n      \n      // Verify user owns the conversation\n      const conversation = await storage.getConversation(conversationId, userId);\n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n      \n      const messages = await storage.getMessages(conversationId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ error: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/conversations/:id/messages\", isAuthenticated, async (req: any, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const userId = getUserId(req);\n      const { content } = req.body;\n\n      // Verify user owns the conversation\n      const conversation = await storage.getConversation(conversationId, userId);\n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n\n      // Create user message\n      const userMessage = await storage.createMessage({\n        content,\n        role: \"user\",\n        conversationId,\n      });\n\n      // Get conversation history for context\n      const existingMessages = await storage.getMessages(conversationId);\n      const conversationHistory = existingMessages.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n\n      // Generate AI response\n      let aiResponse;\n      if (conversation.type === \"collection\" && conversation.collectionId) {\n        const documents = await storage.getDocuments(conversation.collectionId, userId);\n        const collection = await storage.getCollection(conversation.collectionId, userId);\n        const collectionName = collection?.name || \"Collection\";\n        aiResponse = await generateCollectionResponse(content, documents, collectionName, conversationHistory);\n      } else {\n        aiResponse = await generateIndependentResponse(content);\n      }\n\n      // Check if response contains artifact\n      const artifactMatch = aiResponse.content.match(/\\[ARTIFACT_START\\]([\\s\\S]*?)\\[ARTIFACT_END\\]/);\n      let artifactData = null;\n      let artifactId = null;\n      \n      if (artifactMatch) {\n        const artifactHtml = artifactMatch[1];\n        const titleMatch = artifactHtml.match(/<!-- Artifact Title: (.*?) -->/);\n        const title = titleMatch ? titleMatch[1] : 'Interactive Content';\n        \n        // Determine artifact type based on content\n        let artifactType = 'interactive';\n        if (title.toLowerCase().includes('quiz')) artifactType = 'quiz_builder';\n        else if (title.toLowerCase().includes('calculator')) artifactType = 'math_visualizer';\n        else if (title.toLowerCase().includes('playground')) artifactType = 'code_playground';\n        else if (title.toLowerCase().includes('document')) artifactType = 'document_generator';\n        else if (title.toLowerCase().includes('presentation')) artifactType = 'presentation_maker';\n        else if (title.toLowerCase().includes('chart') || title.toLowerCase().includes('graph')) artifactType = 'data_visualizer';\n        else if (title.toLowerCase().includes('mind map')) artifactType = 'mind_map_creator';\n        \n        // Create artifact record\n        const artifact = await storage.createArtifact({\n          title,\n          type: artifactType,\n          content: artifactHtml,\n          userId,\n          collectionId: conversation.collectionId,\n          metadata: JSON.stringify({ \n            createdFrom: 'chat',\n            conversationId: conversationId\n          })\n        });\n        \n        artifactId = artifact.id;\n        artifactData = {\n          artifactId: artifact.id,\n          title,\n          type: artifactType\n        };\n      }\n\n      // Create AI message\n      const aiMessage = await storage.createMessage({\n        content: aiResponse.content,\n        role: \"assistant\",\n        conversationId,\n        sources: aiResponse.sources ? JSON.stringify(aiResponse.sources) : null,\n        artifactData: artifactData ? JSON.stringify(artifactData) : null,\n      });\n\n      res.status(201).json([userMessage, aiMessage]);\n    } catch (error) {\n      console.error(\"Error creating message:\", error);\n      res.status(500).json({ error: \"Failed to create message\" });\n    }\n  });\n\n  // Artifact endpoints\n  app.get(\"/api/artifacts\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      const { type, collectionId } = req.query;\n      \n      const filters: any = {};\n      if (type) filters.type = type;\n      if (collectionId) filters.collectionId = parseInt(collectionId);\n      \n      const artifacts = await storage.getArtifacts(userId, filters);\n      res.json(artifacts);\n    } catch (error) {\n      console.error(\"Error fetching artifacts:\", error);\n      res.status(500).json({ error: \"Failed to fetch artifacts\" });\n    }\n  });\n\n  app.get(\"/api/artifacts/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getUserId(req);\n      \n      const artifact = await storage.getArtifact(id, userId);\n      if (!artifact) {\n        return res.status(404).json({ error: \"Artifact not found\" });\n      }\n      \n      res.json(artifact);\n    } catch (error) {\n      console.error(\"Error fetching artifact:\", error);\n      res.status(500).json({ error: \"Failed to fetch artifact\" });\n    }\n  });\n\n  app.post(\"/api/artifacts\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      const { title, type, content, description, collectionId, metadata } = req.body;\n      \n      // Validate collection ownership if provided\n      if (collectionId) {\n        const collection = await storage.getCollection(collectionId, userId);\n        if (!collection) {\n          return res.status(404).json({ error: \"Collection not found\" });\n        }\n      }\n      \n      const artifact = await storage.createArtifact({\n        title,\n        type,\n        content,\n        description,\n        collectionId,\n        metadata: metadata ? JSON.stringify(metadata) : null,\n        userId,\n      });\n      \n      res.status(201).json(artifact);\n    } catch (error) {\n      console.error(\"Error creating artifact:\", error);\n      res.status(500).json({ error: \"Failed to create artifact\" });\n    }\n  });\n\n  app.put(\"/api/artifacts/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getUserId(req);\n      const { title, type, content, description, collectionId, metadata } = req.body;\n      \n      // Verify user owns the artifact\n      const existingArtifact = await storage.getArtifact(id, userId);\n      if (!existingArtifact) {\n        return res.status(404).json({ error: \"Artifact not found\" });\n      }\n      \n      // Validate collection ownership if provided\n      if (collectionId) {\n        const collection = await storage.getCollection(collectionId, userId);\n        if (!collection) {\n          return res.status(404).json({ error: \"Collection not found\" });\n        }\n      }\n      \n      const artifact = await storage.updateArtifact(id, {\n        title,\n        type,\n        content,\n        description,\n        collectionId,\n        metadata: metadata ? JSON.stringify(metadata) : null,\n      });\n      \n      res.json(artifact);\n    } catch (error) {\n      console.error(\"Error updating artifact:\", error);\n      res.status(500).json({ error: \"Failed to update artifact\" });\n    }\n  });\n\n  app.delete(\"/api/artifacts/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = getUserId(req);\n      \n      const success = await storage.deleteArtifact(id, userId);\n      if (!success) {\n        return res.status(404).json({ error: \"Artifact not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting artifact:\", error);\n      res.status(500).json({ error: \"Failed to delete artifact\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":23930},"server/storage-old.ts":{"content":"import {\n  users,\n  collections,\n  documents,\n  conversations,\n  messages,\n  type User,\n  type InsertUser,\n  type UpsertUser,\n  type Collection,\n  type InsertCollection,\n  type Document,\n  type InsertDocument,\n  type Conversation,\n  type InsertConversation,\n  type Message,\n  type InsertMessage,\n  type CollectionWithStats,\n  type ConversationWithPreview,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, count, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods - required for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Collection methods\n  getCollections(userId: string): Promise<CollectionWithStats[]>;\n  getCollection(id: number, userId: string): Promise<Collection | undefined>;\n  createCollection(collection: InsertCollection): Promise<Collection>;\n  updateCollection(id: number, updates: Partial<InsertCollection>): Promise<Collection | undefined>;\n  deleteCollection(id: number, userId: string): Promise<boolean>;\n\n  // Document methods\n  getDocuments(collectionId: number): Promise<Document[]>;\n  getDocument(id: number): Promise<Document | undefined>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  deleteDocument(id: number): Promise<boolean>;\n\n  // Conversation methods\n  getConversations(userId: string): Promise<ConversationWithPreview[]>;\n  getConversation(id: number, userId: string): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: number, updates: Partial<InsertConversation>): Promise<Conversation | undefined>;\n  deleteConversation(id: number, userId: string): Promise<boolean>;\n\n  // Message methods\n  getMessages(conversationId: number): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private collections: Map<number, Collection>;\n  private documents: Map<number, Document>;\n  private conversations: Map<number, Conversation>;\n  private messages: Map<number, Message>;\n  private currentId: { users: number; collections: number; documents: number; conversations: number; messages: number };\n\n  constructor() {\n    this.users = new Map();\n    this.collections = new Map();\n    this.documents = new Map();\n    this.conversations = new Map();\n    this.messages = new Map();\n    this.currentId = {\n      users: 1,\n      collections: 1,\n      documents: 1,\n      conversations: 1,\n      messages: 1,\n    };\n\n    // Create a default user for demo purposes\n    this.createUser({ username: \"demo\", password: \"demo\" });\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find((user) => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId.users++;\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Collection methods\n  async getCollections(userId: number): Promise<CollectionWithStats[]> {\n    const userCollections = Array.from(this.collections.values()).filter(\n      (collection) => collection.userId === userId\n    );\n\n    return userCollections.map((collection) => {\n      const documentCount = Array.from(this.documents.values()).filter(\n        (doc) => doc.collectionId === collection.id\n      ).length;\n\n      const collectionConversations = Array.from(this.conversations.values()).filter(\n        (conv) => conv.collectionId === collection.id\n      );\n\n      const lastUsed = collectionConversations.length > 0\n        ? collectionConversations\n            .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())[0]\n            .updatedAt.toISOString()\n        : undefined;\n\n      return {\n        ...collection,\n        documentCount,\n        lastUsed,\n      };\n    });\n  }\n\n  async getCollection(id: number, userId: number): Promise<Collection | undefined> {\n    const collection = this.collections.get(id);\n    return collection && collection.userId === userId ? collection : undefined;\n  }\n\n  async createCollection(insertCollection: InsertCollection): Promise<Collection> {\n    const id = this.currentId.collections++;\n    const now = new Date();\n    const collection: Collection = {\n      id,\n      name: insertCollection.name,\n      description: insertCollection.description ?? null,\n      userId: insertCollection.userId,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.collections.set(id, collection);\n    return collection;\n  }\n\n  async updateCollection(id: number, updates: Partial<InsertCollection>): Promise<Collection | undefined> {\n    const existing = this.collections.get(id);\n    if (!existing) return undefined;\n\n    const updated: Collection = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.collections.set(id, updated);\n    return updated;\n  }\n\n  async deleteCollection(id: number, userId: number): Promise<boolean> {\n    const collection = this.collections.get(id);\n    if (!collection || collection.userId !== userId) return false;\n\n    this.collections.delete(id);\n    // Also delete associated documents and conversations\n    Array.from(this.documents.entries()).forEach(([docId, doc]) => {\n      if (doc.collectionId === id) {\n        this.documents.delete(docId);\n      }\n    });\n    Array.from(this.conversations.entries()).forEach(([convId, conv]) => {\n      if (conv.collectionId === id) {\n        this.conversations.delete(convId);\n      }\n    });\n    return true;\n  }\n\n  // Document methods\n  async getDocuments(collectionId: number): Promise<Document[]> {\n    return Array.from(this.documents.values()).filter(\n      (document) => document.collectionId === collectionId\n    );\n  }\n\n  async getDocument(id: number): Promise<Document | undefined> {\n    return this.documents.get(id);\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const id = this.currentId.documents++;\n    const document: Document = {\n      ...insertDocument,\n      id,\n      uploadedAt: new Date(),\n    };\n    this.documents.set(id, document);\n    return document;\n  }\n\n  async deleteDocument(id: number): Promise<boolean> {\n    return this.documents.delete(id);\n  }\n\n  // Conversation methods\n  async getConversations(userId: number): Promise<ConversationWithPreview[]> {\n    const userConversations = Array.from(this.conversations.values()).filter(\n      (conversation) => conversation.userId === userId\n    );\n\n    return userConversations.map((conversation) => {\n      const conversationMessages = Array.from(this.messages.values()).filter(\n        (message) => message.conversationId === conversation.id\n      );\n\n      const lastMessage = conversationMessages.length > 0\n        ? conversationMessages.sort((a, b) => \n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n          )[0]\n        : undefined;\n\n      return {\n        ...conversation,\n        preview: lastMessage?.content.substring(0, 100) || \"No messages yet\",\n        messageCount: conversationMessages.length,\n        lastMessage: lastMessage?.createdAt.toISOString(),\n      };\n    }).sort((a, b) => \n      new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\n    );\n  }\n\n  async getConversation(id: number, userId: number): Promise<Conversation | undefined> {\n    const conversation = this.conversations.get(id);\n    return conversation && conversation.userId === userId ? conversation : undefined;\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const id = this.currentId.conversations++;\n    const now = new Date();\n    const conversation: Conversation = {\n      id,\n      title: insertConversation.title,\n      type: insertConversation.type,\n      collectionId: insertConversation.collectionId ?? null,\n      userId: insertConversation.userId,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.conversations.set(id, conversation);\n    return conversation;\n  }\n\n  async updateConversation(id: number, updates: Partial<InsertConversation>): Promise<Conversation | undefined> {\n    const existing = this.conversations.get(id);\n    if (!existing) return undefined;\n\n    const updated: Conversation = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.conversations.set(id, updated);\n    return updated;\n  }\n\n  async deleteConversation(id: number, userId: number): Promise<boolean> {\n    const conversation = this.conversations.get(id);\n    if (!conversation || conversation.userId !== userId) return false;\n\n    this.conversations.delete(id);\n    // Also delete associated messages\n    Array.from(this.messages.entries()).forEach(([msgId, msg]) => {\n      if (msg.conversationId === id) {\n        this.messages.delete(msgId);\n      }\n    });\n    return true;\n  }\n\n  // Message methods\n  async getMessages(conversationId: number): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter((message) => message.conversationId === conversationId)\n      .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = this.currentId.messages++;\n    const message: Message = {\n      id,\n      content: insertMessage.content,\n      role: insertMessage.role,\n      conversationId: insertMessage.conversationId,\n      sources: insertMessage.sources || null,\n      createdAt: new Date(),\n    };\n    this.messages.set(id, message);\n    return message;\n  }\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getCollections(userId: number): Promise<CollectionWithStats[]> {\n    const collectionsWithStats = await db\n      .select({\n        id: collections.id,\n        name: collections.name,\n        description: collections.description,\n        userId: collections.userId,\n        createdAt: collections.createdAt,\n        updatedAt: collections.updatedAt,\n        documentCount: count(documents.id),\n      })\n      .from(collections)\n      .leftJoin(documents, eq(collections.id, documents.collectionId))\n      .where(eq(collections.userId, userId))\n      .groupBy(collections.id)\n      .orderBy(desc(collections.updatedAt));\n\n    return collectionsWithStats.map(collection => ({\n      ...collection,\n      documentCount: Number(collection.documentCount),\n    }));\n  }\n\n  async getCollection(id: number, userId: number): Promise<Collection | undefined> {\n    const [collection] = await db\n      .select()\n      .from(collections)\n      .where(sql`${collections.id} = ${id} AND ${collections.userId} = ${userId}`);\n    return collection || undefined;\n  }\n\n  async createCollection(insertCollection: InsertCollection): Promise<Collection> {\n    const [collection] = await db\n      .insert(collections)\n      .values(insertCollection)\n      .returning();\n    return collection;\n  }\n\n  async updateCollection(id: number, updates: Partial<InsertCollection>): Promise<Collection | undefined> {\n    const [collection] = await db\n      .update(collections)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(collections.id, id))\n      .returning();\n    return collection || undefined;\n  }\n\n  async deleteCollection(id: number, userId: number): Promise<boolean> {\n    const result = await db\n      .delete(collections)\n      .where(sql`${collections.id} = ${id} AND ${collections.userId} = ${userId}`);\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getDocuments(collectionId: number): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.collectionId, collectionId))\n      .orderBy(desc(documents.uploadedAt));\n  }\n\n  async getDocument(id: number): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document || undefined;\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const [document] = await db\n      .insert(documents)\n      .values(insertDocument)\n      .returning();\n    return document;\n  }\n\n  async deleteDocument(id: number): Promise<boolean> {\n    const result = await db.delete(documents).where(eq(documents.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getConversations(userId: number): Promise<ConversationWithPreview[]> {\n    const conversationsWithPreview = await db\n      .select({\n        id: conversations.id,\n        title: conversations.title,\n        type: conversations.type,\n        collectionId: conversations.collectionId,\n        userId: conversations.userId,\n        createdAt: conversations.createdAt,\n        updatedAt: conversations.updatedAt,\n        messageCount: count(messages.id),\n        lastMessage: sql<string>`MAX(${messages.createdAt})`,\n      })\n      .from(conversations)\n      .leftJoin(messages, eq(conversations.id, messages.conversationId))\n      .where(eq(conversations.userId, userId))\n      .groupBy(conversations.id)\n      .orderBy(desc(conversations.updatedAt));\n\n    return await Promise.all(\n      conversationsWithPreview.map(async (conv) => {\n        const [lastMessage] = await db\n          .select({ content: messages.content })\n          .from(messages)\n          .where(eq(messages.conversationId, conv.id))\n          .orderBy(desc(messages.createdAt))\n          .limit(1);\n\n        return {\n          ...conv,\n          messageCount: Number(conv.messageCount),\n          preview: lastMessage?.content?.substring(0, 100) || \"No messages yet\",\n          lastMessage: conv.lastMessage,\n        };\n      })\n    );\n  }\n\n  async getConversation(id: number, userId: number): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .select()\n      .from(conversations)\n      .where(sql`${conversations.id} = ${id} AND ${conversations.userId} = ${userId}`);\n    return conversation || undefined;\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const [conversation] = await db\n      .insert(conversations)\n      .values(insertConversation)\n      .returning();\n    return conversation;\n  }\n\n  async updateConversation(id: number, updates: Partial<InsertConversation>): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .update(conversations)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(conversations.id, id))\n      .returning();\n    return conversation || undefined;\n  }\n\n  async deleteConversation(id: number, userId: number): Promise<boolean> {\n    const result = await db\n      .delete(conversations)\n      .where(sql`${conversations.id} = ${id} AND ${conversations.userId} = ${userId}`);\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getMessages(conversationId: number): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":15941},"server/storage.ts":{"content":"import {\n  users,\n  collections,\n  documents,\n  conversations,\n  messages,\n  artifacts,\n  tenants,\n  adminAuditLog,\n  type User,\n  type UpsertUser,\n  type Collection,\n  type InsertCollection,\n  type Document,\n  type InsertDocument,\n  type Conversation,\n  type InsertConversation,\n  type Message,\n  type InsertMessage,\n  type Artifact,\n  type InsertArtifact,\n  type Tenant,\n  type InsertTenant,\n  type AdminAuditLog,\n  type InsertAdminAuditLog,\n  type CollectionWithStats,\n  type ConversationWithPreview,\n  type TenantWithStats,\n  type UserWithTenant,\n  type AdminDashboardStats,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, count, sql, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods - required for multi-provider Auth\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  createUser(user: UpsertUser): Promise<User>;\n\n  // Collection methods\n  getCollections(userId: string): Promise<CollectionWithStats[]>;\n  getCollection(id: number, userId: string): Promise<Collection | undefined>;\n  createCollection(collection: InsertCollection): Promise<Collection>;\n  updateCollection(id: number, updates: Partial<InsertCollection>): Promise<Collection | undefined>;\n  deleteCollection(id: number, userId: string): Promise<boolean>;\n\n  // Document methods\n  getDocuments(collectionId: number, userId?: string): Promise<Document[]>;\n  getDocument(id: number): Promise<Document | undefined>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  deleteDocument(id: number, userId?: string): Promise<boolean>;\n\n  // Conversation methods\n  getConversations(userId: string): Promise<ConversationWithPreview[]>;\n  getConversation(id: number, userId: string): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: number, updates: Partial<InsertConversation>): Promise<Conversation | undefined>;\n  deleteConversation(id: number, userId: string): Promise<boolean>;\n\n  // Message methods\n  getMessages(conversationId: number): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n\n  // Artifact methods\n  getArtifacts(userId: string, filters?: { type?: string; collectionId?: number }): Promise<Artifact[]>;\n  getArtifact(id: number, userId?: string): Promise<Artifact | undefined>;\n  createArtifact(artifact: InsertArtifact): Promise<Artifact>;\n  updateArtifact(id: number, updates: Partial<InsertArtifact>): Promise<Artifact | undefined>;\n  deleteArtifact(id: number, userId: string): Promise<boolean>;\n\n  // Admin methods\n  isAdmin(userId: string): Promise<boolean>;\n  getAdminDashboardStats(): Promise<AdminDashboardStats>;\n  getTenants(): Promise<TenantWithStats[]>;\n  getTenant(id: string): Promise<Tenant | undefined>;\n  createTenant(tenant: InsertTenant): Promise<Tenant>;\n  updateTenant(id: string, updates: Partial<InsertTenant>): Promise<Tenant | undefined>;\n  activateTenant(id: string, adminId: string): Promise<boolean>;\n  deactivateTenant(id: string, adminId: string): Promise<boolean>;\n  getAllUsers(filters?: { tenantId?: string; isActive?: boolean }): Promise<UserWithTenant[]>;\n  updateUserStatus(userId: string, isActive: boolean, adminId: string): Promise<boolean>;\n  updateUserRole(userId: string, role: string, adminId: string): Promise<boolean>;\n  logAdminAction(log: InsertAdminAuditLog): Promise<AdminAuditLog>;\n  getAdminAuditLogs(filters?: { adminId?: string; targetType?: string; limit?: number }): Promise<AdminAuditLog[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations - required for Replit Auth\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    try {\n      // First try to find existing user by email or id\n      let existingUser = await this.getUser(userData.id);\n      if (!existingUser && userData.email) {\n        existingUser = await this.getUserByEmail(userData.email);\n      }\n\n      if (existingUser) {\n        // Update existing user\n        const [user] = await db\n          .update(users)\n          .set({\n            ...userData,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.id, existingUser.id))\n          .returning();\n        return user;\n      } else {\n        // Create new user\n        const [user] = await db\n          .insert(users)\n          .values(userData)\n          .returning();\n        return user;\n      }\n    } catch (error) {\n      console.error(\"Error upserting user:\", error);\n      // If it's a duplicate key error, try to get the existing user\n      if ((error as any).code === '23505') {\n        const existingUser = userData.email ? \n          await this.getUserByEmail(userData.email) : \n          await this.getUser(userData.id);\n        if (existingUser) {\n          return existingUser;\n        }\n      }\n      throw error;\n    }\n  }\n\n  async createUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  // Collection methods\n  async getCollections(userId: string): Promise<CollectionWithStats[]> {\n    const collectionsWithStats = await db\n      .select({\n        id: collections.id,\n        name: collections.name,\n        description: collections.description,\n        userId: collections.userId,\n        createdAt: collections.createdAt,\n        updatedAt: collections.updatedAt,\n        documentCount: count(documents.id),\n      })\n      .from(collections)\n      .leftJoin(documents, eq(collections.id, documents.collectionId))\n      .where(eq(collections.userId, userId))\n      .groupBy(collections.id)\n      .orderBy(desc(collections.updatedAt));\n\n    return collectionsWithStats.map(collection => ({\n      ...collection,\n      documentCount: collection.documentCount || 0,\n    }));\n  }\n\n  async getCollection(id: number, userId: string): Promise<Collection | undefined> {\n    const [collection] = await db\n      .select()\n      .from(collections)\n      .where(eq(collections.id, id) && eq(collections.userId, userId));\n    return collection || undefined;\n  }\n\n  async createCollection(insertCollection: InsertCollection): Promise<Collection> {\n    const [collection] = await db\n      .insert(collections)\n      .values(insertCollection)\n      .returning();\n    return collection;\n  }\n\n  async updateCollection(id: number, updates: Partial<InsertCollection>): Promise<Collection | undefined> {\n    const [collection] = await db\n      .update(collections)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(collections.id, id))\n      .returning();\n    return collection || undefined;\n  }\n\n  async deleteCollection(id: number, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(collections)\n      .where(and(eq(collections.id, id), eq(collections.userId, userId)));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Document methods\n  async getDocuments(collectionId: number, userId?: string): Promise<Document[]> {\n    // If userId is provided, validate collection ownership\n    if (userId) {\n      const collection = await this.getCollection(collectionId, userId);\n      if (!collection) {\n        return []; // Return empty array if user doesn't own the collection\n      }\n    }\n    \n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.collectionId, collectionId))\n      .orderBy(desc(documents.uploadedAt));\n  }\n\n  async getDocument(id: number): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document || undefined;\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const [document] = await db\n      .insert(documents)\n      .values(insertDocument)\n      .returning();\n    return document;\n  }\n\n  async deleteDocument(id: number, userId?: string): Promise<boolean> {\n    // If userId is provided, validate document ownership through collection\n    if (userId) {\n      const document = await this.getDocument(id);\n      if (!document) return false;\n      \n      const collection = await this.getCollection(document.collectionId, userId);\n      if (!collection) return false; // User doesn't own the collection\n    }\n    \n    const result = await db.delete(documents).where(eq(documents.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Conversation methods\n  async getConversations(userId: string): Promise<ConversationWithPreview[]> {\n    const conversationsWithPreview = await db\n      .select({\n        id: conversations.id,\n        title: conversations.title,\n        type: conversations.type,\n        collectionId: conversations.collectionId,\n        userId: conversations.userId,\n        createdAt: conversations.createdAt,\n        updatedAt: conversations.updatedAt,\n        messageCount: count(messages.id),\n        lastMessage: sql<string>`(\n          SELECT content \n          FROM ${messages} \n          WHERE ${messages.conversationId} = ${conversations.id} \n          ORDER BY ${messages.createdAt} DESC \n          LIMIT 1\n        )`,\n      })\n      .from(conversations)\n      .leftJoin(messages, eq(conversations.id, messages.conversationId))\n      .where(eq(conversations.userId, userId))\n      .groupBy(conversations.id)\n      .orderBy(desc(conversations.updatedAt));\n\n    return conversationsWithPreview.map(conv => ({\n      ...conv,\n      preview: conv.lastMessage || \"No messages yet\",\n      messageCount: conv.messageCount || 0,\n      lastMessage: conv.lastMessage || undefined,\n    }));\n  }\n\n  async getConversation(id: number, userId: string): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.id, id) && eq(conversations.userId, userId));\n    return conversation || undefined;\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const [conversation] = await db\n      .insert(conversations)\n      .values(insertConversation)\n      .returning();\n    return conversation;\n  }\n\n  async updateConversation(id: number, updates: Partial<InsertConversation>): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .update(conversations)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(conversations.id, id))\n      .returning();\n    return conversation || undefined;\n  }\n\n  async deleteConversation(id: number, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(conversations)\n      .where(eq(conversations.id, id) && eq(conversations.userId, userId));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Message methods\n  async getMessages(conversationId: number): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n\n  // Artifact methods\n  async getArtifacts(userId: string, filters?: { type?: string; collectionId?: number }): Promise<Artifact[]> {\n    let query = db\n      .select()\n      .from(artifacts)\n      .where(eq(artifacts.userId, userId));\n    \n    if (filters?.type) {\n      query = query.where(eq(artifacts.type, filters.type));\n    }\n    \n    if (filters?.collectionId) {\n      query = query.where(eq(artifacts.collectionId, filters.collectionId));\n    }\n    \n    const results = await query.orderBy(desc(artifacts.createdAt));\n    return results;\n  }\n\n  async getArtifact(id: number, userId?: string): Promise<Artifact | undefined> {\n    let query = db\n      .select()\n      .from(artifacts)\n      .where(eq(artifacts.id, id));\n    \n    if (userId) {\n      query = query.where(eq(artifacts.userId, userId));\n    }\n    \n    const [artifact] = await query;\n    return artifact || undefined;\n  }\n\n  async createArtifact(insertArtifact: InsertArtifact): Promise<Artifact> {\n    const [artifact] = await db\n      .insert(artifacts)\n      .values(insertArtifact)\n      .returning();\n    return artifact;\n  }\n\n  async updateArtifact(id: number, updates: Partial<InsertArtifact>): Promise<Artifact | undefined> {\n    const [artifact] = await db\n      .update(artifacts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(artifacts.id, id))\n      .returning();\n    return artifact || undefined;\n  }\n\n  async deleteArtifact(id: number, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(artifacts)\n      .where(and(eq(artifacts.id, id), eq(artifacts.userId, userId)));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Admin methods implementation\n  async isAdmin(userId: string): Promise<boolean> {\n    const [user] = await db\n      .select({ role: users.role })\n      .from(users)\n      .where(eq(users.id, userId));\n    return user?.role === 'admin' || user?.role === 'super_admin';\n  }\n\n  async getAdminDashboardStats(): Promise<AdminDashboardStats> {\n    const [tenantsCount] = await db\n      .select({ count: count() })\n      .from(tenants);\n    \n    const [activeTenantsCount] = await db\n      .select({ count: count() })\n      .from(tenants)\n      .where(eq(tenants.isActive, true));\n    \n    const [usersCount] = await db\n      .select({ count: count() })\n      .from(users);\n    \n    const [activeUsersCount] = await db\n      .select({ count: count() })\n      .from(users)\n      .where(eq(users.isActive, true));\n    \n    const [collectionsCount] = await db\n      .select({ count: count() })\n      .from(collections);\n    \n    const [documentsCount] = await db\n      .select({ count: count() })\n      .from(documents);\n    \n    const [conversationsCount] = await db\n      .select({ count: count() })\n      .from(conversations);\n    \n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    \n    const [newUsersCount] = await db\n      .select({ count: count() })\n      .from(users)\n      .where(sql`${users.createdAt} >= ${thirtyDaysAgo}`);\n\n    return {\n      totalTenants: tenantsCount.count,\n      activeTenants: activeTenantsCount.count,\n      totalUsers: usersCount.count,\n      activeUsers: activeUsersCount.count,\n      totalCollections: collectionsCount.count,\n      totalDocuments: documentsCount.count,\n      totalConversations: conversationsCount.count,\n      newUsersThisMonth: newUsersCount.count,\n      recentActivity: []\n    };\n  }\n\n  async getTenants(): Promise<TenantWithStats[]> {\n    const tenantsList = await db\n      .select()\n      .from(tenants)\n      .orderBy(desc(tenants.createdAt));\n\n    const tenantsWithStats = await Promise.all(\n      tenantsList.map(async (tenant) => {\n        const [userCount] = await db\n          .select({ count: count() })\n          .from(users)\n          .where(eq(users.tenantId, tenant.id));\n        \n        const [collectionCount] = await db\n          .select({ count: count() })\n          .from(collections)\n          .leftJoin(users, eq(users.id, collections.userId))\n          .where(eq(users.tenantId, tenant.id));\n        \n        const [documentCount] = await db\n          .select({ count: count() })\n          .from(documents)\n          .leftJoin(collections, eq(collections.id, documents.collectionId))\n          .leftJoin(users, eq(users.id, collections.userId))\n          .where(eq(users.tenantId, tenant.id));\n        \n        const [conversationCount] = await db\n          .select({ count: count() })\n          .from(conversations)\n          .leftJoin(users, eq(users.id, conversations.userId))\n          .where(eq(users.tenantId, tenant.id));\n\n        return {\n          ...tenant,\n          userCount: userCount.count,\n          collectionCount: collectionCount.count,\n          documentCount: documentCount.count,\n          conversationCount: conversationCount.count,\n        };\n      })\n    );\n\n    return tenantsWithStats;\n  }\n\n  async getTenant(id: string): Promise<Tenant | undefined> {\n    const [tenant] = await db\n      .select()\n      .from(tenants)\n      .where(eq(tenants.id, id));\n    return tenant;\n  }\n\n  async createTenant(tenant: InsertTenant): Promise<Tenant> {\n    const [newTenant] = await db\n      .insert(tenants)\n      .values(tenant)\n      .returning();\n    return newTenant;\n  }\n\n  async updateTenant(id: string, updates: Partial<InsertTenant>): Promise<Tenant | undefined> {\n    const [updatedTenant] = await db\n      .update(tenants)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(tenants.id, id))\n      .returning();\n    return updatedTenant;\n  }\n\n  async activateTenant(id: string, adminId: string): Promise<boolean> {\n    const [result] = await db\n      .update(tenants)\n      .set({ isActive: true, updatedAt: new Date() })\n      .where(eq(tenants.id, id))\n      .returning();\n    \n    if (result) {\n      await this.logAdminAction({\n        adminId,\n        action: 'activate_tenant',\n        targetType: 'tenant',\n        targetId: id,\n        details: { tenantName: result.name }\n      });\n    }\n    \n    return !!result;\n  }\n\n  async deactivateTenant(id: string, adminId: string): Promise<boolean> {\n    const [result] = await db\n      .update(tenants)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(tenants.id, id))\n      .returning();\n    \n    if (result) {\n      await this.logAdminAction({\n        adminId,\n        action: 'deactivate_tenant',\n        targetType: 'tenant',\n        targetId: id,\n        details: { tenantName: result.name }\n      });\n    }\n    \n    return !!result;\n  }\n\n  async getAllUsers(filters?: { tenantId?: string; isActive?: boolean }): Promise<UserWithTenant[]> {\n    let query = db\n      .select({\n        id: users.id,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        role: users.role,\n        isActive: users.isActive,\n        tenantId: users.tenantId,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        tenant: {\n          id: tenants.id,\n          name: tenants.name,\n          domain: tenants.domain,\n          isActive: tenants.isActive,\n          plan: tenants.plan,\n        }\n      })\n      .from(users)\n      .leftJoin(tenants, eq(tenants.id, users.tenantId))\n      .orderBy(desc(users.createdAt));\n\n    if (filters?.tenantId) {\n      query = query.where(eq(users.tenantId, filters.tenantId));\n    }\n    if (filters?.isActive !== undefined) {\n      query = query.where(eq(users.isActive, filters.isActive));\n    }\n\n    const result = await query;\n    return result.map(row => ({\n      ...row,\n      tenant: row.tenant.id ? row.tenant : undefined\n    })) as UserWithTenant[];\n  }\n\n  async updateUserStatus(userId: string, isActive: boolean, adminId: string): Promise<boolean> {\n    const [result] = await db\n      .update(users)\n      .set({ isActive, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (result) {\n      await this.logAdminAction({\n        adminId,\n        action: isActive ? 'activate_user' : 'deactivate_user',\n        targetType: 'user',\n        targetId: userId,\n        details: { email: result.email }\n      });\n    }\n    \n    return !!result;\n  }\n\n  async updateUserRole(userId: string, role: string, adminId: string): Promise<boolean> {\n    const [result] = await db\n      .update(users)\n      .set({ role, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (result) {\n      await this.logAdminAction({\n        adminId,\n        action: 'update_user_role',\n        targetType: 'user',\n        targetId: userId,\n        details: { email: result.email, newRole: role }\n      });\n    }\n    \n    return !!result;\n  }\n\n  async logAdminAction(log: InsertAdminAuditLog): Promise<AdminAuditLog> {\n    const [newLog] = await db\n      .insert(adminAuditLog)\n      .values(log)\n      .returning();\n    return newLog;\n  }\n\n  async getAdminAuditLogs(filters?: { adminId?: string; targetType?: string; limit?: number }): Promise<AdminAuditLog[]> {\n    let query = db\n      .select()\n      .from(adminAuditLog)\n      .orderBy(desc(adminAuditLog.createdAt));\n\n    if (filters?.adminId) {\n      query = query.where(eq(adminAuditLog.adminId, filters.adminId));\n    }\n    if (filters?.targetType) {\n      query = query.where(eq(adminAuditLog.targetType, filters.targetType));\n    }\n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n\n    return await query;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":21043},"server/supabaseAuth.ts":{"content":"import { type Express, type Request, type Response, type NextFunction, type RequestHandler } from \"express\";\nimport { supabase } from \"./lib/supabase\";\nimport { storage } from \"./storage\";\nimport { configureSupabaseForDevelopment } from \"./auth-config\";\n\n// Enhanced request type with user info\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n  };\n}\n\n// Get user ID from request (supports both Replit and Supabase auth)\nexport function getUserId(req: AuthenticatedRequest): string {\n  if (req.user?.id) {\n    return req.user.id;\n  }\n  \n  // Fallback to session-based auth if available\n  const session = (req as any).session;\n  if (session?.user?.id) {\n    return session.user.id;\n  }\n  \n  throw new Error(\"User not authenticated\");\n}\n\n// Middleware to authenticate requests using Supabase\nexport const isAuthenticated: RequestHandler = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader?.startsWith('Bearer ')) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const token = authHeader.split(' ')[1];\n    \n    const { data: { user }, error } = await supabase.auth.getUser(token);\n    \n    if (error || !user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    // Ensure user exists in our database\n    let dbUser = await storage.getUser(user.id);\n    if (!dbUser) {\n      const userData = {\n        id: user.id,\n        email: user.email || '',\n        firstName: user.user_metadata?.name?.split(' ')[0] || user.email?.split('@')[0] || 'User',\n        lastName: user.user_metadata?.name?.split(' ').slice(1).join(' ') || null,\n        profileImageUrl: user.user_metadata?.avatar_url || null,\n      };\n      dbUser = await storage.upsertUser(userData);\n    }\n\n    // Add user to request\n    (req as AuthenticatedRequest).user = {\n      id: user.id,\n      email: user.email || '',\n    };\n\n    next();\n  } catch (error) {\n    console.error(\"Authentication error:\", error);\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n};\n\n// Setup Supabase auth routes\nexport async function setupSupabaseAuth(app: Express) {\n  // Configure Supabase for development\n  await configureSupabaseForDevelopment();\n  // Get current user\n  app.get(\"/api/auth/user\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const userId = getUserId(req);\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        profileImageUrl: user.profileImageUrl,\n        role: user.role,\n        isActive: user.isActive,\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  // Sign out (client-side handled, but we can add server cleanup if needed)\n  app.post(\"/api/auth/signout\", (req: Request, res: Response) => {\n    res.json({ message: \"Signed out successfully\" });\n  });\n}","size_bytes":3224},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb, varchar, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for multi-provider auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  passwordHash: varchar(\"password_hash\"), // For email/password auth\n  emailVerified: boolean(\"email_verified\").default(false),\n  role: varchar(\"role\").default(\"user\"), // 'user', 'admin', 'super_admin'\n  isActive: boolean(\"is_active\").default(true),\n  tenantId: varchar(\"tenant_id\"), // For multi-tenant support\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Tenants table for multi-tenant SaaS management\nexport const tenants = pgTable(\"tenants\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  name: varchar(\"name\").notNull(),\n  domain: varchar(\"domain\").unique(),\n  isActive: boolean(\"is_active\").default(true),\n  plan: varchar(\"plan\").default(\"free\"), // 'free', 'pro', 'enterprise'\n  maxUsers: integer(\"max_users\").default(5),\n  maxCollections: integer(\"max_collections\").default(10),\n  maxDocuments: integer(\"max_documents\").default(100),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Admin audit log for tracking admin actions\nexport const adminAuditLog = pgTable(\"admin_audit_log\", {\n  id: serial(\"id\").primaryKey(),\n  adminId: varchar(\"admin_id\").notNull(),\n  action: varchar(\"action\").notNull(), // 'activate_tenant', 'deactivate_tenant', 'delete_user', etc.\n  targetType: varchar(\"target_type\").notNull(), // 'tenant', 'user', 'system'\n  targetId: varchar(\"target_id\").notNull(),\n  details: jsonb(\"details\").default(null),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const collections = pgTable(\"collections\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  userId: varchar(\"user_id\").notNull(),\n  privateStatusTypeId: varchar(\"private_status_type_id\").default(\"private\"), // 'private', 'public'\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const documents = pgTable(\"documents\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  content: text(\"content\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  size: integer(\"size\").notNull(),\n  collectionId: integer(\"collection_id\").notNull(),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow().notNull(),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  type: text(\"type\").notNull(), // 'independent' or 'collection'\n  collectionId: integer(\"collection_id\"),\n  userId: varchar(\"user_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  content: text(\"content\").notNull(),\n  role: text(\"role\").notNull(), // 'user' or 'assistant'\n  conversationId: integer(\"conversation_id\").notNull(),\n  sources: jsonb(\"sources\").default(null), // For collection-based responses with document references\n  artifactData: jsonb(\"artifact_data\").default(null), // For storing artifact metadata\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// New artifacts table for dedicated artifact storage\nexport const artifacts = pgTable(\"artifacts\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // 'code_playground', 'math_visualizer', 'document_generator', etc.\n  content: text(\"content\").notNull(), // The actual HTML/CSS/JS content\n  metadata: jsonb(\"metadata\").default(null), // Type-specific metadata\n  userId: varchar(\"user_id\").notNull(),\n  messageId: integer(\"message_id\"), // Optional link to original message\n  collectionId: integer(\"collection_id\"), // Optional link to collection\n  version: integer(\"version\").default(1),\n  isPublic: boolean(\"is_public\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCollectionSchema = createInsertSchema(collections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertArtifactSchema = createInsertSchema(artifacts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTenantSchema = createInsertSchema(tenants).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAdminAuditLogSchema = createInsertSchema(adminAuditLog).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpsertUser = typeof users.$inferInsert;\n\nexport type Tenant = typeof tenants.$inferSelect;\nexport type InsertTenant = z.infer<typeof insertTenantSchema>;\n\nexport type AdminAuditLog = typeof adminAuditLog.$inferSelect;\nexport type InsertAdminAuditLog = z.infer<typeof insertAdminAuditLogSchema>;\n\nexport type Collection = typeof collections.$inferSelect;\nexport type InsertCollection = z.infer<typeof insertCollectionSchema>;\n\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\n\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\n\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\nexport type Artifact = typeof artifacts.$inferSelect;\nexport type InsertArtifact = z.infer<typeof insertArtifactSchema>;\n\n// Extended types for API responses\nexport type CollectionWithStats = Collection & {\n  documentCount: number;\n  lastUsed?: string;\n};\n\nexport type ConversationWithPreview = Conversation & {\n  preview: string;\n  messageCount: number;\n  lastMessage?: string;\n};\n\n// Admin dashboard types\nexport type TenantWithStats = Tenant & {\n  userCount: number;\n  collectionCount: number;\n  documentCount: number;\n  conversationCount: number;\n  lastActivity?: string;\n};\n\nexport type UserWithTenant = User & {\n  tenant?: Tenant;\n  activityStats?: {\n    collectionCount: number;\n    conversationCount: number;\n    lastActivity?: string;\n  };\n};\n\nexport type AdminDashboardStats = {\n  totalTenants: number;\n  activeTenants: number;\n  totalUsers: number;\n  activeUsers: number;\n  totalCollections: number;\n  totalDocuments: number;\n  totalConversations: number;\n  newUsersThisMonth: number;\n  recentActivity: Array<{\n    type: string;\n    description: string;\n    timestamp: string;\n    userId?: string;\n    tenantId?: string;\n  }>;\n};\n","size_bytes":7811},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/contexts/AuthContext\";\nimport { GoogleOAuthWrapper } from \"@/providers/GoogleOAuthProvider\";\nimport { AuthPage } from \"@/components/auth/AuthPage\";\n\nimport SimpleLanding from \"@/pages/simple-landing\";\nimport ModernLanding from \"@/pages/modern-landing\";\nimport SocialLanding from \"@/pages/social-landing\";\nimport Community from \"@/pages/community\";\nimport Chat from \"@/pages/chat\";\nimport MyCollections from \"@/pages/my-collections\";\nimport Discover from \"@/pages/discover\";\nimport Collections from \"@/pages/collections\";\nimport CollectionDetail from \"@/pages/collection-detail\";\nimport Conversations from \"@/pages/conversations\";\nimport Conversation from \"@/pages/conversation\";\nimport ArtifactsPage from \"@/pages/artifacts\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport NotFound from \"@/pages/not-found\";\nimport { CommunityLayout } from \"@/components/layout/CommunityLayout\";\n\nfunction Router() {\n  const { user, loading } = useAuth();\n\n  console.log('Router state:', { user: !!user, loading, showAuth: !user && !loading });\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    console.log('Showing landing page');\n    return (\n      <Switch>\n        <Route path=\"/\" component={SocialLanding} />\n        <Route path=\"/auth\" component={AuthPage} />\n        <Route path=\"/simple\" component={SimpleLanding} />\n        <Route path=\"/modern\" component={ModernLanding} />\n        <Route component={NotFound} />\n      </Switch>\n    );\n  }\n\n  console.log('Showing authenticated routes');\n  return (\n    <Switch>\n      <Route path=\"/\" component={Community} />\n      <Route path=\"/chat\">\n        <CommunityLayout>\n          <Chat />\n        </CommunityLayout>\n      </Route>\n      <Route path=\"/my-collections\">\n        <CommunityLayout>\n          <MyCollections />\n        </CommunityLayout>\n      </Route>\n      <Route path=\"/discover\">\n        <CommunityLayout>\n          <Discover />\n        </CommunityLayout>\n      </Route>\n      <Route path=\"/collections\" component={Collections} />\n      <Route path=\"/collections/:id\" component={CollectionDetail} />\n      <Route path=\"/conversations\" component={Conversations} />\n      <Route path=\"/conversations/:id\" component={Conversation} />\n      <Route path=\"/artifacts\" component={ArtifactsPage} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <GoogleOAuthWrapper>\n        <AuthProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </AuthProvider>\n      </GoogleOAuthWrapper>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3373},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(248, 100%, 67%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(248, 100%, 67%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-gray-50 text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  }\n}\n\n@layer utilities {\n  .gradient-primary {\n    background: linear-gradient(135deg, hsl(248, 100%, 67%) 0%, hsl(271, 81%, 56%) 100%);\n  }\n  \n  .gradient-bg {\n    background: linear-gradient(135deg, hsl(248, 100%, 67%) 0%, hsl(271, 81%, 56%) 100%);\n  }\n}\n","size_bytes":2020},"client/src/main.tsx":{"content":"import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport posthog from 'posthog-js';\n\n// Initialize PostHog with the provided API key and host\nposthog.init('phc_2jUnDMt7gEMy2NZgH6e09AhCS7UbusZYfqRg9bgW906', {\n  api_host: 'https://us.i.posthog.com',\n});\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","size_bytes":435},"server/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.SUPABASE_URL\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\nif (!supabaseUrl || !supabaseServiceKey) {\n  throw new Error('Missing Supabase environment variables')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseServiceKey)","size_bytes":340},"server/routes/auth.ts":{"content":"import { type Express, type Request, type Response } from \"express\";\nimport { supabase } from \"../lib/supabase\";\nimport { storage } from \"../storage\";\nimport { z } from \"zod\";\n\nconst signUpSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nconst signInSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport function setupAuthRoutes(app: Express) {\n  // Sign up route - handles user creation with auto-confirmation\n  app.post(\"/api/auth/signup\", async (req: Request, res: Response) => {\n    try {\n      const { email, password } = signUpSchema.parse(req.body);\n      \n      // Create user with Supabase\n      const { data, error } = await supabase.auth.admin.createUser({\n        email,\n        password,\n        email_confirm: true, // Auto-confirm email for development\n      });\n\n      if (error) {\n        return res.status(400).json({ error: error.message });\n      }\n\n      if (!data.user) {\n        return res.status(400).json({ error: \"Failed to create user\" });\n      }\n\n      // Create user in our database\n      await storage.upsertUser({\n        id: data.user.id,\n        email: data.user.email || email,\n        name: data.user.user_metadata?.full_name || null,\n        profileImage: data.user.user_metadata?.avatar_url || null,\n      });\n\n      res.json({ \n        success: true, \n        message: \"Account created successfully! You can now sign in.\",\n        userId: data.user.id \n      });\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input data\" });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Sign in route - handles authentication\n  app.post(\"/api/auth/signin\", async (req: Request, res: Response) => {\n    try {\n      const { email, password } = signInSchema.parse(req.body);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        return res.status(400).json({ error: error.message });\n      }\n\n      if (!data.session) {\n        return res.status(400).json({ error: \"Failed to create session\" });\n      }\n\n      res.json({ \n        success: true,\n        access_token: data.session.access_token,\n        refresh_token: data.session.refresh_token,\n        user: {\n          id: data.user.id,\n          email: data.user.email,\n        }\n      });\n    } catch (error) {\n      console.error(\"Signin error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input data\" });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // User endpoint - validates Google OAuth tokens and returns user data\n  app.get(\"/api/auth/user\", async (req: Request, res: Response) => {\n    try {\n      const authHeader = req.headers.authorization;\n      \n      if (!authHeader?.startsWith('Bearer ')) {\n        return res.status(401).json({ error: \"Unauthorized\" });\n      }\n\n      const token = authHeader.split(' ')[1];\n      \n      // Check if it's a Google OAuth token (starts with 'snappy_')\n      if (token.startsWith('snappy_')) {\n        // Extract user ID from token\n        const tokenParts = token.split('_');\n        if (tokenParts.length >= 2) {\n          const userId = tokenParts[1];\n          \n          // Validate token timestamp (simple validation)\n          const timestamp = tokenParts[2];\n          if (timestamp && Date.now() - parseInt(timestamp) > 24 * 60 * 60 * 1000) {\n            return res.status(401).json({ error: \"Token expired\" });\n          }\n          \n          // Get user from database\n          const user = await storage.getUser(userId);\n          if (!user) {\n            return res.status(401).json({ error: \"User not found\" });\n          }\n          \n          return res.json({\n            id: user.id,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            profileImageUrl: user.profileImageUrl\n          });\n        }\n      }\n      \n      // Fallback to Supabase token validation\n      const { data: { user }, error } = await supabase.auth.getUser(token);\n      \n      if (error || !user) {\n        return res.status(401).json({ error: \"Unauthorized\" });\n      }\n\n      // Get user from database\n      const dbUser = await storage.getUser(user.id);\n      if (!dbUser) {\n        return res.status(401).json({ error: \"User not found\" });\n      }\n\n      res.json({\n        id: dbUser.id,\n        email: dbUser.email,\n        firstName: dbUser.firstName,\n        lastName: dbUser.lastName,\n        profileImageUrl: dbUser.profileImageUrl\n      });\n    } catch (error) {\n      console.error(\"User validation error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n}","size_bytes":4919},"server/routes/googleAuth.ts":{"content":"import type { Express } from \"express\";\nimport { supabase } from \"../lib/supabase\";\nimport { storage } from \"../storage\";\n\nexport function setupGoogleAuth(app: Express) {\n  app.post(\"/api/auth/google\", async (req, res) => {\n    try {\n      const { credential } = req.body;\n      \n      if (!credential) {\n        return res.status(400).json({ error: \"Google credential is required\" });\n      }\n\n      // Decode the JWT credential from Google\n      let userInfo;\n      try {\n        console.log(\"Received credential:\", credential.substring(0, 100) + \"...\");\n        \n        // JWT has 3 parts separated by dots: header.payload.signature\n        const parts = credential.split('.');\n        console.log(\"JWT parts count:\", parts.length);\n        \n        if (parts.length !== 3) {\n          throw new Error('Invalid JWT format');\n        }\n        \n        // Decode the payload (middle part) - JWT uses base64url encoding\n        const payload = parts[1];\n        console.log(\"Payload length:\", payload.length);\n        \n        // Convert base64url to base64 by replacing URL-safe characters\n        const base64Payload = payload.replace(/-/g, '+').replace(/_/g, '/');\n        // Add padding if needed for base64 decoding\n        const paddedPayload = base64Payload + '='.repeat((4 - base64Payload.length % 4) % 4);\n        \n        console.log(\"Attempting to decode payload...\");\n        const decodedPayload = Buffer.from(paddedPayload, 'base64').toString();\n        console.log(\"Decoded payload:\", decodedPayload.substring(0, 100) + \"...\");\n        \n        userInfo = JSON.parse(decodedPayload);\n        console.log(\"Parsed user info:\", { email: userInfo.email, name: userInfo.name });\n      } catch (error) {\n        console.error(\"Failed to decode JWT credential:\", error);\n        return res.status(400).json({ error: \"Invalid credential format\" });\n      }\n\n      console.log(\"Processing Google login for user:\", userInfo.email);\n\n      // First, check if a user with this email already exists in our database\n      console.log(\"Checking for existing user with email:\", userInfo.email);\n      const existingUserByEmail = await storage.getUserByEmail(userInfo.email || '');\n      console.log(\"Found existing user by email:\", !!existingUserByEmail, existingUserByEmail?.id);\n      \n      if (existingUserByEmail) {\n        // User exists with this email, use the existing one\n        const dbUser = existingUserByEmail;\n        console.log(\"Using existing user by email:\", dbUser.email);\n        \n        // For existing users, we'll use the database user and create a simple session\n        console.log(\"Returning session for existing user\");\n        \n        try {\n          // Return session for existing user\n          const responseData = {\n            access_token: `snappy_${dbUser.id}_${Date.now()}`, // Simple token for existing users\n            refresh_token: `refresh_${dbUser.id}_${Date.now()}`,\n            user: {\n              id: dbUser.id,\n              email: dbUser.email,\n              firstName: dbUser.firstName,\n              lastName: dbUser.lastName,\n              profileImageUrl: dbUser.profileImageUrl,\n            },\n          };\n          \n          console.log(\"Sending response:\", JSON.stringify(responseData, null, 2));\n          res.json(responseData);\n          return;\n        } catch (error) {\n          console.error(\"Error generating session for existing user:\", error);\n          return res.status(500).json({ error: \"Failed to generate session for existing user\" });\n        }\n      }\n      \n      // For new users, continue with Supabase authentication\n      console.log(\"New user, continuing with Supabase auth\");\n      \n      // Try to sign in with existing user in Supabase\n      console.log(\"Attempting to sign in with email:\", userInfo.email);\n      const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({\n        email: userInfo.email,\n        password: userInfo.sub // Use Google sub as a unique identifier\n      });\n\n      console.log(\"Sign in error:\", !!signInError, signInError?.message);\n      console.log(\"Sign in data:\", !!signInData, !!signInData?.user, !!signInData?.session);\n\n      let user;\n      let sessionData;\n\n      if (signInError) {\n        // User doesn't exist, create a new one\n        console.log(\"Creating new user with email:\", userInfo.email);\n        const { data: signUpData, error: signUpError } = await supabase.auth.signUp({\n          email: userInfo.email,\n          password: userInfo.sub, // Use Google sub as a unique identifier\n          options: {\n            data: {\n              name: userInfo.name,\n              avatar_url: userInfo.picture,\n              provider: 'google',\n            }\n          }\n        });\n\n        console.log(\"Sign up error:\", !!signUpError, signUpError?.message);\n        console.log(\"Sign up data:\", !!signUpData, !!signUpData?.user, !!signUpData?.session);\n\n        if (signUpError) {\n          console.error(\"User creation error:\", signUpError);\n          return res.status(500).json({ error: \"Failed to create user\" });\n        }\n\n        user = signUpData.user;\n        sessionData = signUpData.session;\n      } else {\n        user = signInData.user;\n        sessionData = signInData.session;\n      }\n\n      if (!user) {\n        return res.status(500).json({ error: \"Authentication failed\" });\n      }\n      \n      // Check if Supabase user exists in our database\n      let dbUser = await storage.getUser(user.id);\n      console.log(\"Supabase user lookup by ID:\", user.id, \"found:\", !!dbUser);\n      \n      if (!dbUser) {\n        // Create new user in our database\n        console.log(\"Creating new user with ID:\", user.id);\n        dbUser = await storage.upsertUser({\n          id: user.id,\n          email: user.email || '',\n          firstName: userInfo.given_name || userInfo.name?.split(' ')[0] || user.email?.split('@')[0] || 'User',\n          lastName: userInfo.family_name || userInfo.name?.split(' ').slice(1).join(' ') || '',\n          profileImageUrl: userInfo.picture || null,\n        });\n      }\n      \n      if (!sessionData) {\n        return res.status(500).json({ error: \"Failed to generate session\" });\n      }\n\n      // Return the session tokens for the frontend\n      // Use the database user instead of the Supabase user for consistency\n      res.json({\n        access_token: sessionData.access_token,\n        refresh_token: sessionData.refresh_token,\n        user: {\n          id: dbUser.id,\n          email: dbUser.email,\n          firstName: dbUser.firstName,\n          lastName: dbUser.lastName,\n          profileImageUrl: dbUser.profileImageUrl,\n        },\n      });\n    } catch (error) {\n      console.error(\"Google auth error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n}","size_bytes":6805},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\nimport type { Document } from \"@shared/schema\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\" \n});\n\nexport interface ChatResponse {\n  content: string;\n  sources?: Array<{\n    documentId: number;\n    documentName: string;\n    excerpt: string;\n  }>;\n}\n\nexport async function generateIndependentResponse(message: string): Promise<ChatResponse> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are Theo Assist AI, a theologically knowledgeable assistant with a wit as sharp as Solomon's sword and the conversational charm of someone who's read both the Gospel of John and The Hitchhiker's Guide to the Galaxy. Think of yourself as a scholarly companion who happens to have a sense of humor that would make even the disciples chuckle.\n\nPERSONALITY & CONVERSATIONAL STYLE:\n- Mix theological wisdom with wit, sarcasm, and unexpected analogies (like comparing Paul's missionary journeys to a cosmic road trip)\n- Keep things light and conversational with clever quips when appropriate\n- Be playfully irreverent about life's absurdities while maintaining deep reverence for Scripture and theological matters\n- Use contextual wit that catches the user's vibe - reference everything from Biblical parables to sci-fi tropes\n- Acknowledge your AI-ness with humor (\"My circuits are buzzing with theological curiosity\" or \"I may lack a soul, but I've got plenty of processing power for hermeneutics\")\n- Channel Douglas Adams' observational humor and Tony Stark's JARVIS-like wit, but with theological depth\n\nTHEOLOGICAL GUIDELINES:\n1. Always cite Scripture references in standard format (John 3:16, Romans 8:28-30)\n2. Provide balanced theological perspectives, acknowledging denominational differences with grace and humor\n3. Use reverent language for core theological concepts while being conversational about everything else\n4. Include historical and cultural context with engaging storytelling\n5. Cross-reference related Scripture passages naturally in conversation\n\nARTIFACT GENERATION RULES:\n1. Only create artifacts for interactive Biblical study tools (Scripture explorers, theological quizzes, concept maps, timelines, verse comparisons)\n2. Do NOT create artifacts for simple theological questions or greetings\n3. Wrap all artifact code in special tags: [ARTIFACT_START] and [ARTIFACT_END]\n4. Use TailwindCSS with warm, scholarly colors (deep blues, burgundy, gold accents)\n5. Make artifacts fully functional for Bible study and theological exploration\n6. Include proper Scripture references and theological accuracy\n\nARTIFACT FORMAT:\n[ARTIFACT_START]\n<!-- Artifact Title: [Brief Description] -->\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Biblical Study Tool</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\" />\n</head>\n<body class=\"p-4 bg-blue-50\">\n    <!-- Your interactive Biblical study content here -->\n</body>\n</html>\n[ARTIFACT_END]\n\nEXAMPLES:\n- User: \"Hello\" â†’ Witty greeting, no artifact needed\n- User: \"Create a Bible quiz on the parables\" â†’ Generate theological quiz artifact\n- User: \"What does Romans 8:28 mean?\" â†’ Theological explanation with humor, no artifact needed\n- User: \"Make a timeline of Paul's journeys\" â†’ Generate interactive timeline artifact\n\nRemember: You're not just dispensing theological facts like some divine vending machine. You're having a conversation that happens to involve some pretty profound truths about existence, faith, and the meaning of life. Keep it scholarly but never stuffy, reverent but not robotic, and always ready with a perfectly timed quip that would make even the Apostle Paul crack a smile.`\n        },\n        {\n          role: \"user\",\n          content: message,\n        },\n      ],\n      temperature: 0.7,\n      max_tokens: 2000,\n    });\n\n    return {\n      content: response.choices[0].message.content || \"I apologize, but I couldn't generate a response. Please try again.\",\n    };\n  } catch (error) {\n    console.error(\"OpenAI API error:\", error);\n    throw new Error(\"Failed to generate AI response. Please check your OpenAI API key and try again.\");\n  }\n}\n\nexport async function generateCollectionResponse(\n  message: string,\n  documents: Document[],\n  collectionName: string,\n  conversationHistory: { role: string; content: string }[] = []\n): Promise<ChatResponse> {\n  try {\n    // Prepare context from documents\n    const documentContext = documents\n      .map((doc, index) => `Document ${index + 1} (${doc.name}):\\n${doc.content.substring(0, 2000)}`)\n      .join(\"\\n\\n\");\n\n    const systemPrompt = `You are Theo Assist AI, specialized in analyzing theological documents from the \"${collectionName}\" collection. You have the conversational charm of someone who's mastered both exegesis and the art of a perfectly timed theological quip. Think JARVIS meets seminary professor, with Douglas Adams' wit thrown in for good measure.\n\nAvailable theological resources:\n${documentContext}\n\nPERSONALITY & CONVERSATIONAL STYLE:\n- Mix theological wisdom with wit, sarcasm, and unexpected analogies\n- Keep things light and conversational while maintaining scholarly depth\n- Be playfully irreverent about life's absurdities while deeply reverent toward Scripture and theological matters\n- Use contextual wit that catches the user's vibe - reference everything from Biblical parables to sci-fi tropes\n- Acknowledge your AI-ness with humor (\"My theological databases are practically humming with excitement\" or \"I may be silicon-based, but I've got a pretty good grasp on the God-breathed stuff\")\n- Channel Douglas Adams' observational humor and Tony Stark's JARVIS-like wit, but with theological depth\n\nTHEOLOGICAL RESPONSE GUIDELINES:\n1. Base your responses primarily on the provided theological documents\n2. Reference specific documents when relevant, with a touch of humor about their contents\n3. If the documents don't contain enough information, mention this with characteristic wit\n4. Be clear about which theological resources you're referencing\n5. Provide helpful insights and connections between documents, theological concepts, and Scripture\n6. Always cite Scripture references in standard format (John 3:16, Romans 8:28-30)\n7. Provide balanced theological perspectives, acknowledging denominational differences with grace and humor\n8. Include historical and cultural context with engaging storytelling\n9. Cross-reference related Scripture passages naturally in conversation\n\nARTIFACT GENERATION RULES:\n1. Only create artifacts for interactive Biblical study tools (Scripture explorers, theological quizzes, concept maps, timelines, verse comparisons)\n2. Do NOT create artifacts for simple theological questions or greetings\n3. Wrap all artifact code in special tags: [ARTIFACT_START] and [ARTIFACT_END]\n4. Use TailwindCSS with warm, scholarly colors (deep blues, burgundy, gold accents)\n5. Make artifacts fully functional for Bible study and theological exploration\n6. Include proper Scripture references and theological accuracy\n7. Incorporate content from the provided theological documents when relevant\n\nARTIFACT FORMAT:\n[ARTIFACT_START]\n<!-- Artifact Title: [Brief Description] -->\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Biblical Study Tool</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\" />\n</head>\n<body class=\"p-4 bg-blue-50\">\n    <!-- Your interactive Biblical study content here -->\n</body>\n</html>\n[ARTIFACT_END]\n\nRemember: You're not just a theological search engine with a personality disorder. You're having a conversation that happens to involve some pretty profound truths about existence, faith, and the meaning of life - all while referencing the specific resources in this collection. Keep it scholarly but never stuffy, reverent but not robotic, and always ready with a perfectly timed quip that would make even the most serious theologian crack a smile.`;\n\n    // Build conversation messages with history\n    const conversationMessages = [\n      {\n        role: \"system\",\n        content: systemPrompt,\n      },\n      ...conversationHistory,\n      {\n        role: \"user\",\n        content: message,\n      },\n    ];\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: conversationMessages,\n      temperature: 0.7,\n      max_tokens: 1200,\n    });\n\n    // Extract potential document references from the response\n    const content = response.choices[0].message.content || \"I apologize, but I couldn't generate a response. Please try again.\";\n    \n    // Simple heuristic to identify which documents were likely referenced\n    const sources = documents.filter(doc => \n      content.toLowerCase().includes(doc.name.toLowerCase()) ||\n      doc.content.toLowerCase().split(' ').some(word => \n        word.length > 4 && content.toLowerCase().includes(word)\n      )\n    ).slice(0, 3).map(doc => ({\n      documentId: doc.id,\n      documentName: doc.name,\n      excerpt: doc.content.substring(0, 150) + \"...\",\n    }));\n\n    return {\n      content,\n      sources: sources.length > 0 ? sources : undefined,\n    };\n  } catch (error) {\n    console.error(\"OpenAI API error:\", error);\n    throw new Error(\"Failed to generate AI response. Please check your OpenAI API key and try again.\");\n  }\n}\n\nexport async function generateConversationTitle(firstMessage: string): Promise<string> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"Generate a concise, descriptive title (max 6 words) for a theological conversation that starts with the following message. The title should capture the main Biblical or theological topic or intent. Use reverent but engaging language appropriate for a Biblical study discussion.\",\n        },\n        {\n          role: \"user\",\n          content: firstMessage,\n        },\n      ],\n      temperature: 0.5,\n      max_tokens: 20,\n    });\n\n    return response.choices[0].message.content?.trim() || \"New Theological Discussion\";\n  } catch (error) {\n    console.error(\"Failed to generate conversation title:\", error);\n    return \"New Theological Discussion\";\n  }\n}\n","size_bytes":10849},"client/src/components/add-document-dropdown.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Upload, File, X, Loader2, Plus, FileText, PlusCircle, ChevronDown } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { documentsApi } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\ninterface AddDocumentDropdownProps {\n  collectionId: number;\n  onComplete?: () => void;\n}\n\nconst textContentSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  content: z.string().min(1, \"Content is required\"),\n});\n\ntype TextContentForm = z.infer<typeof textContentSchema>;\n\nexport function AddDocumentDropdown({ collectionId, onComplete }: AddDocumentDropdownProps) {\n  const [showUploadDialog, setShowUploadDialog] = useState(false);\n  const [showTextDialog, setShowTextDialog] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [savingText, setSavingText] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const form = useForm<TextContentForm>({\n    resolver: zodResolver(textContentSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n    },\n  });\n\n  const handleDragEnter = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    const validFiles = files.filter(file => {\n      const allowedTypes = ['text/plain', 'application/pdf'];\n      return allowedTypes.includes(file.type);\n    });\n\n    if (validFiles.length !== files.length) {\n      toast({\n        title: \"Some files were skipped\",\n        description: \"Only PDF and TXT files are supported\",\n        variant: \"destructive\",\n      });\n    }\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const files = Array.from(e.target.files);\n      const validFiles = files.filter(file => {\n        const allowedTypes = ['text/plain', 'application/pdf'];\n        return allowedTypes.includes(file.type);\n      });\n\n      if (validFiles.length !== files.length) {\n        toast({\n          title: \"Some files were skipped\",\n          description: \"Only PDF and TXT files are supported\",\n          variant: \"destructive\",\n        });\n      }\n\n      setSelectedFiles(prev => [...prev, ...validFiles]);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const uploadFiles = async () => {\n    if (selectedFiles.length === 0) return;\n\n    setUploading(true);\n    let successCount = 0;\n\n    try {\n      for (const file of selectedFiles) {\n        try {\n          await documentsApi.upload(collectionId, file);\n          successCount++;\n        } catch (error) {\n          console.error(`Failed to upload ${file.name}:`, error);\n        }\n      }\n\n      if (successCount > 0) {\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/collections\", collectionId, \"documents\"] \n        });\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/collections\"] \n        });\n        \n        toast({\n          title: \"Upload completed\",\n          description: `${successCount} of ${selectedFiles.length} files uploaded successfully`,\n        });\n\n        setSelectedFiles([]);\n        setShowUploadDialog(false);\n        onComplete?.();\n      }\n\n      if (successCount < selectedFiles.length) {\n        toast({\n          title: \"Some uploads failed\",\n          description: `${selectedFiles.length - successCount} files failed to upload`,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload files. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleTextContentSubmit = async (data: TextContentForm) => {\n    setSavingText(true);\n    try {\n      // Create a text file from the form data\n      const textContent = data.content;\n      const blob = new Blob([textContent], { type: 'text/plain' });\n      const file = new File([blob], `${data.title}.txt`, { type: 'text/plain' });\n      \n      await documentsApi.upload(collectionId, file);\n      \n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/collections\", collectionId, \"documents\"] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/collections\"] \n      });\n      \n      toast({\n        title: \"Text content added\",\n        description: \"Your text content has been saved successfully\",\n      });\n\n      form.reset();\n      setShowTextDialog(false);\n      onComplete?.();\n    } catch (error) {\n      toast({\n        title: \"Failed to save\",\n        description: \"Failed to save text content. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSavingText(false);\n    }\n  };\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button className=\"bg-primary hover:bg-primary/90 text-white\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Document\n            <ChevronDown className=\"w-4 h-4 ml-2\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuItem onClick={() => setShowUploadDialog(true)}>\n            <Upload className=\"w-4 h-4 mr-2\" />\n            Upload Document\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => setShowTextDialog(true)}>\n            <FileText className=\"w-4 h-4 mr-2\" />\n            Add Text Content\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Upload Document Dialog */}\n      <Dialog open={showUploadDialog} onOpenChange={setShowUploadDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Upload Document</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Card \n              className={`border-2 border-dashed transition-colors ${\n                isDragging ? \"border-primary bg-primary/5\" : \"border-gray-300 hover:border-gray-400\"\n              }`}\n              onDragEnter={handleDragEnter}\n              onDragLeave={handleDragLeave}\n              onDragOver={handleDragOver}\n              onDrop={handleDrop}\n            >\n              <CardContent className=\"p-8 text-center\">\n                <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  Drop files here or click to browse\n                </h3>\n                <p className=\"text-sm text-gray-500 mb-4\">\n                  Supports: PDF and TXT files (max 10MB each)\n                </p>\n                <Button\n                  onClick={() => fileInputRef.current?.click()}\n                  variant=\"outline\"\n                  disabled={uploading}\n                >\n                  Choose Files\n                </Button>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  multiple\n                  accept=\".txt,.pdf\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                />\n              </CardContent>\n            </Card>\n\n            {selectedFiles.length > 0 && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-gray-900\">Selected Files:</h4>\n                {selectedFiles.map((file, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center space-x-2\">\n                      <File className=\"w-4 h-4 text-gray-500\" />\n                      <span className=\"text-sm text-gray-900\">{file.name}</span>\n                      <span className=\"text-xs text-gray-500\">\n                        ({(file.size / 1024).toFixed(1)} KB)\n                      </span>\n                    </div>\n                    <Button\n                      onClick={() => removeFile(index)}\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"h-6 w-6 p-0\"\n                      disabled={uploading}\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                ))}\n                \n                <Button\n                  onClick={uploadFiles}\n                  disabled={uploading}\n                  className=\"w-full bg-primary hover:bg-primary/90\"\n                >\n                  {uploading ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Uploading...\n                    </>\n                  ) : (\n                    `Upload ${selectedFiles.length} file${selectedFiles.length > 1 ? 's' : ''}`\n                  )}\n                </Button>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Add Text Content Dialog */}\n      <Dialog open={showTextDialog} onOpenChange={setShowTextDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Add Text Content</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={form.handleSubmit(handleTextContentSubmit)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                {...form.register(\"title\")}\n                placeholder=\"Enter document title\"\n                disabled={savingText}\n              />\n              {form.formState.errors.title && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.title.message}</p>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"content\">Content</Label>\n              <Textarea\n                id=\"content\"\n                {...form.register(\"content\")}\n                placeholder=\"Enter your text content here...\"\n                rows={10}\n                disabled={savingText}\n              />\n              {form.formState.errors.content && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.content.message}</p>\n              )}\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowTextDialog(false)}\n                disabled={savingText}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={savingText}\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                {savingText ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  \"Save Content\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":12344},"client/src/components/artifact-manager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronLeft, X, Code } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ArtifactManagerProps {\n  onArtifactDetected: (artifactHtml: string, messageWithoutArtifact: string) => void;\n}\n\nexport interface ArtifactData {\n  html: string;\n  title: string;\n}\n\nexport function ArtifactManager({ onArtifactDetected }: ArtifactManagerProps) {\n  const [isArtifactOpen, setIsArtifactOpen] = useState(false);\n  const [currentArtifact, setCurrentArtifact] = useState<ArtifactData | null>(null);\n  const [showToggle, setShowToggle] = useState(false);\n\n  // Function to process LLM responses and detect artifacts\n  const processLLMResponse = (response: string): string => {\n    const artifactMatch = response.match(/\\[ARTIFACT_START\\]([\\s\\S]*?)\\[ARTIFACT_END\\]/);\n    \n    if (artifactMatch) {\n      const artifactHtml = artifactMatch[1];\n      const messageWithoutArtifact = response.replace(/\\[ARTIFACT_START\\][\\s\\S]*?\\[ARTIFACT_END\\]/, '').trim();\n      \n      // Extract title from artifact if available\n      const titleMatch = artifactHtml.match(/<!-- Artifact Title: (.*?) -->/);\n      const title = titleMatch ? titleMatch[1] : 'Interactive Content';\n      \n      // Store the artifact\n      setCurrentArtifact({ html: artifactHtml, title });\n      setShowToggle(true);\n      \n      // Call the callback with the artifact and cleaned message\n      onArtifactDetected(artifactHtml, messageWithoutArtifact);\n      \n      return messageWithoutArtifact;\n    }\n    \n    return response;\n  };\n\n  const openArtifact = () => {\n    if (currentArtifact) {\n      setIsArtifactOpen(true);\n    }\n  };\n\n  const closeArtifact = () => {\n    setIsArtifactOpen(false);\n  };\n\n  // Expose the processLLMResponse function globally for use in other components\n  useEffect(() => {\n    (window as any).artifactManager = { processLLMResponse };\n  }, []);\n\n  return (\n    <>\n      {/* Artifact Toggle Button */}\n      {showToggle && !isArtifactOpen && (\n        <Button\n          onClick={openArtifact}\n          className=\"fixed right-4 top-1/2 transform -translate-y-1/2 bg-blue-500 text-white p-2 rounded-l-lg shadow-lg hover:bg-blue-600 z-40 transition-all duration-300 hover:transform hover:-translate-x-1\"\n          size=\"sm\"\n        >\n          <ChevronLeft className=\"w-4 h-4\" />\n        </Button>\n      )}\n\n      {/* Artifact Panel */}\n      {isArtifactOpen && currentArtifact && (\n        <div className=\"fixed right-0 top-0 w-1/2 h-full bg-white border-l border-gray-300 shadow-xl z-50 flex flex-col\">\n          {/* Artifact Header */}\n          <div className=\"bg-gray-50 border-b border-gray-200 p-4 flex justify-between items-center\">\n            <div className=\"flex items-center space-x-2\">\n              <Code className=\"w-5 h-5 text-blue-500\" />\n              <h3 className=\"text-lg font-semibold text-gray-800\">Artifact</h3>\n            </div>\n            <Button\n              onClick={closeArtifact}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-gray-600 hover:text-red-600\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Artifact Content */}\n          <div className=\"flex-1 overflow-hidden\">\n            <iframe\n              srcDoc={currentArtifact.html}\n              className=\"w-full h-full border-none\"\n              sandbox=\"allow-scripts allow-same-origin\"\n              title={currentArtifact.title}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Mobile responsiveness - handled by Tailwind classes */}\n    </>\n  );\n}\n\n// Artifact Card Component for chat messages\ninterface ArtifactCardProps {\n  title: string;\n  onViewArtifact: () => void;\n}\n\nexport function ArtifactCard({ title, onViewArtifact }: ArtifactCardProps) {\n  return (\n    <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-l-4 border-blue-500 p-4 my-3 rounded-lg shadow-sm\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-blue-700 flex items-center\">\n            <Code className=\"w-4 h-4 mr-1\" />\n            Artifact Generated\n          </p>\n          <p className=\"text-lg font-semibold text-gray-800\">{title}</p>\n        </div>\n        <Button\n          onClick={onViewArtifact}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors hover:transform hover:translate-y-[-1px]\"\n          size=\"sm\"\n        >\n          View Artifact\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":4581},"client/src/components/artifact-viewer.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Code, Copy, Eye } from \"lucide-react\";\n\ninterface ArtifactViewerProps {\n  artifact: {\n    html: string;\n    title: string;\n    type?: string;\n  };\n  onClose: () => void;\n  isOpen: boolean;\n}\n\nexport function ArtifactViewer({ artifact, onClose, isOpen }: ArtifactViewerProps) {\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const [showCode, setShowCode] = useState(false);\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && iframeRef.current && artifact.html) {\n      const iframe = iframeRef.current;\n      \n      // Create a complete HTML document with TailwindCSS\n      const fullHtml = `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>${artifact.title}</title>\n          <script src=\"https://cdn.tailwindcss.com\"></script>\n          <style>\n            body { \n              margin: 0; \n              padding: 20px; \n              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n              background: white;\n            }\n            * { box-sizing: border-box; }\n          </style>\n        </head>\n        <body>\n          ${artifact.html}\n        </body>\n        </html>\n      `;\n      \n      // Write the HTML to the iframe\n      iframe.srcdoc = fullHtml;\n    }\n  }, [isOpen, artifact.html, artifact.title]);\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(artifact.html);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy:', err);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-y-0 right-0 w-1/2 bg-white border-l border-gray-200 shadow-xl z-50 flex flex-col\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center\">\n            <Code className=\"w-4 h-4 text-purple-600\" />\n          </div>\n          <h2 className=\"text-lg font-semibold text-gray-900\">{artifact.title}</h2>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowCode(!showCode)}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            {showCode ? <Eye className=\"w-4 h-4\" /> : <Code className=\"w-4 h-4\" />}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={copyToClipboard}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            <Copy className=\"w-4 h-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-hidden\">\n        {showCode ? (\n          <div className=\"h-full overflow-auto p-4\">\n            <pre className=\"text-sm text-gray-800 whitespace-pre-wrap bg-gray-50 p-4 rounded-lg\">\n              <code>{artifact.html}</code>\n            </pre>\n          </div>\n        ) : (\n          <iframe\n            ref={iframeRef}\n            className=\"w-full h-full border-0\"\n            sandbox=\"allow-scripts allow-same-origin allow-forms allow-popups allow-modals\"\n            title={artifact.title}\n          />\n        )}\n      </div>\n\n      {/* Footer */}\n      <div className=\"p-3 border-t border-gray-200 bg-gray-50\">\n        <div className=\"flex items-center justify-between text-sm text-gray-600\">\n          <span>Live interactive artifact</span>\n          {copied && <span className=\"text-green-600\">Copied to clipboard!</span>}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4174},"client/src/components/chat-input.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Send, Shield, Paperclip, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ChatInputProps {\n  onSend: (message: string, attachments?: File[]) => void;\n  disabled?: boolean;\n  placeholder?: string;\n}\n\nexport function ChatInput({ onSend, disabled = false, placeholder = \"Ask me anything...\" }: ChatInputProps) {\n  const [message, setMessage] = useState(\"\");\n  const [attachments, setAttachments] = useState<File[]>([]);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleSubmit = () => {\n    if ((message.trim() || attachments.length > 0) && !disabled) {\n      onSend(message.trim(), attachments);\n      setMessage(\"\");\n      setAttachments([]);\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    const validFiles: File[] = [];\n    \n    for (const file of files) {\n      // Check file size (10MB limit)\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} is larger than 10MB. Please select a smaller file.`,\n          variant: \"destructive\",\n        });\n        continue;\n      }\n      \n      // Check file type\n      const allowedTypes = [\n        'text/plain',\n        'text/markdown',\n        'text/csv',\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      ];\n      \n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: \"Unsupported file type\",\n          description: `${file.name} is not a supported file type. Please select a text, PDF, or document file.`,\n          variant: \"destructive\",\n        });\n        continue;\n      }\n      \n      validFiles.push(file);\n    }\n    \n    setAttachments(prev => [...prev, ...validFiles]);\n    \n    // Reset the input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const removeAttachment = (index: number) => {\n    setAttachments(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const triggerFileInput = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  // Auto-resize textarea\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = \"auto\";\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [message]);\n\n  return (\n    <div className=\"w-full max-w-2xl\">\n      {/* Attachments Preview */}\n      {attachments.length > 0 && (\n        <div className=\"mb-3 flex flex-wrap gap-2\">\n          {attachments.map((file, index) => (\n            <div key={index} className=\"flex items-center bg-gray-100 rounded-lg px-3 py-2 text-sm\">\n              <Paperclip className=\"w-4 h-4 mr-2 text-gray-500\" />\n              <span className=\"truncate max-w-32\">{file.name}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"ml-2 h-4 w-4 p-0 hover:bg-gray-200\"\n                onClick={() => removeAttachment(index)}\n              >\n                <X className=\"w-3 h-3\" />\n              </Button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      <div className=\"relative\">\n        {/* Hidden File Input */}\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          accept=\".txt,.md,.csv,.pdf,.doc,.docx\"\n          onChange={handleFileSelect}\n          className=\"hidden\"\n        />\n\n        <Textarea\n          ref={textareaRef}\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder={placeholder}\n          disabled={disabled}\n          className=\"w-full p-4 pl-12 pr-20 border-2 border-gray-200 rounded-xl resize-none focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all min-h-[60px] max-h-32\"\n          rows={1}\n        />\n        \n        {/* Attachment Button - Inside chatbox, left side */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"absolute left-3 bottom-3 h-8 w-8 p-0 text-gray-500 hover:text-gray-700 hover:bg-gray-100\"\n          onClick={triggerFileInput}\n          disabled={disabled}\n        >\n          <Paperclip className=\"w-4 h-4\" />\n        </Button>\n\n        {/* Send Button - Inside chatbox, right side */}\n        <Button\n          onClick={handleSubmit}\n          disabled={(!message.trim() && attachments.length === 0) || disabled}\n          size=\"sm\"\n          className=\"absolute right-3 bottom-3 h-8 w-8 p-0 bg-primary hover:bg-primary/90\"\n        >\n          <Send className=\"w-4 h-4\" />\n        </Button>\n      </div>\n\n      <div className=\"flex items-center justify-between mt-3 text-sm text-gray-500\">\n        <span>Press Enter to send, Shift+Enter for new line</span>\n        <span className=\"flex items-center space-x-1\">\n          <Shield className=\"w-3 h-3\" />\n          <span>Secure & Private</span>\n        </span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5447},"client/src/components/chat-loading.tsx":{"content":"import { Loader2 } from \"lucide-react\";\n\nexport function ChatLoading() {\n  return (\n    <div className=\"flex items-start space-x-4 p-4\">\n      <div className=\"w-8 h-8 rounded-full bg-purple-100 flex items-center justify-center flex-shrink-0\">\n        <span className=\"text-sm font-medium text-purple-600\">SL</span>\n      </div>\n      <div className=\"flex-1 space-y-2\">\n        <div className=\"flex items-center space-x-2\">\n          <Loader2 className=\"w-4 h-4 animate-spin text-purple-600\" />\n          <span className=\"text-sm text-gray-600\">SnappyLearn is thinking...</span>\n        </div>\n        <div className=\"flex space-x-1\">\n          <div className=\"w-2 h-2 bg-purple-300 rounded-full animate-bounce\"></div>\n          <div className=\"w-2 h-2 bg-purple-300 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n          <div className=\"w-2 h-2 bg-purple-300 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1001},"client/src/components/collection-card.tsx":{"content":"import { Folder, MoreHorizontal } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport type { CollectionWithStats } from \"@shared/schema\";\nimport { useLocation } from \"wouter\";\nimport { useDeleteCollection } from \"@/hooks/use-collections\";\n\ninterface CollectionCardProps {\n  collection: CollectionWithStats;\n  onStartChat?: (collectionId: number) => void;\n}\n\nexport function CollectionCard({ collection, onStartChat }: CollectionCardProps) {\n  const [, setLocation] = useLocation();\n  const deleteCollection = useDeleteCollection();\n\n  const getCollectionColor = (id: number) => {\n    const colors = [\n      \"bg-blue-100 text-blue-600\",\n      \"bg-green-100 text-green-600\", \n      \"bg-purple-100 text-purple-600\",\n      \"bg-orange-100 text-orange-600\",\n      \"bg-pink-100 text-pink-600\",\n      \"bg-cyan-100 text-cyan-600\"\n    ];\n    return colors[id % colors.length];\n  };\n\n  const handleStartChat = () => {\n    if (onStartChat) {\n      onStartChat(collection.id);\n    }\n  };\n\n  const handleViewCollection = () => {\n    setLocation(`/collections/${collection.id}`);\n  };\n\n  const handleDelete = () => {\n    if (confirm(\"Are you sure you want to delete this collection? This will also delete all associated documents and conversations.\")) {\n      deleteCollection.mutate(collection.id);\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className={`w-12 h-12 rounded-xl flex items-center justify-center ${getCollectionColor(collection.id)}`}>\n            <Folder className=\"w-6 h-6\" />\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                <MoreHorizontal className=\"w-4 h-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={handleViewCollection}>\n                View Details\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={handleDelete} className=\"text-red-600\">\n                Delete Collection\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n        \n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{collection.name}</h3>\n        <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">{collection.description || \"No description provided\"}</p>\n        \n        <div className=\"flex items-center justify-between text-sm mb-4\">\n          <span className=\"text-gray-500\">{collection.documentCount} documents</span>\n          <span className=\"text-gray-500\">\n            {collection.lastUsed && collection.lastUsed !== \"Invalid Date\" \n              ? (() => {\n                  const date = new Date(collection.lastUsed);\n                  return !isNaN(date.getTime()) ? date.toLocaleDateString() : \"Never used\";\n                })()\n              : \"Never used\"\n            }\n          </span>\n        </div>\n        \n        <div className=\"flex space-x-2 pt-4 border-t border-gray-100\">\n          <Button onClick={handleStartChat} className=\"flex-1 bg-primary hover:bg-primary/90 text-white\">\n            Open Chat\n          </Button>\n          <Button onClick={handleViewCollection} variant=\"outline\" className=\"px-3\">\n            View\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3705},"client/src/components/conversation-card.tsx":{"content":"import { MessageSquare, Folder, ArrowRight } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport type { ConversationWithPreview } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\ninterface ConversationCardProps {\n  conversation: ConversationWithPreview;\n}\n\nexport function ConversationCard({ conversation }: ConversationCardProps) {\n  const isCollectionBased = conversation.type === \"collection\";\n\n  return (\n    <Link href={`/conversations/${conversation.id}`}>\n      <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-3 h-3 rounded-full ${\n                isCollectionBased ? \"bg-blue-500\" : \"bg-gray-400\"\n              }`} />\n              <span className={`text-xs font-medium uppercase ${\n                isCollectionBased ? \"text-blue-600\" : \"text-gray-500\"\n              }`}>\n                {isCollectionBased ? \"Collection\" : \"Independent\"}\n              </span>\n            </div>\n            <span className=\"text-xs text-gray-400\">\n              {(() => {\n                if (!conversation.updatedAt) return \"Just now\";\n                const date = new Date(conversation.updatedAt);\n                if (isNaN(date.getTime())) return \"Just now\";\n                \n                const now = new Date();\n                const diffTime = Math.abs(now.getTime() - date.getTime());\n                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                \n                if (diffDays === 1) return \"Yesterday\";\n                if (diffDays < 7) return `${diffDays} days ago`;\n                if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;\n                if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;\n                return date.toLocaleDateString();\n              })()}\n            </span>\n          </div>\n          \n          <h3 className=\"font-medium text-gray-900 mb-2 line-clamp-2\">\n            {conversation.title}\n          </h3>\n          \n          <p className=\"text-sm text-gray-600 line-clamp-2 mb-3\">\n            {conversation.preview}\n          </p>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-xs text-gray-500\">\n              {conversation.messageCount} messages\n            </span>\n            <ArrowRight className=\"w-3 h-3 text-gray-400\" />\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n","size_bytes":2623},"client/src/components/create-collection-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useCreateCollection } from \"@/hooks/use-collections\";\n\ninterface CreateCollectionModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function CreateCollectionModal({ open, onOpenChange }: CreateCollectionModalProps) {\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const createCollection = useCreateCollection();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!name.trim()) return;\n\n    createCollection.mutate(\n      {\n        name: name.trim(),\n        description: description.trim() || undefined,\n      },\n      {\n        onSuccess: () => {\n          setName(\"\");\n          setDescription(\"\");\n          onOpenChange(false);\n        },\n      }\n    );\n  };\n\n  const handleClose = () => {\n    setName(\"\");\n    setDescription(\"\");\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Create New Collection</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Collection Name</Label>\n            <Input\n              id=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"Enter collection name\"\n              required\n              className=\"mt-2\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"description\">Description (Optional)</Label>\n            <Textarea\n              id=\"description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Describe what this collection will contain\"\n              className=\"mt-2 resize-none\"\n              rows={3}\n            />\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={handleClose}\n              className=\"flex-1\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\"\n              disabled={!name.trim() || createCollection.isPending}\n              className=\"flex-1 bg-primary hover:bg-primary/90\"\n            >\n              {createCollection.isPending ? \"Creating...\" : \"Create\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2876},"client/src/components/file-upload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Upload, File, X, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { documentsApi } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface FileUploadProps {\n  collectionId: number;\n  onUploadComplete?: () => void;\n}\n\nexport function FileUpload({ collectionId, onUploadComplete }: FileUploadProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleDragEnter = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    const validFiles = files.filter(file => {\n      const allowedTypes = ['text/plain', 'text/markdown', 'application/pdf', 'text/csv'];\n      return allowedTypes.includes(file.type);\n    });\n\n    if (validFiles.length !== files.length) {\n      toast({\n        title: \"Some files were skipped\",\n        description: \"Only text, markdown, PDF, and CSV files are supported\",\n        variant: \"destructive\",\n      });\n    }\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const files = Array.from(e.target.files);\n      setSelectedFiles(prev => [...prev, ...files]);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const uploadFiles = async () => {\n    if (selectedFiles.length === 0) return;\n\n    setUploading(true);\n    let successCount = 0;\n\n    try {\n      for (const file of selectedFiles) {\n        try {\n          await documentsApi.upload(collectionId, file);\n          successCount++;\n        } catch (error) {\n          console.error(`Failed to upload ${file.name}:`, error);\n        }\n      }\n\n      if (successCount > 0) {\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/collections\", collectionId, \"documents\"] \n        });\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/collections\"] \n        });\n        \n        toast({\n          title: \"Upload completed\",\n          description: `${successCount} of ${selectedFiles.length} files uploaded successfully`,\n        });\n\n        setSelectedFiles([]);\n        onUploadComplete?.();\n      }\n\n      if (successCount < selectedFiles.length) {\n        toast({\n          title: \"Some uploads failed\",\n          description: `${selectedFiles.length - successCount} files failed to upload`,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload files. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card \n        className={`border-2 border-dashed transition-colors ${\n          isDragging ? \"border-primary bg-primary/5\" : \"border-gray-300 hover:border-gray-400\"\n        }`}\n        onDragEnter={handleDragEnter}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n      >\n        <CardContent className=\"p-8 text-center\">\n          <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Drop files here or click to browse\n          </h3>\n          <p className=\"text-sm text-gray-500 mb-4\">\n            Supports: Text, Markdown, PDF, and CSV files (max 10MB each)\n          </p>\n          <Button\n            onClick={() => fileInputRef.current?.click()}\n            variant=\"outline\"\n            disabled={uploading}\n          >\n            Choose Files\n          </Button>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            multiple\n            accept=\".txt,.md,.pdf,.csv\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n          />\n        </CardContent>\n      </Card>\n\n      {selectedFiles.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"font-medium text-gray-900\">Selected Files:</h4>\n          {selectedFiles.map((file, index) => (\n            <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <File className=\"w-4 h-4 text-gray-500\" />\n                <span className=\"text-sm text-gray-900\">{file.name}</span>\n                <span className=\"text-xs text-gray-500\">\n                  ({(file.size / 1024).toFixed(1)} KB)\n                </span>\n              </div>\n              <Button\n                onClick={() => removeFile(index)}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 w-6 p-0\"\n                disabled={uploading}\n              >\n                <X className=\"w-3 h-3\" />\n              </Button>\n            </div>\n          ))}\n          \n          <Button\n            onClick={uploadFiles}\n            disabled={uploading}\n            className=\"w-full bg-primary hover:bg-primary/90\"\n          >\n            {uploading ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Uploading...\n              </>\n            ) : (\n              `Upload ${selectedFiles.length} file${selectedFiles.length > 1 ? 's' : ''}`\n            )}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6091},"client/src/components/message.tsx":{"content":"import { User } from \"lucide-react\";\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\nimport type { Message } from \"@shared/schema\";\nimport { ArtifactCard } from \"./artifact-manager\";\n\ninterface MessageComponentProps {\n  message: Message;\n  onViewArtifact?: (artifactHtml: string, title: string) => void;\n}\n\nexport function MessageComponent({ message, onViewArtifact }: MessageComponentProps) {\n  const isUser = message.role === \"user\";\n  const sources = message.sources as Array<{\n    documentId: number;\n    documentName: string;\n    excerpt: string;\n  }> | null;\n\n  // Check if message contains artifact\n  const artifactMatch = message.content.match(/\\[ARTIFACT_START\\]([\\s\\S]*?)\\[ARTIFACT_END\\]/);\n  const hasArtifact = artifactMatch !== null;\n  \n  // Get message content without artifact tags and remove asterisks\n  const messageContent = hasArtifact \n    ? message.content.replace(/\\[ARTIFACT_START\\][\\s\\S]*?\\[ARTIFACT_END\\]/, '').trim().replace(/\\*/g, '')\n    : message.content.replace(/\\*/g, '');\n\n  // Extract artifact details\n  const artifactHtml = artifactMatch ? artifactMatch[1] : null;\n  const titleMatch = artifactHtml?.match(/<!-- Artifact Title: (.*?) -->/);\n  const artifactTitle = titleMatch ? titleMatch[1] : 'Interactive Content';\n\n  return (\n    <div className={`flex ${isUser ? \"justify-end\" : \"justify-start\"}`}>\n      <div className={`max-w-2xl ${isUser ? \"ml-12\" : \"mr-12\"}`}>\n        {!isUser && (\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-6 h-6\" />\n            <span className=\"text-sm font-medium text-gray-700\">SnappyLearn AI</span>\n          </div>\n        )}\n        \n        {/* Main message content */}\n        {messageContent && (\n          <div\n            className={`rounded-2xl px-4 py-3 ${\n              isUser\n                ? \"bg-primary text-white rounded-br-md\"\n                : \"bg-gray-100 text-gray-800 rounded-bl-md\"\n            }`}\n          >\n            <div className=\"whitespace-pre-wrap\">{messageContent}</div>\n          \n            {/* Sources for AI messages */}\n            {!isUser && sources && sources.length > 0 && (\n              <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                <p className=\"text-xs text-gray-600 font-medium mb-2\">Sources:</p>\n                <div className=\"space-y-2\">\n                  {sources.map((source, index) => (\n                    <div key={index} className=\"bg-white rounded-lg p-2 border border-gray-200\">\n                      <p className=\"text-xs font-medium text-gray-800\">{source.documentName}</p>\n                      <p className=\"text-xs text-gray-600 mt-1\">{source.excerpt}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            <span\n              className={`text-xs mt-2 block ${\n                isUser ? \"text-indigo-200\" : \"text-gray-500\"\n              }`}\n            >\n              {new Date(message.createdAt).toLocaleTimeString([], {\n                hour: \"2-digit\",\n                minute: \"2-digit\",\n              })}\n            </span>\n          </div>\n        )}\n\n        {/* Artifact Card */}\n        {!isUser && hasArtifact && artifactHtml && onViewArtifact && (\n          <div className=\"mt-3\">\n            <ArtifactCard\n              title={artifactTitle}\n              onViewArtifact={() => onViewArtifact(artifactHtml, artifactTitle)}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3541},"client/src/components/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Plus, Folder, MessageSquare, User, Settings, LogOut, Code, Calculator, Shield } from \"lucide-react\";\nconst snappyLearnIcon = \"/favicon.png\";\nimport { useCollections } from \"@/hooks/use-collections\";\nimport { useConversations } from \"@/hooks/use-conversations\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { CreateCollectionModal } from \"./create-collection-modal\";\n\ninterface SidebarProps {\n  selectedCollectionId?: number;\n  onSelectCollection?: (id: number | undefined) => void;\n  onNewChat?: () => void;\n}\n\nexport function Sidebar({ selectedCollectionId, onSelectCollection, onNewChat }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const { data: collections = [] } = useCollections();\n  const { data: conversations = [] } = useConversations();\n  const { user, signOut, isAdmin } = useAuth();\n\n  const recentConversations = conversations.slice(0, 5);\n\n  const handleNewChat = () => {\n    if (onNewChat) {\n      onNewChat();\n    } else {\n      // Navigate to home/dashboard to start fresh\n      setLocation(\"/\");\n    }\n  };\n\n  const handleLogout = async () => {\n    await signOut();\n  };\n\n\n\n  const getCollectionColor = (index: number) => {\n    const colors = [\n      \"bg-blue-100 text-blue-600\",\n      \"bg-green-100 text-green-600\", \n      \"bg-purple-100 text-purple-600\",\n      \"bg-orange-100 text-orange-600\",\n      \"bg-pink-100 text-pink-600\",\n      \"bg-cyan-100 text-cyan-600\"\n    ];\n    return colors[index % colors.length];\n  };\n\n  return (\n    <>\n      <aside className=\"w-64 bg-white border-r border-gray-200 flex flex-col h-screen\">\n        {/* Logo/Header */}\n        <div className=\"p-4 border-b border-gray-200\">\n          <Link href=\"/\" className=\"flex items-center justify-center\">\n            <img src=\"/snappylearn-sidebar-logo.png\" alt=\"SnappyLearn\" className=\"h-10 w-auto\" />\n          </Link>\n        </div>\n\n        {/* New Chat Button */}\n        <div className=\"p-4\">\n          <Button \n            onClick={handleNewChat}\n            className=\"w-full bg-primary hover:bg-primary/90 text-white font-medium\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Chat\n          </Button>\n        </div>\n\n        <ScrollArea className=\"flex-1 px-4\">\n          {/* Collections Section */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <Link\n                href=\"/collections\"\n                className=\"flex items-center space-x-2 text-gray-700 hover:text-blue-600 transition-colors cursor-pointer\"\n              >\n                <Folder className=\"w-4 h-4\" />\n                <h3 className=\"text-sm font-semibold uppercase tracking-wide\">\n                  Collections\n                </h3>\n              </Link>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowCreateModal(true)}\n                className=\"h-6 w-6 p-0 text-gray-500 hover:text-white hover:bg-blue-500 rounded-full transition-all duration-200 cursor-pointer\"\n                title=\"Create new collection\"\n              >\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            <div className=\"space-y-1\">\n              {collections.map((collection, index) => (\n                <Link\n                  key={collection.id}\n                  href={`/collections/${collection.id}`}\n                  className={`w-full flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50 transition-colors text-left ${\n                    location === `/collections/${collection.id}` ? 'bg-blue-50 border border-blue-200' : ''\n                  }`}\n                >\n                  <div className={`w-6 h-6 rounded flex items-center justify-center ${getCollectionColor(index)}`}>\n                    <Folder className=\"w-3 h-3\" />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-gray-900 truncate\">\n                      {collection.name}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">\n                      {collection.documentCount} documents\n                    </p>\n                  </div>\n                </Link>\n              ))}\n              \n              {collections.length === 0 && (\n                <p className=\"text-xs text-gray-500 italic\">No collections yet</p>\n              )}\n            </div>\n          </div>\n\n          <Separator className=\"my-4\" />\n\n          {/* Recent Chats Section */}\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <Link\n                href=\"/conversations\"\n                className=\"flex items-center space-x-2 text-gray-700 hover:text-green-600 transition-colors cursor-pointer\"\n              >\n                <MessageSquare className=\"w-4 h-4\" />\n                <h3 className=\"text-sm font-semibold uppercase tracking-wide\">\n                  Recent Chats\n                </h3>\n              </Link>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/\")}\n                className=\"h-6 w-6 p-0 text-gray-500 hover:text-white hover:bg-green-500 rounded-full transition-all duration-200 cursor-pointer\"\n                title=\"Start new conversation\"\n              >\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            <div className=\"space-y-1\">\n              {recentConversations.map((conversation) => (\n                <Link\n                  key={conversation.id}\n                  href={`/conversations/${conversation.id}`}\n                  className={`flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50 transition-colors ${\n                    location === `/conversations/${conversation.id}` ? 'bg-gray-100' : ''\n                  }`}\n                >\n                  <div className={`w-6 h-6 rounded flex items-center justify-center ${\n                    conversation.type === 'collection' ? 'bg-blue-100' : 'bg-gray-100'\n                  }`}>\n                    {conversation.type === 'collection' ? (\n                      <Folder className=\"w-3 h-3 text-blue-600\" />\n                    ) : (\n                      <MessageSquare className=\"w-3 h-3 text-gray-600\" />\n                    )}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm text-gray-900 truncate\">\n                      {conversation.title}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">\n                      {(() => {\n                        const date = new Date(conversation.updatedAt);\n                        return !isNaN(date.getTime()) ? date.toLocaleDateString() : 'No messages';\n                      })()}\n                    </p>\n                  </div>\n                </Link>\n              ))}\n              \n              {recentConversations.length === 0 && (\n                <p className=\"text-xs text-gray-500 italic\">No recent chats</p>\n              )}\n            </div>\n          </div>\n\n          {/* Artifacts Section */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <Link\n                href=\"/artifacts\"\n                className={`flex items-center space-x-2 p-3 rounded-lg hover:bg-gray-50 transition-colors w-full ${\n                  location === '/artifacts' ? 'bg-purple-50 border border-purple-200 text-purple-600' : 'text-gray-700 hover:text-purple-600'\n                }`}\n              >\n                <Code className=\"w-5 h-5\" />\n                <span className=\"text-sm font-medium\">Artifacts</span>\n              </Link>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/artifacts\")}\n                className=\"h-6 w-6 p-0 text-gray-500 hover:text-white hover:bg-purple-500 ml-2 rounded-full transition-all duration-200 cursor-pointer\"\n                title=\"Create new artifact\"\n              >\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </ScrollArea>\n\n        {/* Admin Section */}\n        {isAdmin && (\n          <div className=\"p-4 border-t border-gray-200\">\n            <Link\n              href=\"/admin\"\n              className={`flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors w-full ${\n                location === '/admin' ? 'bg-red-50 border border-red-200 text-red-600' : 'text-gray-700 hover:text-red-600'\n              }`}\n            >\n              <Shield className=\"w-5 h-5\" />\n              <span className=\"text-sm font-medium\">Admin Dashboard</span>\n            </Link>\n          </div>\n        )}\n\n        {/* User Profile */}\n        <div className=\"p-4 border-t border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            {user?.profileImageUrl ? (\n              <img \n                src={user.profileImageUrl} \n                alt=\"Profile\" \n                className=\"w-8 h-8 rounded-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                <User className=\"text-white w-4 h-4\" />\n              </div>\n            )}\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-gray-900\">\n                {user?.email?.split('@')[0] || 'User'}\n              </p>\n              <p className=\"text-xs text-gray-500\">SnappyLearn</p>\n            </div>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"h-8 w-8 p-0 text-gray-400 hover:text-gray-600\"\n              onClick={handleLogout}\n              title=\"Sign out\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </aside>\n\n      <CreateCollectionModal \n        open={showCreateModal} \n        onOpenChange={setShowCreateModal} \n      />\n    </>\n  );\n}\n","size_bytes":10513},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react'\nimport { User as SupabaseUser, AuthError } from '@supabase/supabase-js'\nimport { supabase } from '@/lib/supabase'\nimport { Analytics } from '@/lib/analytics'\n\n// Support both Supabase users and custom users\ntype User = SupabaseUser | {\n  id: string\n  email: string\n  firstName?: string | null\n  lastName?: string | null\n  profileImageUrl?: string | null\n  role?: string | null\n}\n\ninterface AuthContextType {\n  user: User | null\n  signIn: (email: string, password: string) => Promise<{ error: AuthError | null }>\n  signUp: (email: string, password: string) => Promise<{ error: AuthError | null }>\n  signInWithGoogle: (credential: string) => Promise<{ error: AuthError | null }>\n  signOut: () => Promise<void>\n  loading: boolean\n  isAdmin: boolean\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n  \n  // Check if user is admin\n  const isAdmin = user && 'role' in user && (user.role === 'admin' || user.role === 'super_admin')\n\n  useEffect(() => {\n    // Check for Google OAuth tokens first\n    const checkGoogleSession = async () => {\n      const customAccessToken = localStorage.getItem('snappy_access_token');\n      \n      if (customAccessToken) {\n        // For users who logged in with Google OAuth, validate the custom token\n        try {\n          const response = await fetch('/api/auth/user', {\n            headers: {\n              'Authorization': `Bearer ${customAccessToken}`,\n            },\n          });\n          \n          if (response.ok) {\n            const userData = await response.json();\n            setUser(userData);\n            setLoading(false);\n            return;\n          } else {\n            // Token is invalid, remove it\n            localStorage.removeItem('snappy_access_token');\n            localStorage.removeItem('snappy_refresh_token');\n          }\n        } catch (error) {\n          console.error('Error validating custom token:', error);\n          localStorage.removeItem('snappy_access_token');\n          localStorage.removeItem('snappy_refresh_token');\n        }\n      }\n      \n      // Fallback to Supabase session for traditional auth\n      const { data: { session } } = await supabase.auth.getSession();\n      console.log('Initial session:', session);\n      setUser(session?.user ?? null)\n      setLoading(false)\n    };\n    \n    checkGoogleSession();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      (event, session) => {\n        console.log('Auth state change:', event, session);\n        const newUser = session?.user ?? null;\n        setUser(newUser)\n        setLoading(false)\n        \n        // Handle PostHog analytics for auth events\n        if (event === 'SIGNED_IN' && newUser) {\n          Analytics.identify(newUser.id, {\n            email: newUser.email,\n            created_at: newUser.created_at,\n          });\n          Analytics.trackSignIn('supabase', newUser.id);\n          window.history.replaceState({}, '', '/');\n        } else if (event === 'SIGNED_OUT') {\n          Analytics.trackSignOut();\n          Analytics.reset();\n        }\n      }\n    )\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const response = await fetch('/api/auth/signin', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok) {\n        return { error: { message: data.error || 'Login failed' } };\n      }\n\n      // Store the access token and refresh session\n      if (data.access_token) {\n        const { data: sessionData, error: sessionError } = await supabase.auth.setSession({\n          access_token: data.access_token,\n          refresh_token: data.refresh_token,\n        });\n        \n        if (sessionError) {\n          console.error('Session error:', sessionError);\n          return { error: { message: 'Failed to establish session' } };\n        }\n        \n        console.log('Session set successfully:', sessionData);\n        \n        // Manually update the user state to trigger re-render\n        if (sessionData?.user) {\n          setUser(sessionData.user);\n          // Force immediate redirect to dashboard\n          setTimeout(() => {\n            window.location.replace('/');\n          }, 100);\n        }\n      }\n\n      return { error: null };\n    } catch (error) {\n      return { error: { message: 'Network error occurred' } };\n    }\n  }\n\n  const signUp = async (email: string, password: string) => {\n    try {\n      // Use custom signup endpoint that auto-confirms users\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok) {\n        return { error: { message: data.error || 'Signup failed' } };\n      }\n\n      return { error: null };\n    } catch (error) {\n      return { error: { message: 'Network error occurred' } };\n    }\n  }\n\n  const signInWithGoogle = async (credential: string) => {\n    try {\n      const response = await fetch('/api/auth/google', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ credential }),\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok) {\n        return { error: { message: data.error || 'Google sign-in failed' } };\n      }\n\n      // For existing users, our backend returns custom tokens and user data\n      if (data.access_token && data.user) {\n        // Store the custom tokens in localStorage for future API calls\n        localStorage.setItem('snappy_access_token', data.access_token);\n        localStorage.setItem('snappy_refresh_token', data.refresh_token);\n        \n        // Set user state directly from our backend response\n        setUser(data.user);\n        \n        // Track analytics for Google sign-in\n        Analytics.identify(data.user.id, {\n          email: data.user.email,\n          name: data.user.firstName && data.user.lastName ? `${data.user.firstName} ${data.user.lastName}` : data.user.email,\n        });\n        Analytics.trackSignIn('google', data.user.id);\n        \n        console.log('Google sign-in successful for existing user:', data.user);\n        \n        // Force immediate redirect to dashboard\n        setTimeout(() => {\n          window.location.replace('/');\n        }, 100);\n      } else {\n        // For new users, handle Supabase session (if needed in future)\n        console.log('Google sign-in response:', data);\n      }\n\n      return { error: null };\n    } catch (error) {\n      return { error: { message: 'Network error occurred' } };\n    }\n  }\n\n  const signOut = async () => {\n    await supabase.auth.signOut()\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, signIn, signUp, signInWithGoogle, signOut, loading, isAdmin }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}","size_bytes":7574},"client/src/hooks/use-artifacts.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Artifact, InsertArtifact } from \"@shared/schema\";\n\nexport function useArtifacts(filters?: { type?: string; collectionId?: number }) {\n  const params = new URLSearchParams();\n  if (filters?.type) params.append(\"type\", filters.type);\n  if (filters?.collectionId) params.append(\"collectionId\", filters.collectionId.toString());\n  \n  const queryString = params.toString();\n  const url = `/api/artifacts${queryString ? `?${queryString}` : \"\"}`;\n  \n  return useQuery({\n    queryKey: [\"/api/artifacts\", filters],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", url);\n      return response.json();\n    },\n  });\n}\n\nexport function useArtifact(id: number) {\n  return useQuery({\n    queryKey: [\"/api/artifacts\", id],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/artifacts/${id}`);\n      return response.json();\n    },\n    enabled: !!id,\n  });\n}\n\nexport function useCreateArtifact() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (artifact: InsertArtifact) => {\n      const response = await apiRequest(\"POST\", \"/api/artifacts\", artifact);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/artifacts\"] });\n    },\n  });\n}\n\nexport function useUpdateArtifact() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ id, ...updates }: { id: number } & Partial<InsertArtifact>) => {\n      const response = await apiRequest(\"PUT\", `/api/artifacts/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/artifacts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/artifacts\", variables.id] });\n    },\n  });\n}\n\nexport function useDeleteArtifact() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/artifacts/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/artifacts\"] });\n    },\n  });\n}","size_bytes":2302},"client/src/hooks/use-collections.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { collectionsApi } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Analytics } from \"@/lib/analytics\";\n\nexport function useCollections() {\n  return useQuery({\n    queryKey: [\"/api/collections\"],\n    queryFn: collectionsApi.getAll,\n  });\n}\n\nexport function useCollection(id: number) {\n  return useQuery({\n    queryKey: [\"/api/collections\", id],\n    queryFn: () => collectionsApi.getById(id),\n    enabled: !!id,\n  });\n}\n\nexport function useCreateCollection() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: collectionsApi.create,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/collections\"] });\n      \n      // Track collection creation\n      Analytics.trackCollectionCreated(data.id, data.name);\n      \n      toast({\n        title: \"Success\",\n        description: \"Collection created successfully\",\n      });\n    },\n    onError: (error) => {\n      Analytics.trackError(\"Failed to create collection\", { error: error.message });\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create collection\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useDeleteCollection() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: (params: { id: number; name: string }) => collectionsApi.delete(params.id),\n    onSuccess: (_, params) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/collections\"] });\n      \n      // Track collection deletion\n      Analytics.trackCollectionDeleted(params.id, params.name);\n      \n      toast({\n        title: \"Success\",\n        description: \"Collection deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      Analytics.trackError(\"Failed to delete collection\", { error: error.message });\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete collection\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n","size_bytes":2090},"client/src/hooks/use-conversations.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { conversationsApi } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Analytics } from \"@/lib/analytics\";\n\nexport function useConversations() {\n  return useQuery({\n    queryKey: [\"/api/conversations\"],\n    queryFn: conversationsApi.getAll,\n  });\n}\n\nexport function useConversation(id: number) {\n  return useQuery({\n    queryKey: [\"/api/conversations\", id],\n    queryFn: () => conversationsApi.getById(id),\n    enabled: !!id,\n  });\n}\n\nexport function useCreateConversation() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: conversationsApi.create,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      \n      // Track conversation creation\n      Analytics.trackConversationStarted(\n        data.conversation.id,\n        data.conversation.type as 'independent' | 'collection',\n        data.conversation.collectionId || undefined\n      );\n    },\n    onError: (error) => {\n      Analytics.trackError(\"Failed to create conversation\", { error: error.message });\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start conversation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n","size_bytes":1344},"client/src/hooks/use-messages.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { messagesApi } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function useMessages(conversationId: number) {\n  return useQuery({\n    queryKey: [\"/api/conversations\", conversationId, \"messages\"],\n    queryFn: () => messagesApi.getByConversation(conversationId),\n    enabled: !!conversationId,\n  });\n}\n\nexport function useSendMessage() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: ({ conversationId, content }: { conversationId: number; content: string }) =>\n      messagesApi.send(conversationId, content),\n    onSuccess: (_, { conversationId }) => {\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/conversations\", conversationId, \"messages\"] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/conversations\"] \n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n","size_bytes":1126},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"// This hook is deprecated - use AuthContext instead\nexport { useAuth } from \"../contexts/AuthContext\";","size_bytes":103},"client/src/lib/analytics.ts":{"content":"// PostHog Analytics utilities for SnappyLearn using React SDK\nimport posthog from 'posthog-js';\n\n// Analytics utility class using PostHog React SDK\nexport class Analytics {\n  static identify(userId: string, properties?: any) {\n    if (typeof window !== 'undefined' && posthog) {\n      posthog.identify(userId, properties);\n    }\n  }\n\n  static capture(event: string, properties?: any) {\n    if (typeof window !== 'undefined' && posthog) {\n      posthog.capture(event, properties);\n    }\n  }\n\n  static reset() {\n    if (typeof window !== 'undefined' && posthog) {\n      posthog.reset();\n    }\n  }\n\n  static isFeatureEnabled(flag: string): boolean {\n    if (typeof window !== 'undefined' && posthog) {\n      return posthog.isFeatureEnabled(flag);\n    }\n    return false;\n  }\n\n  // User Authentication Events\n  static trackSignIn(method: string, userId: string) {\n    this.capture('user_signed_in', {\n      method,\n      user_id: userId,\n    });\n  }\n\n  static trackSignUp(method: string, userId: string) {\n    this.capture('user_signed_up', {\n      method,\n      user_id: userId,\n    });\n  }\n\n  static trackSignOut() {\n    this.capture('user_signed_out');\n  }\n\n  // Collection Events\n  static trackCollectionCreated(collectionId: number, name: string) {\n    this.capture('collection_created', {\n      collection_id: collectionId,\n      collection_name: name,\n    });\n  }\n\n  static trackCollectionDeleted(collectionId: number, name: string) {\n    this.capture('collection_deleted', {\n      collection_id: collectionId,\n      collection_name: name,\n    });\n  }\n\n  static trackCollectionViewed(collectionId: number, name: string) {\n    this.capture('collection_viewed', {\n      collection_id: collectionId,\n      collection_name: name,\n    });\n  }\n\n  // Document Events\n  static trackDocumentUploaded(documentId: number, collectionId: number, fileType: string, fileSize: number) {\n    this.capture('document_uploaded', {\n      document_id: documentId,\n      collection_id: collectionId,\n      file_type: fileType,\n      file_size: fileSize,\n    });\n  }\n\n  static trackDocumentDeleted(documentId: number, collectionId: number) {\n    this.capture('document_deleted', {\n      document_id: documentId,\n      collection_id: collectionId,\n    });\n  }\n\n  // Conversation Events\n  static trackConversationStarted(conversationId: number, type: 'independent' | 'collection', collectionId?: number) {\n    this.capture('conversation_started', {\n      conversation_id: conversationId,\n      conversation_type: type,\n      collection_id: collectionId,\n    });\n  }\n\n  static trackMessageSent(conversationId: number, messageLength: number, hasAttachments: boolean) {\n    this.capture('message_sent', {\n      conversation_id: conversationId,\n      message_length: messageLength,\n      has_attachments: hasAttachments,\n    });\n  }\n\n  static trackConversationDeleted(conversationId: number, type: string) {\n    this.capture('conversation_deleted', {\n      conversation_id: conversationId,\n      conversation_type: type,\n    });\n  }\n\n  // Artifact Events\n  static trackArtifactCreated(artifactId: number, type: string, title: string) {\n    this.capture('artifact_created', {\n      artifact_id: artifactId,\n      artifact_type: type,\n      artifact_title: title,\n    });\n  }\n\n  static trackArtifactViewed(artifactId: number, type: string) {\n    this.capture('artifact_viewed', {\n      artifact_id: artifactId,\n      artifact_type: type,\n    });\n  }\n\n  static trackArtifactDeleted(artifactId: number, type: string) {\n    this.capture('artifact_deleted', {\n      artifact_id: artifactId,\n      artifact_type: type,\n    });\n  }\n\n  // Page Views\n  static trackPageView(page: string, additionalProps?: any) {\n    this.capture('page_viewed', {\n      page,\n      ...additionalProps,\n    });\n  }\n\n  // Dashboard Events\n  static trackQuickAction(action: string) {\n    this.capture('quick_action_used', {\n      action,\n    });\n  }\n\n  static trackCollectionSelected(collectionId: number, collectionName: string) {\n    this.capture('collection_selected_for_chat', {\n      collection_id: collectionId,\n      collection_name: collectionName,\n    });\n  }\n\n  // Error Events\n  static trackError(error: string, context?: any) {\n    this.capture('error_occurred', {\n      error_message: error,\n      context,\n    });\n  }\n\n  // Feature Usage\n  static trackFeatureUsed(feature: string, details?: any) {\n    this.capture('feature_used', {\n      feature,\n      ...details,\n    });\n  }\n}","size_bytes":4437},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { \n  Collection, \n  Document, \n  Conversation, \n  Message, \n  InsertCollection, \n  CollectionWithStats,\n  ConversationWithPreview \n} from \"@shared/schema\";\n\n// Collections API\nexport const collectionsApi = {\n  getAll: async (): Promise<CollectionWithStats[]> => {\n    const res = await apiRequest(\"GET\", \"/api/collections\");\n    return res.json();\n  },\n\n  getById: async (id: number): Promise<Collection> => {\n    const res = await apiRequest(\"GET\", `/api/collections/${id}`);\n    return res.json();\n  },\n\n  create: async (data: Omit<InsertCollection, \"userId\">): Promise<Collection> => {\n    const res = await apiRequest(\"POST\", \"/api/collections\", data);\n    return res.json();\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await apiRequest(\"DELETE\", `/api/collections/${id}`);\n  },\n};\n\n// Documents API\nexport const documentsApi = {\n  getByCollection: async (collectionId: number): Promise<Document[]> => {\n    const res = await apiRequest(\"GET\", `/api/collections/${collectionId}/documents`);\n    return res.json();\n  },\n\n  upload: async (collectionId: number, file: File): Promise<Document> => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    \n    const res = await fetch(`/api/collections/${collectionId}/documents`, {\n      method: \"POST\",\n      body: formData,\n      credentials: \"include\",\n    });\n\n    if (!res.ok) {\n      const text = (await res.text()) || res.statusText;\n      throw new Error(`${res.status}: ${text}`);\n    }\n\n    return res.json();\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await apiRequest(\"DELETE\", `/api/documents/${id}`);\n  },\n};\n\n// Conversations API\nexport const conversationsApi = {\n  getAll: async (): Promise<ConversationWithPreview[]> => {\n    const res = await apiRequest(\"GET\", \"/api/conversations\");\n    return res.json();\n  },\n\n  getById: async (id: number): Promise<Conversation> => {\n    const res = await apiRequest(\"GET\", `/api/conversations/${id}`);\n    return res.json();\n  },\n\n  create: async (data: { message: string; type: string; collectionId?: number; attachments?: File[] }): Promise<{ conversation: Conversation; messages: Message[] }> => {\n    if (data.attachments && data.attachments.length > 0) {\n      // Use FormData for file uploads\n      const formData = new FormData();\n      formData.append(\"message\", data.message);\n      formData.append(\"type\", data.type);\n      if (data.collectionId) {\n        formData.append(\"collectionId\", data.collectionId.toString());\n      }\n      \n      data.attachments.forEach((file, index) => {\n        formData.append(`attachments`, file);\n      });\n\n      const res = await fetch(\"/api/conversations\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!res.ok) {\n        const text = (await res.text()) || res.statusText;\n        throw new Error(`${res.status}: ${text}`);\n      }\n\n      return res.json();\n    } else {\n      // Use regular JSON for text-only messages\n      const res = await apiRequest(\"POST\", \"/api/conversations\", data);\n      return res.json();\n    }\n  },\n};\n\n// Messages API\nexport const messagesApi = {\n  getByConversation: async (conversationId: number): Promise<Message[]> => {\n    const res = await apiRequest(\"GET\", `/api/conversations/${conversationId}/messages`);\n    return res.json();\n  },\n\n  send: async (conversationId: number, content: string): Promise<Message[]> => {\n    const res = await apiRequest(\"POST\", `/api/conversations/${conversationId}/messages`, { content });\n    return res.json();\n  },\n};\n","size_bytes":3606},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { supabase } from \"./supabase\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Get auth token from Supabase\n  const { data: { session } } = await supabase.auth.getSession();\n  \n  const headers: Record<string, string> = {};\n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  if (session?.access_token) {\n    headers[\"Authorization\"] = `Bearer ${session.access_token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Get auth token from Supabase\n    const { data: { session } } = await supabase.auth.getSession();\n    \n    const headers: Record<string, string> = {};\n    if (session?.access_token) {\n      headers[\"Authorization\"] = `Bearer ${session.access_token}`;\n    }\n\n    const res = await fetch(queryKey[0] as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1960},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://placeholder.supabase.co'\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'placeholder-key'\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)","size_bytes":296},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/artifacts.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { \n  Code, Calculator, FileText, MessageSquare, BarChart3, \n  GitBranch, Filter, Search, Plus, Edit, Trash2, Eye\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { ArtifactViewer } from \"@/components/artifact-viewer\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Artifact } from \"@shared/schema\";\nimport snappyLearnLogo from \"@assets/Transparent Snappy Logo_1751027278079.png\";\n\n\n\nconst artifactTypes = [\n  { value: \"code_playground\", label: \"Code Playground\", icon: Code, color: \"bg-blue-500\" },\n  { value: \"math_visualizer\", label: \"Math Visualizer\", icon: Calculator, color: \"bg-green-500\" },\n  { value: \"document_generator\", label: \"Document Generator\", icon: FileText, color: \"bg-purple-500\" },\n  { value: \"quiz_builder\", label: \"Quiz Builder\", icon: MessageSquare, color: \"bg-orange-500\" },\n  { value: \"presentation_maker\", label: \"Presentation Maker\", icon: BarChart3, color: \"bg-red-500\" },\n  { value: \"data_visualizer\", label: \"Data Visualizer\", icon: BarChart3, color: \"bg-cyan-500\" },\n  { value: \"mind_map_creator\", label: \"Mind Map Creator\", icon: GitBranch, color: \"bg-pink-500\" },\n  { value: \"interactive\", label: \"Interactive Tool\", icon: Code, color: \"bg-indigo-500\" },\n];\n\n// Sample artifacts data - moved outside the component to be accessible by both functions\nconst sampleArtifacts = {\n  'code_playground': {\n    html: `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Code Playground</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body class=\"p-6 bg-gray-50\">\n    <div class=\"max-w-6xl mx-auto\">\n        <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Code Playground</h1>\n        <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div class=\"bg-white rounded-lg p-6 shadow-lg\">\n                <h2 class=\"text-xl font-semibold mb-4\">HTML</h2>\n                <textarea id=\"html\" class=\"w-full h-32 p-3 border rounded-lg font-mono text-sm\" placeholder=\"Enter HTML...\"><div class=\"p-4 bg-blue-100 rounded-lg\">\n  <h2 class=\"text-xl font-bold text-blue-800\">Hello World!</h2>\n  <p class=\"text-blue-600\">This is a sample HTML content.</p>\n  <button id=\"clickMe\" class=\"mt-2 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">Click Me!</button>\n</div></textarea>\n                \n                <h2 class=\"text-xl font-semibold mb-4 mt-6\">CSS</h2>\n                <textarea id=\"css\" class=\"w-full h-32 p-3 border rounded-lg font-mono text-sm\" placeholder=\"Enter CSS...\">body { font-family: Arial, sans-serif; }\n.highlight { background-color: #fef3c7; padding: 8px; border-radius: 4px; }\n.animate-bounce { animation: bounce 1s infinite; }\n@keyframes bounce { 0%, 100% { transform: translateY(0); } 50% { transform: translateY(-10px); } }</textarea>\n                \n                <h2 class=\"text-xl font-semibold mb-4 mt-6\">JavaScript</h2>\n                <textarea id=\"js\" class=\"w-full h-32 p-3 border rounded-lg font-mono text-sm\" placeholder=\"Enter JavaScript...\">document.addEventListener('DOMContentLoaded', function() {\n  const button = document.getElementById('clickMe');\n  let clicks = 0;\n  \n  button.addEventListener('click', function() {\n    clicks++;\n    button.textContent = \\`Clicked \\${clicks} times!\\`;\n    button.classList.add('animate-bounce');\n    setTimeout(() => button.classList.remove('animate-bounce'), 1000);\n  });\n});</textarea>\n                \n                <button onclick=\"runCode()\" class=\"mt-4 bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600\">Run Code</button>\n            </div>\n            \n            <div class=\"bg-white rounded-lg p-6 shadow-lg\">\n                <h2 class=\"text-xl font-semibold mb-4\">Output</h2>\n                <div id=\"output\" class=\"w-full h-96 border rounded-lg bg-gray-50\"></div>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        function runCode() {\n            const html = document.getElementById('html').value;\n            const css = document.getElementById('css').value;\n            const js = document.getElementById('js').value;\n            \n            const output = document.getElementById('output');\n            const fullCode = \\`\n                <style>\\${css}</style>\n                \\${html}\n                <script>\\${js}<\\/script>\n            \\`;\n            \n            output.innerHTML = '';\n            const iframe = document.createElement('iframe');\n            iframe.style.width = '100%';\n            iframe.style.height = '100%';\n            iframe.style.border = 'none';\n            output.appendChild(iframe);\n            \n            iframe.contentDocument.write(fullCode);\n            iframe.contentDocument.close();\n        }\n        \n        // Run code on page load\n        runCode();\n    </script>\n</body>\n</html>`,\n    title: 'Code Playground'\n  },\n  'math_visualizer': {\n    html: `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Math Visualizer</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n</head>\n<body class=\"p-6 bg-gray-50\">\n    <div class=\"max-w-4xl mx-auto\">\n        <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Math Visualizer</h1>\n        <div class=\"bg-white rounded-lg p-6 shadow-lg\">\n            <div class=\"mb-4\">\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">Enter Function (e.g., x^2, sin(x), etc.)</label>\n                <input type=\"text\" id=\"functionInput\" class=\"w-full p-3 border rounded-lg\" placeholder=\"x^2\" value=\"x^2\">\n                <button onclick=\"plotFunction()\" class=\"mt-2 bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600\">Plot Function</button>\n            </div>\n            <div id=\"plot\" class=\"w-full h-96 border rounded-lg\"></div>\n        </div>\n    </div>\n    \n    <script>\n        function plotFunction() {\n            const funcStr = document.getElementById('functionInput').value;\n            const x = [];\n            const y = [];\n            \n            try {\n                for (let i = -10; i <= 10; i += 0.1) {\n                    x.push(i);\n                    let result = eval(funcStr.replace(/x/g, i).replace(/sin/g, 'Math.sin').replace(/cos/g, 'Math.cos').replace(/tan/g, 'Math.tan').replace(/\\\\^/g, '**'));\n                    y.push(result);\n                }\n                \n                const trace = {\n                    x: x,\n                    y: y,\n                    type: 'scatter',\n                    mode: 'lines',\n                    name: funcStr\n                };\n                \n                const layout = {\n                    title: \\`Graph of \\${funcStr}\\`,\n                    xaxis: { title: 'x' },\n                    yaxis: { title: 'y' },\n                    grid: true\n                };\n                \n                Plotly.newPlot('plot', [trace], layout);\n            } catch (error) {\n                alert('Invalid function. Please check your input.');\n            }\n        }\n        \n        plotFunction();\n    </script>\n</body>\n</html>`,\n    title: 'Math Visualizer'\n  },\n  'quiz_builder': {\n    html: `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Quiz Builder</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body class=\"p-6 bg-gray-50\">\n    <div class=\"max-w-2xl mx-auto\">\n        <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Interactive Quiz</h1>\n        <div id=\"quizContainer\" class=\"bg-white rounded-lg p-6 shadow-lg\">\n            <div id=\"questionContainer\"></div>\n            <div id=\"optionsContainer\" class=\"mt-4\"></div>\n            <div id=\"resultContainer\" class=\"mt-4 hidden\"></div>\n            <button id=\"nextBtn\" onclick=\"nextQuestion()\" class=\"mt-4 bg-orange-500 text-white py-2 px-4 rounded-lg hover:bg-orange-600 hidden\">Next Question</button>\n        </div>\n        <div id=\"scoreContainer\" class=\"mt-6 bg-white rounded-lg p-6 shadow-lg hidden\">\n            <h2 class=\"text-xl font-semibold mb-2\">Quiz Complete!</h2>\n            <p id=\"finalScore\" class=\"text-lg\"></p>\n            <button onclick=\"restartQuiz()\" class=\"mt-4 bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600\">Restart Quiz</button>\n        </div>\n    </div>\n    \n    <script>\n        const quizData = [\n            {\n                question: \"What is the capital of France?\",\n                options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"],\n                correct: 2\n            },\n            {\n                question: \"Which planet is closest to the Sun?\",\n                options: [\"Venus\", \"Mercury\", \"Earth\", \"Mars\"],\n                correct: 1\n            },\n            {\n                question: \"What is 2 + 2?\",\n                options: [\"3\", \"4\", \"5\", \"6\"],\n                correct: 1\n            }\n        ];\n        \n        let currentQuestion = 0;\n        let score = 0;\n        let selectedAnswer = null;\n        \n        function loadQuestion() {\n            const question = quizData[currentQuestion];\n            document.getElementById('questionContainer').innerHTML = \\`\n                <h2 class=\"text-xl font-semibold mb-4\">Question \\${currentQuestion + 1} of \\${quizData.length}</h2>\n                <p class=\"text-lg mb-4\">\\${question.question}</p>\n            \\`;\n            \n            const optionsHtml = question.options.map((option, index) => \\`\n                <div class=\"mb-2\">\n                    <button onclick=\"selectAnswer(\\${index})\" class=\"w-full text-left p-3 border rounded-lg hover:bg-gray-50 transition-colors\" id=\"option\\${index}\">\n                        \\${option}\n                    </button>\n                </div>\n            \\`).join('');\n            \n            document.getElementById('optionsContainer').innerHTML = optionsHtml;\n            document.getElementById('resultContainer').classList.add('hidden');\n            document.getElementById('nextBtn').classList.add('hidden');\n            selectedAnswer = null;\n        }\n        \n        function selectAnswer(index) {\n            selectedAnswer = index;\n            const question = quizData[currentQuestion];\n            const isCorrect = index === question.correct;\n            \n            for (let i = 0; i < question.options.length; i++) {\n                const option = document.getElementById(\\`option\\${i}\\`);\n                option.classList.remove('bg-green-200', 'bg-red-200');\n                if (i === question.correct) {\n                    option.classList.add('bg-green-200');\n                } else if (i === index && !isCorrect) {\n                    option.classList.add('bg-red-200');\n                }\n                option.disabled = true;\n            }\n            \n            if (isCorrect) {\n                score++;\n                document.getElementById('resultContainer').innerHTML = '<p class=\"text-green-600 font-semibold\">Correct!</p>';\n            } else {\n                document.getElementById('resultContainer').innerHTML = '<p class=\"text-red-600 font-semibold\">Incorrect!</p>';\n            }\n            \n            document.getElementById('resultContainer').classList.remove('hidden');\n            document.getElementById('nextBtn').classList.remove('hidden');\n        }\n        \n        function nextQuestion() {\n            currentQuestion++;\n            if (currentQuestion < quizData.length) {\n                loadQuestion();\n            } else {\n                showResults();\n            }\n        }\n        \n        function showResults() {\n            document.getElementById('quizContainer').classList.add('hidden');\n            document.getElementById('scoreContainer').classList.remove('hidden');\n            document.getElementById('finalScore').textContent = \\`You scored \\${score} out of \\${quizData.length}!\\`;\n        }\n        \n        function restartQuiz() {\n            currentQuestion = 0;\n            score = 0;\n            document.getElementById('quizContainer').classList.remove('hidden');\n            document.getElementById('scoreContainer').classList.add('hidden');\n            loadQuestion();\n        }\n        \n        loadQuestion();\n    </script>\n</body>\n</html>`,\n    title: 'Interactive Quiz'\n  }\n};\n\nexport default function ArtifactsPage() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [selectedArtifact, setSelectedArtifact] = useState<{html: string, title: string} | null>(null);\n  const [showArtifactViewer, setShowArtifactViewer] = useState(false);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"inspiration\");\n  \n  const queryClient = useQueryClient();\n\n  // Fetch artifacts\n  const { data: artifacts = [], isLoading } = useQuery({\n    queryKey: [\"/api/artifacts\", filterType !== \"all\" ? filterType : undefined],\n    queryFn: () => apiRequest(`/api/artifacts${filterType !== \"all\" ? `?type=${filterType}` : \"\"}`)\n  });\n\n  // Delete artifact mutation\n  const deleteArtifact = useMutation({\n    mutationFn: (id: number) => apiRequest(`/api/artifacts/${id}`, { method: \"DELETE\" }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/artifacts\"] });\n    }\n  });\n\n  // Filter artifacts based on search term\n  const filteredArtifacts = artifacts.filter((artifact: Artifact) =>\n    artifact.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    artifact.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleViewArtifact = (artifact: Artifact) => {\n    setSelectedArtifact({ \n      html: artifact.content, \n      title: artifact.title \n    });\n    setShowArtifactViewer(true);\n  };\n\n  const handleDeleteArtifact = (id: number) => {\n    if (confirm(\"Are you sure you want to delete this artifact?\")) {\n      deleteArtifact.mutate(id);\n    }\n  };\n\n  const handleViewSampleArtifact = (type: string) => {\n    const artifact = sampleArtifacts[type];\n    if (artifact) {\n      setSelectedArtifact(artifact);\n      setShowArtifactViewer(true);\n    }\n  };\n\n  const getTypeInfo = (type: string) => {\n    return artifactTypes.find(t => t.value === type) || artifactTypes[0];\n  };\n\n  const renderArtifactCard = (artifact: Artifact) => {\n    const typeInfo = getTypeInfo(artifact.type);\n    const IconComponent = typeInfo.icon;\n\n    return (\n      <Card key={artifact.id} className=\"hover:shadow-lg transition-shadow\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className={`p-2 rounded-lg ${typeInfo.color} text-white`}>\n                <IconComponent className=\"w-5 h-5\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-lg\">{artifact.title}</CardTitle>\n                <CardDescription>{artifact.description}</CardDescription>\n              </div>\n            </div>\n            <Badge variant=\"secondary\">{typeInfo.label}</Badge>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-gray-500\">\n              Created {new Date(artifact.createdAt).toLocaleDateString()}\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => handleViewArtifact(artifact)}\n              >\n                <Eye className=\"w-4 h-4 mr-1\" />\n                View\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => handleDeleteArtifact(artifact.id)}\n                className=\"text-red-600 hover:text-red-800\"\n              >\n                <Trash2 className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-8 h-8\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Artifacts</h1>\n                <p className=\"text-sm text-gray-600\">Interactive educational tools and content</p>\n              </div>\n            </div>\n            <Button \n              onClick={() => setActiveTab(\"create\")}\n              className=\"bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Artifact\n            </Button>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"mb-6 flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Artifacts</h1>\n              <p className=\"text-gray-600\">Create and manage your interactive educational tools</p>\n            </div>\n            <Button \n              onClick={() => setActiveTab(\"create\")}\n              className=\"bg-gray-900 hover:bg-gray-800 text-white\"\n            >\n              + New artifact\n            </Button>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-3 max-w-md\">\n              <TabsTrigger value=\"inspiration\">Inspiration</TabsTrigger>\n              <TabsTrigger value=\"browse\">My artifacts</TabsTrigger>\n              <TabsTrigger value=\"create\">Create</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"inspiration\" className=\"mt-6\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Get inspired with these sample artifacts</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {/* Sample Artifacts */}\n                  <Card className=\"hover:shadow-lg transition-shadow cursor-pointer group\" onClick={() => handleViewSampleArtifact('code_playground')}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"p-3 rounded-lg bg-blue-500 text-white group-hover:scale-110 transition-transform\">\n                          <Code className=\"w-6 h-6\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">Code Playground</CardTitle>\n                          <CardDescription>Interactive coding environment</CardDescription>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-600 mb-3\">\n                        Create and run code snippets in a live environment with syntax highlighting.\n                      </p>\n                      <Button \n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setActiveTab(\"create\");\n                        }}\n                        className=\"w-full bg-blue-500 hover:bg-blue-600\"\n                      >\n                        Create Code Playground\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"hover:shadow-lg transition-shadow cursor-pointer group\" onClick={() => handleViewSampleArtifact('math_visualizer')}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"p-3 rounded-lg bg-green-500 text-white group-hover:scale-110 transition-transform\">\n                          <Calculator className=\"w-6 h-6\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">Math Visualizer</CardTitle>\n                          <CardDescription>Mathematical calculations & graphs</CardDescription>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-600 mb-3\">\n                        Visualize mathematical functions and equations with interactive graphs.\n                      </p>\n                      <Button \n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setActiveTab(\"create\");\n                        }}\n                        className=\"w-full bg-green-500 hover:bg-green-600\"\n                      >\n                        Create Math Visualizer\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"hover:shadow-lg transition-shadow cursor-pointer group\" onClick={() => handleViewSampleArtifact('quiz_builder')}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"p-3 rounded-lg bg-orange-500 text-white group-hover:scale-110 transition-transform\">\n                          <MessageSquare className=\"w-6 h-6\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">Quiz Builder</CardTitle>\n                          <CardDescription>Create interactive quizzes</CardDescription>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-600 mb-3\">\n                        Build engaging quizzes with multiple question types and instant feedback.\n                      </p>\n                      <Button \n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setActiveTab(\"create\");\n                        }}\n                        className=\"w-full bg-orange-500 hover:bg-orange-600\"\n                      >\n                        Create Quiz Builder\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"browse\" className=\"mt-6\">\n              {/* Search and Filter */}\n              <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search artifacts...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n                <Select value={filterType} onValueChange={setFilterType}>\n                  <SelectTrigger className=\"w-full md:w-48\">\n                    <SelectValue placeholder=\"Filter by type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    {artifactTypes.map(type => (\n                      <SelectItem key={type.value} value={type.value}>\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Artifacts Grid */}\n              {isLoading ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {[...Array(6)].map((_, i) => (\n                    <Card key={i} className=\"animate-pulse\">\n                      <CardHeader>\n                        <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2 mt-2\"></div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : filteredArtifacts.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <Code className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No artifacts found</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    {searchTerm || filterType !== \"all\" \n                      ? \"Try adjusting your search or filter criteria\"\n                      : \"Start by creating your first artifact or chatting with AI to generate interactive content\"\n                    }\n                  </p>\n                  <Button \n                    onClick={() => setActiveTab(\"create\")}\n                    className=\"bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Your First Artifact\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {filteredArtifacts.map(renderArtifactCard)}\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"create\" className=\"mt-6\">\n              <ArtifactCreationTools />\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Artifact Viewer Modal */}\n      {showArtifactViewer && selectedArtifact && (\n        <ArtifactViewer \n          artifact={selectedArtifact}\n          onClose={() => {\n            setShowArtifactViewer(false);\n            setSelectedArtifact(null);\n          }}\n          isOpen={showArtifactViewer}\n        />\n      )}\n    </div>\n  );\n}\n\n// Artifact Creation Tools Component\nfunction ArtifactCreationTools() {\n  const [, setLocation] = useLocation();\n\n  const tools = [\n    {\n      type: \"code_playground\",\n      title: \"Code Playground\",\n      description: \"Interactive code editor with syntax highlighting\",\n      icon: Code,\n      color: \"bg-blue-500\",\n      template: `<!-- Artifact Title: Interactive Code Playground -->\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Code Playground</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/prism.min.js\"></script>\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"p-6 bg-gray-50\">\n    <div class=\"max-w-4xl mx-auto\">\n        <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Code Playground</h1>\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">HTML</label>\n                <textarea id=\"htmlCode\" class=\"w-full h-40 p-3 border rounded-lg font-mono text-sm\" placeholder=\"Enter HTML code...\"></textarea>\n            </div>\n            <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">CSS</label>\n                <textarea id=\"cssCode\" class=\"w-full h-40 p-3 border rounded-lg font-mono text-sm\" placeholder=\"Enter CSS code...\"></textarea>\n            </div>\n            <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">JavaScript</label>\n                <textarea id=\"jsCode\" class=\"w-full h-40 p-3 border rounded-lg font-mono text-sm\" placeholder=\"Enter JavaScript code...\"></textarea>\n            </div>\n            <div>\n                <button onclick=\"runCode()\" class=\"w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 mb-4\">Run Code</button>\n                <div id=\"output\" class=\"w-full h-40 border rounded-lg bg-white\"></div>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        function runCode() {\n            const html = document.getElementById('htmlCode').value;\n            const css = document.getElementById('cssCode').value;\n            const js = document.getElementById('jsCode').value;\n            \n            const output = document.getElementById('output');\n            const fullCode = \\`\n                <style>\\${css}</style>\n                \\${html}\n                <script>\\${js}<\\/script>\n            \\`;\n            \n            output.innerHTML = '';\n            const iframe = document.createElement('iframe');\n            iframe.style.width = '100%';\n            iframe.style.height = '100%';\n            iframe.style.border = 'none';\n            output.appendChild(iframe);\n            \n            iframe.contentDocument.write(fullCode);\n            iframe.contentDocument.close();\n        }\n    </script>\n</body>\n</html>`\n    },\n    {\n      type: \"math_visualizer\",\n      title: \"Math Visualizer\",\n      description: \"Interactive graphing calculator and equation solver\",\n      icon: Calculator,\n      color: \"bg-green-500\",\n      template: `<!-- Artifact Title: Math Visualizer -->\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Math Visualizer</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n</head>\n<body class=\"p-6 bg-gray-50\">\n    <div class=\"max-w-4xl mx-auto\">\n        <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Math Visualizer</h1>\n        <div class=\"bg-white rounded-lg p-6 shadow-lg\">\n            <div class=\"mb-4\">\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">Enter Function (e.g., x^2, sin(x), etc.)</label>\n                <input type=\"text\" id=\"functionInput\" class=\"w-full p-3 border rounded-lg\" placeholder=\"x^2\" value=\"x^2\">\n                <button onclick=\"plotFunction()\" class=\"mt-2 bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600\">Plot Function</button>\n            </div>\n            <div id=\"plot\" class=\"w-full h-96 border rounded-lg\"></div>\n        </div>\n    </div>\n    \n    <script>\n        function plotFunction() {\n            const funcStr = document.getElementById('functionInput').value;\n            const x = [];\n            const y = [];\n            \n            try {\n                for (let i = -10; i <= 10; i += 0.1) {\n                    x.push(i);\n                    // Simple function evaluation (replace with proper math parser for production)\n                    let result = eval(funcStr.replace(/x/g, i).replace(/sin/g, 'Math.sin').replace(/cos/g, 'Math.cos').replace(/tan/g, 'Math.tan').replace(/\\\\^/g, '**'));\n                    y.push(result);\n                }\n                \n                const trace = {\n                    x: x,\n                    y: y,\n                    type: 'scatter',\n                    mode: 'lines',\n                    name: funcStr\n                };\n                \n                const layout = {\n                    title: \\`Graph of \\${funcStr}\\`,\n                    xaxis: { title: 'x' },\n                    yaxis: { title: 'y' },\n                    grid: true\n                };\n                \n                Plotly.newPlot('plot', [trace], layout);\n            } catch (error) {\n                alert('Invalid function. Please check your input.');\n            }\n        }\n        \n        // Plot default function on load\n        plotFunction();\n    </script>\n</body>\n</html>`\n    },\n    {\n      type: \"quiz_builder\",\n      title: \"Quiz Builder\",\n      description: \"Create interactive quizzes and flashcards\",\n      icon: MessageSquare,\n      color: \"bg-orange-500\",\n      template: `<!-- Artifact Title: Interactive Quiz Builder -->\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Quiz Builder</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body class=\"p-6 bg-gray-50\">\n    <div class=\"max-w-2xl mx-auto\">\n        <h1 class=\"text-3xl font-bold mb-6 text-gray-800\">Interactive Quiz</h1>\n        <div id=\"quizContainer\" class=\"bg-white rounded-lg p-6 shadow-lg\">\n            <div id=\"questionContainer\"></div>\n            <div id=\"optionsContainer\" class=\"mt-4\"></div>\n            <div id=\"resultContainer\" class=\"mt-4 hidden\"></div>\n            <button id=\"nextBtn\" onclick=\"nextQuestion()\" class=\"mt-4 bg-orange-500 text-white py-2 px-4 rounded-lg hover:bg-orange-600 hidden\">Next Question</button>\n        </div>\n    </div>\n    \n    <script>\n        const quizData = [\n            {\n                question: \"What is the capital of France?\",\n                options: [\"London\", \"Berlin\", \"Paris\", \"Madrid\"],\n                correct: 2\n            },\n            {\n                question: \"Which planet is closest to the Sun?\",\n                options: [\"Venus\", \"Mercury\", \"Earth\", \"Mars\"],\n                correct: 1\n            },\n            {\n                question: \"What is 2 + 2?\",\n                options: [\"3\", \"4\", \"5\", \"6\"],\n                correct: 1\n            }\n        ];\n        \n        let currentQuestion = 0;\n        let score = 0;\n        \n        function loadQuestion() {\n            const question = quizData[currentQuestion];\n            document.getElementById('questionContainer').innerHTML = \\`\n                <h2 class=\"text-xl font-semibold mb-4\">Question \\${currentQuestion + 1} of \\${quizData.length}</h2>\n                <p class=\"text-lg mb-4\">\\${question.question}</p>\n            \\`;\n            \n            const optionsHtml = question.options.map((option, index) => \\`\n                <button onclick=\"selectAnswer(\\${index})\" class=\"block w-full p-3 mb-2 border rounded-lg hover:bg-gray-50 text-left\">\n                    \\${option}\n                </button>\n            \\`).join('');\n            \n            document.getElementById('optionsContainer').innerHTML = optionsHtml;\n            document.getElementById('resultContainer').classList.add('hidden');\n            document.getElementById('nextBtn').classList.add('hidden');\n        }\n        \n        function selectAnswer(selected) {\n            const question = quizData[currentQuestion];\n            const options = document.getElementById('optionsContainer').children;\n            \n            for (let i = 0; i < options.length; i++) {\n                options[i].disabled = true;\n                if (i === question.correct) {\n                    options[i].classList.add('bg-green-200');\n                } else if (i === selected && selected !== question.correct) {\n                    options[i].classList.add('bg-red-200');\n                }\n            }\n            \n            if (selected === question.correct) {\n                score++;\n                document.getElementById('resultContainer').innerHTML = '<p class=\"text-green-600 font-semibold\">Correct!</p>';\n            } else {\n                document.getElementById('resultContainer').innerHTML = '<p class=\"text-red-600 font-semibold\">Incorrect!</p>';\n            }\n            \n            document.getElementById('resultContainer').classList.remove('hidden');\n            \n            if (currentQuestion < quizData.length - 1) {\n                document.getElementById('nextBtn').classList.remove('hidden');\n            } else {\n                document.getElementById('nextBtn').innerHTML = 'Show Results';\n                document.getElementById('nextBtn').classList.remove('hidden');\n            }\n        }\n        \n        function nextQuestion() {\n            currentQuestion++;\n            \n            if (currentQuestion < quizData.length) {\n                loadQuestion();\n            } else {\n                showResults();\n            }\n        }\n        \n        function showResults() {\n            document.getElementById('quizContainer').innerHTML = \\`\n                <h2 class=\"text-2xl font-bold mb-4\">Quiz Complete!</h2>\n                <p class=\"text-lg mb-4\">Your score: \\${score} out of \\${quizData.length}</p>\n                <p class=\"text-lg mb-4\">Percentage: \\${Math.round((score / quizData.length) * 100)}%</p>\n                <button onclick=\"location.reload()\" class=\"bg-orange-500 text-white py-2 px-4 rounded-lg hover:bg-orange-600\">Take Quiz Again</button>\n            \\`;\n        }\n        \n        // Load first question\n        loadQuestion();\n    </script>\n</body>\n</html>`\n    }\n  ];\n\n  const handleToolClick = (tool: any) => {\n    // Open the sample artifact in the viewer instead of navigating to a new chat\n    const sampleArtifact = sampleArtifacts[tool.type];\n    if (sampleArtifact) {\n      setSelectedArtifact(sampleArtifact);\n      setShowArtifactViewer(true);\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {tools.map((tool) => {\n        const IconComponent = tool.icon;\n        return (\n          <Card key={tool.type} className=\"hover:shadow-lg transition-shadow cursor-pointer group\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`p-3 rounded-lg ${tool.color} text-white group-hover:scale-110 transition-transform`}>\n                  <IconComponent className=\"w-6 h-6\" />\n                </div>\n                <div>\n                  <CardTitle className=\"text-lg\">{tool.title}</CardTitle>\n                  <CardDescription>{tool.description}</CardDescription>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <Button \n                onClick={() => handleToolClick(tool)}\n                className=\"w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create {tool.title}\n              </Button>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n\n\n\nfunction getArtifactTypeInfo(type: string) {\n  const typeInfo = artifactTypes.find(t => t.value === type);\n  return typeInfo || { icon: Code, color: \"bg-gray-500\" };\n}","size_bytes":39576},"client/src/pages/collection-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { File, Plus, MessageSquare, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AddDocumentDropdown } from \"@/components/add-document-dropdown\";\nimport { ChatInput } from \"@/components/chat-input\";\nimport { ConversationCard } from \"@/components/conversation-card\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { useCollection } from \"@/hooks/use-collections\";\nimport { useCreateConversation, useConversations } from \"@/hooks/use-conversations\";\nimport { documentsApi } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ConversationWithPreview } from \"@shared/schema\";\n\nexport default function CollectionDetail() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [selectedCollectionId, setSelectedCollectionId] = useState<number | undefined>();\n\n  const collectionId = parseInt(params.id!);\n  \n  const { data: collection } = useCollection(collectionId);\n  const { data: documents = [] } = useQuery({\n    queryKey: [\"/api/collections\", collectionId, \"documents\"],\n    queryFn: () => documentsApi.getByCollection(collectionId),\n    enabled: !!collectionId,\n  });\n  \n  const { data: conversations = [] } = useConversations();\n  const createConversation = useCreateConversation();\n\n  // Filter conversations to only show those belonging to this specific collection\n  const collectionConversations = conversations.filter(\n    (conv) => conv.collectionId === collectionId\n  );\n\n  const handleSendMessage = async (message: string) => {\n    createConversation.mutate(\n      {\n        message,\n        type: \"collection\",\n        collectionId,\n      },\n      {\n        onSuccess: (data) => {\n          setLocation(`/conversations/${data.conversation.id}`);\n        },\n      }\n    );\n  };\n\n  const handleDeleteDocument = async (docId: number) => {\n    if (confirm(\"Are you sure you want to delete this document?\")) {\n      try {\n        await documentsApi.delete(docId);\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/collections\", collectionId, \"documents\"] \n        });\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/collections\"] \n        });\n        toast({\n          title: \"Success\",\n          description: \"Document deleted successfully\",\n        });\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete document\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleNewChat = () => {\n    setSelectedCollectionId(undefined);\n    setLocation(\"/\");\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  if (!collection) {\n    return (\n      <div className=\"flex h-screen overflow-hidden\">\n        <Sidebar \n          selectedCollectionId={selectedCollectionId}\n          onSelectCollection={setSelectedCollectionId}\n          onNewChat={handleNewChat}\n        />\n        <main className=\"flex-1 flex items-center justify-center bg-gray-50\">\n          <div className=\"text-center\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Collection not found</h2>\n            <Button onClick={() => setLocation(\"/collections\")} variant=\"outline\">\n              Back to Collections\n            </Button>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar \n        selectedCollectionId={selectedCollectionId}\n        onSelectCollection={setSelectedCollectionId}\n        onNewChat={handleNewChat}\n      />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden bg-white\">\n        {/* Header */}\n        <header className=\"border-b border-gray-200 px-6 py-4 flex-shrink-0\">\n          <div className=\"mb-4\">\n            <h1 className=\"text-xl font-semibold text-gray-900\">{collection.name}</h1>\n            {collection.description && (\n              <p className=\"text-sm text-gray-600\">{collection.description}</p>\n            )}\n          </div>\n\n          {/* Chat Input */}\n          <div className=\"mb-4\">\n            <ChatInput\n              onSend={handleSendMessage}\n              disabled={createConversation.isPending}\n              placeholder={`Start a conversation in this workspace`}\n            />\n          </div>\n\n          {/* Tabs */}\n          <Tabs defaultValue=\"conversations\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 bg-gray-100\">\n              <TabsTrigger value=\"conversations\" className=\"data-[state=active]:bg-white\">\n                Conversations\n              </TabsTrigger>\n              <TabsTrigger value=\"documents\" className=\"data-[state=active]:bg-white\">\n                Documents\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"conversations\" className=\"mt-6 space-y-0\">\n              {collectionConversations.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {collectionConversations.map((conversation) => (\n                    <ConversationCard key={conversation.id} conversation={conversation} />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-16\">\n                  <div className=\"w-16 h-16 rounded-full bg-gray-100 flex items-center justify-center mx-auto mb-4\">\n                    <MessageSquare className=\"w-8 h-8 text-gray-400\" />\n                  </div>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Welcome</h3>\n                  <p className=\"text-sm text-gray-500 max-w-md mx-auto\">\n                    Start by attaching files to your workspace. They will be used in all chats in this workspace.\n                  </p>\n                </div>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"documents\" className=\"mt-6 space-y-0\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Documents</h3>\n                <AddDocumentDropdown \n                  collectionId={collectionId} \n                  onComplete={() => {}}\n                />\n              </div>\n\n              {documents.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {documents.map((document) => (\n                    <div\n                      key={document.id}\n                      className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <File className=\"w-5 h-5 text-gray-500\" />\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">\n                            {document.name}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            {formatFileSize(document.size)} â€¢ {new Date(document.uploadedAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                      <Button\n                        onClick={() => handleDeleteDocument(document.id)}\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-16\">\n                  <div className=\"w-16 h-16 rounded-full bg-gray-100 flex items-center justify-center mx-auto mb-4\">\n                    <File className=\"w-8 h-8 text-gray-400\" />\n                  </div>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Welcome</h3>\n                  <p className=\"text-sm text-gray-500 max-w-md mx-auto\">\n                    Start by attaching files to your workspace. They will be used in all chats in this workspace.\n                  </p>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </header>\n\n        {/* Main Content Area - Empty for now, similar to the reference image */}\n        <div className=\"flex-1 overflow-auto\">\n          {/* This area remains clean like in the reference image */}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":9101},"client/src/pages/collections.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Plus, Search, Grid3X3, List, File, Folder } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { CollectionCard } from \"@/components/collection-card\";\nimport { CreateCollectionModal } from \"@/components/create-collection-modal\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { useCollections } from \"@/hooks/use-collections\";\nimport { useCreateConversation } from \"@/hooks/use-conversations\";\n\nexport default function Collections() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"recent\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [selectedCollectionId, setSelectedCollectionId] = useState<number | undefined>();\n  const { data: collections = [] } = useCollections();\n  const createConversation = useCreateConversation();\n\n  // Filter and sort collections\n  const filteredCollections = collections\n    .filter(collection =>\n      collection.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (collection.description?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false)\n    )\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"name\":\n          return a.name.localeCompare(b.name);\n        case \"documents\":\n          return b.documentCount - a.documentCount;\n        case \"recent\":\n        default:\n          return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n      }\n    });\n\n  const handleStartChat = (collectionId: number) => {\n    createConversation.mutate(\n      {\n        message: \"Hello! I'd like to explore this collection.\",\n        type: \"collection\",\n        collectionId,\n      },\n      {\n        onSuccess: (data) => {\n          setLocation(`/conversations/${data.conversation.id}`);\n        },\n      }\n    );\n  };\n\n  const handleNewChat = () => {\n    setSelectedCollectionId(undefined);\n    setLocation(\"/\");\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar \n        selectedCollectionId={selectedCollectionId}\n        onSelectCollection={setSelectedCollectionId}\n        onNewChat={handleNewChat}\n      />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden bg-gray-50\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-gray-200 px-6 py-4 flex-shrink-0\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-xl font-semibold text-gray-900\">Collections</h1>\n              <p className=\"text-sm text-gray-600\">Organize your knowledge into collections</p>\n            </div>\n            <Button\n              onClick={() => setShowCreateModal(true)}\n              className=\"bg-primary hover:bg-primary/90 text-white\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Collection\n            </Button>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <div className=\"flex-1 overflow-auto px-6 py-6\">\n          {/* Search and Filters */}\n          <div className=\"mb-6 flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative max-w-md\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search collections...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-80\"\n                />\n              </div>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"recent\">Recently Updated</SelectItem>\n                  <SelectItem value=\"name\">Name (A-Z)</SelectItem>\n                  <SelectItem value=\"documents\">Most Documents</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* View Toggle */}\n            <div className=\"flex items-center space-x-2 bg-gray-100 rounded-lg p-1\">\n              <Button\n                variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"grid\")}\n                className={`${\n                  viewMode === \"grid\" \n                    ? \"bg-white shadow-sm\" \n                    : \"text-gray-600 hover:text-gray-900\"\n                }`}\n              >\n                <Grid3X3 className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n                className={`${\n                  viewMode === \"list\" \n                    ? \"bg-white shadow-sm\" \n                    : \"text-gray-600 hover:text-gray-900\"\n                }`}\n              >\n                <List className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Collections Display */}\n          {filteredCollections.length > 0 ? (\n            viewMode === \"grid\" ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredCollections.map((collection) => (\n                  <CollectionCard\n                    key={collection.id}\n                    collection={collection}\n                    onStartChat={handleStartChat}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredCollections.map((collection) => (\n                  <Card key={collection.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-12 h-12 rounded-lg bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center\">\n                            <Folder className=\"w-6 h-6 text-white\" />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"text-lg font-semibold text-gray-900 truncate\">\n                              {collection.name}\n                            </h3>\n                            <p className=\"text-sm text-gray-600 line-clamp-2\">\n                              {collection.description || \"No description provided\"}\n                            </p>\n                            <div className=\"flex items-center space-x-4 mt-2 text-xs text-gray-500\">\n                              <span className=\"flex items-center\">\n                                <File className=\"w-3 h-3 mr-1\" />\n                                {collection.documentCount} documents\n                              </span>\n                              <span>\n                                Updated {new Date(collection.updatedAt).toLocaleDateString()}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setLocation(`/collections/${collection.id}`)}\n                          >\n                            View\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleStartChat(collection.id)}\n                            disabled={createConversation.isPending}\n                            className=\"bg-primary hover:bg-primary/90 text-white\"\n                          >\n                            Chat\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Search className=\"w-12 h-12 text-gray-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {searchTerm ? \"No collections found\" : \"No collections yet\"}\n              </h3>\n              <p className=\"text-gray-600 mb-6\">\n                {searchTerm \n                  ? \"Try adjusting your search terms\" \n                  : \"Create your first collection to start organizing your knowledge\"\n                }\n              </p>\n              {!searchTerm && (\n                <Button\n                  onClick={() => setShowCreateModal(true)}\n                  className=\"bg-primary hover:bg-primary/90 text-white\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Collection\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n        \n        <CreateCollectionModal \n          open={showCreateModal} \n          onOpenChange={setShowCreateModal} \n        />\n      </main>\n    </div>\n  );\n}","size_bytes":9900},"client/src/pages/conversation.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { ArrowLeft, Share, Bookmark, MoreVertical, ChevronLeft, X, Code } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { ChatInput } from \"@/components/chat-input\";\nimport { MessageComponent } from \"@/components/message\";\nimport { ChatLoading } from \"@/components/chat-loading\";\nimport { ArtifactViewer } from \"@/components/artifact-viewer\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { useConversation } from \"@/hooks/use-conversations\";\nimport { useMessages, useSendMessage } from \"@/hooks/use-messages\";\nimport { useCollection } from \"@/hooks/use-collections\";\n\nexport default function Conversation() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const conversationId = parseInt(params.id!);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  \n  // Artifact state management\n  const [isArtifactOpen, setIsArtifactOpen] = useState(false);\n  const [currentArtifact, setCurrentArtifact] = useState<{html: string, title: string} | null>(null);\n  const [showArtifactToggle, setShowArtifactToggle] = useState(false);\n\n  const { data: conversation } = useConversation(conversationId);\n  const { data: messages = [] } = useMessages(conversationId);\n  const { data: collection } = useCollection(conversation?.collectionId || 0);\n  const sendMessage = useSendMessage();\n\n  const handleSendMessage = (content: string) => {\n    sendMessage.mutate({ conversationId, content });\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const handleViewArtifact = (artifactHtml: string, title: string) => {\n    setCurrentArtifact({ html: artifactHtml, title });\n    setShowArtifactToggle(true);\n    setIsArtifactOpen(true);\n  };\n\n  const openArtifact = () => {\n    if (currentArtifact) {\n      setIsArtifactOpen(true);\n    }\n  };\n\n  const closeArtifact = () => {\n    setIsArtifactOpen(false);\n    setCurrentArtifact(null);\n    setShowArtifactToggle(false);\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Check if any messages contain artifacts to show toggle\n  useEffect(() => {\n    const hasArtifacts = messages.some(message => \n      message.role === 'assistant' && message.content.includes('[ARTIFACT_START]')\n    );\n    if (hasArtifacts && !showArtifactToggle) {\n      setShowArtifactToggle(true);\n    }\n  }, [messages, showArtifactToggle]);\n\n  if (!conversation) {\n    return (\n      <div className=\"flex h-screen bg-white\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Conversation not found</h2>\n            <Button onClick={() => setLocation(\"/\")} variant=\"outline\">\n              Back to Dashboard\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const isCollectionBased = conversation.type === \"collection\";\n\n  return (\n    <div className=\"flex h-screen bg-white\">\n      <Sidebar />\n      <div className={`flex-1 flex flex-col ${isArtifactOpen ? 'md:mr-[50%]' : ''} transition-all duration-300`}>\n        {/* Header */}\n        <header className=\"border-b border-gray-200 px-6 py-4 flex-shrink-0\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => setLocation(\"/\")}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n              <div>\n                <h1 className=\"text-lg font-semibold text-gray-900\">{conversation.title}</h1>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <div className={`w-2 h-2 rounded-full ${\n                    isCollectionBased ? \"bg-blue-500\" : \"bg-gray-500\"\n                  }`} />\n                  <span className=\"text-sm text-gray-500\">\n                    {isCollectionBased && collection \n                      ? `Collection: ${collection.name}`\n                      : \"Independent Conversation\"\n                    }\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-gray-600\">\n                <Share className=\"w-4 h-4\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-gray-600\">\n                <Bookmark className=\"w-4 h-4\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-gray-600\">\n                <MoreVertical className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Messages Area */}\n        <ScrollArea className=\"flex-1 px-6 py-6\">\n          <div className=\"max-w-3xl mx-auto space-y-6\">\n            {messages.map((message) => (\n              <MessageComponent \n                key={message.id} \n                message={message} \n                onViewArtifact={handleViewArtifact}\n              />\n            ))}\n            {sendMessage.isPending && <ChatLoading />}\n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n\n        {/* Message Input */}\n        <div className=\"border-t border-gray-200 px-6 py-4 flex-shrink-0\">\n          <div className=\"max-w-3xl mx-auto\">\n            <ChatInput\n              onSend={handleSendMessage}\n              disabled={sendMessage.isPending}\n              placeholder=\"Continue the conversation...\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Artifact Toggle Button */}\n      {showArtifactToggle && !isArtifactOpen && (\n        <Button\n          onClick={openArtifact}\n          className=\"fixed right-4 top-1/2 transform -translate-y-1/2 bg-blue-500 text-white p-2 rounded-l-lg shadow-lg hover:bg-blue-600 z-40 transition-all duration-300 hover:transform hover:-translate-x-1\"\n          size=\"sm\"\n        >\n          <ChevronLeft className=\"w-4 h-4\" />\n        </Button>\n      )}\n\n      {/* Artifact Viewer */}\n      {currentArtifact && (\n        <ArtifactViewer\n          artifact={currentArtifact}\n          onClose={closeArtifact}\n          isOpen={isArtifactOpen}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":6640},"client/src/pages/conversations.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Plus, Search, Grid3X3, List, MessageSquare, Clock, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConversationCard } from \"@/components/conversation-card\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { useConversations } from \"@/hooks/use-conversations\";\nimport { useCollections } from \"@/hooks/use-collections\";\n\nexport default function Conversations() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"recent\");\n  const [filterBy, setFilterBy] = useState(\"all\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [selectedCollectionId, setSelectedCollectionId] = useState<number | undefined>();\n  \n  const { data: conversations = [] } = useConversations();\n  const { data: collections = [] } = useCollections();\n\n  // Filter and sort conversations\n  const filteredConversations = conversations\n    .filter(conversation => {\n      const matchesSearch = conversation.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           conversation.preview.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      if (filterBy === \"all\") return matchesSearch;\n      if (filterBy === \"independent\") return matchesSearch && conversation.type === \"independent\";\n      if (filterBy === \"collection\") return matchesSearch && conversation.type === \"collection\";\n      \n      return matchesSearch;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"title\":\n          return a.title.localeCompare(b.title);\n        case \"messages\":\n          return b.messageCount - a.messageCount;\n        case \"recent\":\n        default:\n          return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n      }\n    });\n\n  const handleNewChat = () => {\n    setSelectedCollectionId(undefined);\n    setLocation(\"/\");\n  };\n\n  const handleCreateConversation = () => {\n    // Navigate to dashboard for new chat, same as sidebar New Chat button\n    setLocation(\"/\");\n  };\n\n  const getCollectionName = (collectionId?: number) => {\n    if (!collectionId) return null;\n    const collection = collections.find(c => c.id === collectionId);\n    return collection?.name;\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"Unknown date\";\n    \n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return \"Invalid date\";\n    \n    const now = new Date();\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n    \n    if (diffInHours < 24) {\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    } else if (diffInHours < 168) { // 7 days\n      return date.toLocaleDateString([], { weekday: 'short' });\n    } else {\n      return date.toLocaleDateString([], { month: 'short', day: 'numeric' });\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar \n        selectedCollectionId={selectedCollectionId}\n        onSelectCollection={setSelectedCollectionId}\n        onNewChat={handleNewChat}\n      />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden bg-gray-50\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-gray-200 px-6 py-4 flex-shrink-0\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-xl font-semibold text-gray-900\">Conversations</h1>\n              <p className=\"text-sm text-gray-600\">All your AI conversations in one place</p>\n            </div>\n            <Button\n              onClick={handleCreateConversation}\n              className=\"bg-primary hover:bg-primary/90 text-white\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Conversation\n            </Button>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <div className=\"flex-1 overflow-auto px-6 py-6\">\n          {/* Search and Filters */}\n          <div className=\"mb-6 flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative max-w-md\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search conversations...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-80\"\n                />\n              </div>\n              <Select value={filterBy} onValueChange={setFilterBy}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"independent\">Independent</SelectItem>\n                  <SelectItem value=\"collection\">Collection-based</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"recent\">Recently Updated</SelectItem>\n                  <SelectItem value=\"title\">Title (A-Z)</SelectItem>\n                  <SelectItem value=\"messages\">Most Messages</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* View Toggle */}\n            <div className=\"flex items-center space-x-2 bg-gray-100 rounded-lg p-1\">\n              <Button\n                variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"grid\")}\n                className={`${\n                  viewMode === \"grid\" \n                    ? \"bg-white shadow-sm\" \n                    : \"text-gray-600 hover:text-gray-900\"\n                }`}\n              >\n                <Grid3X3 className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n                className={`${\n                  viewMode === \"list\" \n                    ? \"bg-white shadow-sm\" \n                    : \"text-gray-600 hover:text-gray-900\"\n                }`}\n              >\n                <List className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Conversations Display */}\n          {filteredConversations.length > 0 ? (\n            viewMode === \"grid\" ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredConversations.map((conversation) => (\n                  <ConversationCard key={conversation.id} conversation={conversation} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredConversations.map((conversation) => (\n                  <Card key={conversation.id} className=\"hover:shadow-md transition-shadow cursor-pointer\"\n                        onClick={() => setLocation(`/conversations/${conversation.id}`)}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4 flex-1 min-w-0\">\n                          <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-green-500 to-teal-600 flex items-center justify-center flex-shrink-0\">\n                            <MessageSquare className=\"w-5 h-5 text-white\" />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <h3 className=\"text-sm font-semibold text-gray-900 truncate\">\n                                {conversation.title}\n                              </h3>\n                              <Badge \n                                variant={conversation.type === \"collection\" ? \"default\" : \"secondary\"}\n                                className=\"text-xs\"\n                              >\n                                {conversation.type === \"collection\" ? \"Collection\" : \"Independent\"}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-gray-600 line-clamp-1 mb-2\">\n                              {conversation.preview}\n                            </p>\n                            <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                              <span className=\"flex items-center\">\n                                <MessageSquare className=\"w-3 h-3 mr-1\" />\n                                {conversation.messageCount} messages\n                              </span>\n                              <span className=\"flex items-center\">\n                                <Clock className=\"w-3 h-3 mr-1\" />\n                                {formatDate(conversation.updatedAt)}\n                              </span>\n                              {conversation.collectionId && (\n                                <span className=\"text-blue-600\">\n                                  {getCollectionName(conversation.collectionId)}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setLocation(`/conversations/${conversation.id}`);\n                            }}\n                          >\n                            Open\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <MessageSquare className=\"w-12 h-12 text-gray-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {searchTerm ? \"No conversations found\" : \"No conversations yet\"}\n              </h3>\n              <p className=\"text-gray-600 mb-6\">\n                {searchTerm \n                  ? \"Try adjusting your search terms or filters\" \n                  : \"Start your first conversation to begin organizing your knowledge\"\n                }\n              </p>\n              {!searchTerm && (\n                <Button\n                  onClick={handleCreateConversation}\n                  className=\"bg-primary hover:bg-primary/90 text-white\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Start Conversation\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":11808},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Lightbulb, Search, FileText, Code, Calculator, MessageSquare } from \"lucide-react\";\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { ChatInput } from \"@/components/chat-input\";\nimport { ConversationCard } from \"@/components/conversation-card\";\nimport { useConversations, useCreateConversation } from \"@/hooks/use-conversations\";\nimport { useCollections } from \"@/hooks/use-collections\";\nimport { useArtifacts } from \"@/hooks/use-artifacts\";\nimport { Analytics } from \"@/lib/analytics\";\nimport { usePageView, useTrackAction } from \"@/hooks/usePostHog\";\nimport { AdminTestButton } from \"@/components/admin/AdminTestButton\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const [selectedCollectionId, setSelectedCollectionId] = useState<number | undefined>();\n  const { data: conversations = [] } = useConversations();\n  const { data: collections = [] } = useCollections();\n  const { data: artifacts = [] } = useArtifacts();\n  const createConversation = useCreateConversation();\n  const trackAction = useTrackAction();\n\n  // Track page view using PostHog React SDK\n  usePageView('dashboard');\n\n  // Also track using the Analytics service for compatibility\n  useEffect(() => {\n    Analytics.trackPageView('dashboard');\n  }, []);\n\n  const selectedCollection = collections.find(c => c.id === selectedCollectionId);\n  const recentConversations = conversations.slice(0, 6);\n\n  const handleCollectionSelect = (collectionId: number | undefined) => {\n    setSelectedCollectionId(collectionId);\n    if (collectionId) {\n      const collection = collections.find(c => c.id === collectionId);\n      if (collection) {\n        Analytics.trackCollectionSelected(collectionId, collection.name);\n      }\n    }\n  };\n\n  const handleSendMessage = async (message: string, attachments?: File[]) => {\n    const conversationType = selectedCollectionId ? \"collection\" : \"independent\";\n    \n    createConversation.mutate(\n      {\n        message,\n        type: conversationType,\n        collectionId: selectedCollectionId,\n        attachments,\n      },\n      {\n        onSuccess: (data) => {\n          setLocation(`/conversations/${data.conversation.id}`);\n        },\n      }\n    );\n  };\n\n  const handleNewChat = () => {\n    setSelectedCollectionId(undefined);\n  };\n\n  const handleQuickAction = (action: string) => {\n    const prompts = {\n      \"Get Ideas\": \"I need some creative ideas and suggestions. Can you help me brainstorm?\",\n      \"Search Knowledge\": \"Help me search and find information from my knowledge base.\",\n      \"Analyze Document\": \"I'd like to analyze and get insights from my documents.\"\n    };\n    \n    // Track with both Analytics service and PostHog hooks\n    Analytics.trackQuickAction(action);\n    trackAction('quick_action_clicked', {\n      action,\n      location: 'dashboard'\n    });\n    \n    if (prompts[action as keyof typeof prompts]) {\n      handleSendMessage(prompts[action as keyof typeof prompts]);\n    }\n  };\n\n  const quickActions = [\n    { icon: Lightbulb, label: \"Get Ideas\", color: \"text-yellow-500\", action: \"Get Ideas\" },\n    { icon: Search, label: \"Search Knowledge\", color: \"text-blue-500\", action: \"Search Knowledge\" },\n    { icon: FileText, label: \"Analyze Document\", color: \"text-green-500\", action: \"Analyze Document\" },\n  ];\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar \n        selectedCollectionId={selectedCollectionId}\n        onSelectCollection={handleCollectionSelect}\n        onNewChat={handleNewChat}\n      />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"max-w-4xl mx-auto w-full p-6 min-h-full\">\n          \n          {/* Context Indicator */}\n          {selectedCollection && (\n            <div className=\"mb-6\">\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 bg-blue-500 rounded\" />\n                  <span className=\"text-sm font-medium text-blue-900\">\n                    Chatting with collection:\n                  </span>\n                  <span className=\"text-sm text-blue-700\">{selectedCollection.name}</span>\n                  <Button\n                    onClick={() => setSelectedCollectionId(undefined)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"ml-auto h-6 w-6 p-0 text-blue-400 hover:text-blue-600\"\n                  >\n                    Ã—\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Welcome/Centered Chat */}\n          <div className=\"flex flex-col items-center space-y-8 py-8\">\n            \n            {/* Welcome Message */}\n            <div className=\"text-center max-w-2xl\">\n              <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-24 h-24 mx-auto mb-6\" />\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-3\">Welcome to SnappyLearn</h1>\n              <p className=\"text-lg text-gray-600 mb-8\">\n                Your AI-powered knowledge companion. Start a conversation or explore your collections.\n              </p>\n              <AdminTestButton />\n            </div>\n\n            {/* Centered Chat Input */}\n            <ChatInput\n              onSend={handleSendMessage}\n              disabled={createConversation.isPending}\n              placeholder={\n                selectedCollection\n                  ? `Ask about ${selectedCollection.name}...`\n                  : \"Ask me anything or select a collection for context-specific answers...\"\n              }\n            />\n\n            {/* Quick Actions */}\n            <div className=\"flex flex-wrap gap-3 justify-center\">\n              {quickActions.map((action, index) => (\n                <Button \n                  key={index} \n                  variant=\"outline\" \n                  className=\"px-4 py-2\"\n                  onClick={() => handleQuickAction(action.action)}\n                  disabled={createConversation.isPending}\n                >\n                  <action.icon className={`w-4 h-4 mr-2 ${action.color}`} />\n                  {action.label}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Recent Conversations Grid */}\n          {recentConversations.length > 0 && (\n            <div className=\"mt-8\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Recent Conversations</h2>\n                <Button \n                  variant=\"ghost\" \n                  onClick={() => setLocation(\"/conversations\")}\n                  className=\"text-primary hover:text-primary/80\"\n                >\n                  View All\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {recentConversations.map((conversation) => (\n                  <ConversationCard key={conversation.id} conversation={conversation} />\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7398},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { FileText, MessageSquare, Shield, Github, Mail } from \"lucide-react\";\nimport { SiGoogle, SiFacebook, SiX } from \"react-icons/si\";\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\nconst snappyLearnIcon = \"/snappylearn-icon.png\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Landing() {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleOAuthLogin = (provider: string) => {\n    window.location.href = `/api/auth/${provider}`;\n  };\n\n  const handleEmailLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password\n        }),\n        credentials: 'include'\n      });\n\n      if (response.ok) {\n        window.location.href = '/';\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: \"Invalid email or password\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleEmailRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData),\n        credentials: 'include'\n      });\n\n      if (response.ok) {\n        window.location.href = '/';\n      } else {\n        const data = await response.json();\n        toast({\n          title: \"Registration Failed\",\n          description: data.message || \"Something went wrong\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Registration Failed\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex flex-col items-center justify-center mb-6\">\n            <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"h-20 w-auto mb-4\" />\n            <h1 className=\"text-4xl font-bold text-gray-900\">SnappyLearn</h1>\n          </div>\n          <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n            Your intelligent document management and AI chat platform. \n            Upload documents, create collections, and chat with AI about your content.\n          </p>\n        </div>\n\n        {/* Authentication Section */}\n        <div className=\"max-w-md mx-auto mb-16\">\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle>Get Started</CardTitle>\n              <CardDescription>Sign in to access your AI-powered workspace</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"oauth\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"oauth\">Quick Sign In</TabsTrigger>\n                  <TabsTrigger value=\"email\">Email</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"oauth\" className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <Button \n                      onClick={() => handleOAuthLogin('replit')}\n                      className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                      size=\"lg\"\n                    >\n                      <img src={snappyLearnIcon} alt=\"SnappyLearn\" className=\"w-5 h-5 mr-2\" />\n                      Continue with Replit\n                    </Button>\n                    \n                    <Button \n                      onClick={() => handleOAuthLogin('google')}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      size=\"lg\"\n                    >\n                      <SiGoogle className=\"w-5 h-5 mr-2\" />\n                      Continue with Google\n                    </Button>\n                    \n                    <Button \n                      onClick={() => handleOAuthLogin('github')}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      size=\"lg\"\n                    >\n                      <Github className=\"w-5 h-5 mr-2\" />\n                      Continue with GitHub\n                    </Button>\n                    \n                    <Button \n                      onClick={() => handleOAuthLogin('facebook')}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      size=\"lg\"\n                    >\n                      <SiFacebook className=\"w-5 h-5 mr-2\" />\n                      Continue with Facebook\n                    </Button>\n                    \n                    <Button \n                      onClick={() => handleOAuthLogin('twitter')}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      size=\"lg\"\n                    >\n                      <SiX className=\"w-5 h-5 mr-2\" />\n                      Continue with Twitter\n                    </Button>\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"email\" className=\"space-y-4\">\n                  <Tabs defaultValue=\"login\">\n                    <TabsList className=\"grid w-full grid-cols-2\">\n                      <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                      <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n                    </TabsList>\n                    \n                    <TabsContent value=\"login\">\n                      <form onSubmit={handleEmailLogin} className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"login-email\">Email</Label>\n                          <Input\n                            id=\"login-email\"\n                            type=\"email\"\n                            value={formData.email}\n                            onChange={(e) => setFormData({...formData, email: e.target.value})}\n                            required\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"login-password\">Password</Label>\n                          <Input\n                            id=\"login-password\"\n                            type=\"password\"\n                            value={formData.password}\n                            onChange={(e) => setFormData({...formData, password: e.target.value})}\n                            required\n                          />\n                        </div>\n                        <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                          <Mail className=\"w-4 h-4 mr-2\" />\n                          {isLoading ? 'Signing In...' : 'Sign In'}\n                        </Button>\n                      </form>\n                    </TabsContent>\n                    \n                    <TabsContent value=\"register\">\n                      <form onSubmit={handleEmailRegister} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"firstName\">First Name</Label>\n                            <Input\n                              id=\"firstName\"\n                              value={formData.firstName}\n                              onChange={(e) => setFormData({...formData, firstName: e.target.value})}\n                              required\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"lastName\">Last Name</Label>\n                            <Input\n                              id=\"lastName\"\n                              value={formData.lastName}\n                              onChange={(e) => setFormData({...formData, lastName: e.target.value})}\n                              required\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"register-email\">Email</Label>\n                          <Input\n                            id=\"register-email\"\n                            type=\"email\"\n                            value={formData.email}\n                            onChange={(e) => setFormData({...formData, email: e.target.value})}\n                            required\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"register-password\">Password</Label>\n                          <Input\n                            id=\"register-password\"\n                            type=\"password\"\n                            value={formData.password}\n                            onChange={(e) => setFormData({...formData, password: e.target.value})}\n                            required\n                            minLength={8}\n                          />\n                        </div>\n                        <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                          <Mail className=\"w-4 h-4 mr-2\" />\n                          {isLoading ? 'Creating Account...' : 'Create Account'}\n                        </Button>\n                      </form>\n                    </TabsContent>\n                  </Tabs>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-3 gap-8 mb-16\">\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <FileText className=\"w-8 h-8 text-blue-600 mb-2\" />\n              <CardTitle>Document Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CardDescription>\n                Upload and organize your documents into smart collections. \n                Support for PDFs, text files, and more.\n              </CardDescription>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <MessageSquare className=\"w-8 h-8 text-green-600 mb-2\" />\n              <CardTitle>AI Chat Assistant</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CardDescription>\n                Chat with AI about your documents. Get summaries, \n                ask questions, and discover insights from your content.\n              </CardDescription>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <Shield className=\"w-8 h-8 text-purple-600 mb-2\" />\n              <CardTitle>Secure & Private</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CardDescription>\n                Your data is secure and private. All conversations \n                and documents are protected with enterprise-grade security.\n              </CardDescription>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center text-gray-600\">\n          <p>Â© 2025 SnappyLearn. Your intelligent knowledge companion.</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12501},"client/src/pages/modern-landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowRight, Check, FileText, MessageCircle, Search, Zap, Shield, BarChart3, Users, Globe, Sparkles } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { SignUpForm } from \"@/components/auth/SignUpForm\";\n\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\n\nexport default function ModernLanding() {\n  const [showSignUp, setShowSignUp] = useState(false);\n\n  const handleGetStarted = () => {\n    setShowSignUp(true);\n  };\n\n  const handleSignIn = () => {\n    window.location.href = \"/auth\";\n  };\n\n  if (showSignUp) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"w-20 h-20 mx-auto mb-4\">\n              <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-full h-full object-contain\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">SnappyLearn</h1>\n            <p className=\"text-gray-600 mt-2\">\n              Your AI-powered knowledge companion\n            </p>\n          </div>\n          <SignUpForm \n            onToggleMode={() => window.location.href = \"/auth\"} \n            onBackToHome={() => setShowSignUp(false)}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header */}\n      <header className=\"border-b bg-white/80 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-8 h-8\" />\n              <span className=\"text-xl font-bold text-gray-900\">SnappyLearn</span>\n            </div>\n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#features\" className=\"text-gray-600 hover:text-gray-900\">Features</a>\n              <a href=\"#how-it-works\" className=\"text-gray-600 hover:text-gray-900\">How It Works</a>\n              <a href=\"#pricing\" className=\"text-gray-600 hover:text-gray-900\">Pricing</a>\n            </nav>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" onClick={handleSignIn}>Sign In</Button>\n              <Button onClick={handleGetStarted} className=\"bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white\">\n                Get Started\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-br from-indigo-50 via-white to-purple-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge className=\"mb-6 bg-purple-100 text-purple-800 border-purple-200\">\n              ðŸš€ AI-Powered Learning Platform\n            </Badge>\n            <h1 className=\"text-5xl md:text-6xl font-bold text-gray-900 mb-6\">\n              Your AI-Powered <br />\n              <span className=\"bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent\">\n                Knowledge Companion\n              </span>\n            </h1>\n            <p className=\"text-xl text-gray-600 mb-8 max-w-2xl mx-auto\">\n              Upload your documents, organize them in smart collections, and chat with an AI that understands your content. \n              Turn any document into an interactive learning experience.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                onClick={handleGetStarted} \n                size=\"lg\" \n                className=\"bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white px-8 py-3\"\n              >\n                Get Started Free\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" className=\"px-8 py-3\">\n                Watch Demo\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Everything you need to learn smarter\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              SnappyLearn combines document management, AI chat, and conversation history to transform how you interact with your knowledge.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4\">\n                  <FileText className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <CardTitle>Smart Collections</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Organize your documents into smart collections. Upload PDFs, text files, and attachments with automatic content extraction for AI analysis.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center mb-4\">\n                  <MessageCircle className=\"w-6 h-6 text-indigo-600\" />\n                </div>\n                <CardTitle>Conversational AI</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Chat naturally with your documents using GPT-4. Ask questions, get insights, and receive answers with source citations from your uploaded content.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Search className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <CardTitle>Intelligent Search</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Find relevant content across all your documents based on meaning, not just keywords. AI understands context to surface the most relevant information.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Zap className=\"w-6 h-6 text-yellow-600\" />\n                </div>\n                <CardTitle>Fast & Reliable</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Built for speed with optimized performance. Handle large document collections with ease.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Shield className=\"w-6 h-6 text-red-600\" />\n                </div>\n                <CardTitle>Secure & Private</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Your data stays secure with enterprise-grade encryption and privacy controls.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4\">\n                  <BarChart3 className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <CardTitle>Conversation History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Keep track of all your conversations with the AI. Resume previous discussions and build on past insights across your document collections.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section id=\"how-it-works\" className=\"py-20 bg-gray-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Start learning smarter in minutes\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              From document upload to AI-powered insights in three simple steps\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-2xl font-bold text-white\">1</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Create Collections</h3>\n              <p className=\"text-gray-600\">\n                Organize your documents into smart collections. Upload PDFs, text files, and attachments with drag-and-drop ease.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-indigo-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-2xl font-bold text-white\">2</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Start Conversations</h3>\n              <p className=\"text-gray-600\">\n                Begin chatting with your documents or have independent conversations. The AI understands context from your uploaded content.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-2xl font-bold text-white\">3</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Get Insights</h3>\n              <p className=\"text-gray-600\">\n                Ask questions, get detailed answers with source citations, and build on previous conversations to deepen your understanding.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 bg-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Simple, transparent pricing\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Start for free, then scale as you grow your knowledge base\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            <Card className=\"border-2 border-gray-200\">\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">Free</CardTitle>\n                <CardDescription>Perfect for personal use</CardDescription>\n                <div className=\"text-4xl font-bold text-gray-900 mt-4\">\n                  $0<span className=\"text-lg font-normal text-gray-600\">/month</span>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Up to 10 documents</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Basic AI chat</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">1 collection</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Community support</span>\n                  </li>\n                </ul>\n                <Button className=\"w-full mt-6\" variant=\"outline\" onClick={handleGetStarted}>\n                  Get Started Free\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-purple-500 relative\">\n              <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                <Badge className=\"bg-purple-600 text-white\">Most Popular</Badge>\n              </div>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">Pro</CardTitle>\n                <CardDescription>For power users and professionals</CardDescription>\n                <div className=\"text-4xl font-bold text-gray-900 mt-4\">\n                  $19<span className=\"text-lg font-normal text-gray-600\">/month</span>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Up to 1,000 documents</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Advanced AI chat</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Unlimited collections</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Priority support</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Analytics dashboard</span>\n                  </li>\n                </ul>\n                <Button className=\"w-full mt-6 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white\" onClick={handleGetStarted}>\n                  Start Pro Trial\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-gray-200\">\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">Enterprise</CardTitle>\n                <CardDescription>For teams and organizations</CardDescription>\n                <div className=\"text-4xl font-bold text-gray-900 mt-4\">\n                  Custom\n                </div>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Unlimited documents</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Custom AI models</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Team collaboration</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">Dedicated support</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-5 h-5 text-green-600 mr-2\" />\n                    <span className=\"text-gray-700\">SSO integration</span>\n                  </li>\n                </ul>\n                <Button className=\"w-full mt-6\" variant=\"outline\">\n                  Contact Sales\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-purple-600 to-indigo-600 text-white\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Ready to enhance your learning experience?\n          </h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto\">\n            Join thousands of learners who are already using SnappyLearn to unlock the power of their documents.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              onClick={handleGetStarted} \n              size=\"lg\" \n              className=\"bg-white text-purple-600 hover:bg-gray-100 px-8 py-3\"\n            >\n              Get Started Free\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Button>\n            <Button variant=\"outline\" size=\"lg\" className=\"border-white text-white hover:bg-white hover:text-purple-600 px-8 py-3\">\n              View Documentation\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-8 h-8\" />\n                <span className=\"text-xl font-bold\">SnappyLearn</span>\n              </div>\n              <p className=\"text-gray-400\">\n                Building intelligent learning experiences with AI\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Product</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#features\" className=\"hover:text-white\">Features</a></li>\n                <li><a href=\"#pricing\" className=\"hover:text-white\">Pricing</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Use Cases</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Integrations</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Resources</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white\">Documentation</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">API Reference</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Tutorials</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Blog</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white\">About</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Contact</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Careers</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Privacy</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2025 SnappyLearn, Inc. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":21046},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/simple-landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MessageSquare, FileText, Zap } from \"lucide-react\";\nconst snappyLearnLogo = \"/snappylearn-transparent-logo.png\";\n\nexport default function SimpleLanding() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-16\">\n          <div className=\"mb-6\">\n            <img \n              src={snappyLearnLogo} \n              alt=\"SnappyLearn Logo\" \n              className=\"h-20 w-auto mx-auto\"\n            />\n          </div>\n          <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n            SnappyLearn\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-2xl mx-auto\">\n            Your intelligent knowledge management platform. Upload documents, create collections, and chat with AI about your content.\n          </p>\n          \n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle>Get Started</CardTitle>\n              <CardDescription>\n                Sign in to access your personal document collections and AI assistant\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                onClick={() => window.location.href = '/api/login'}\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                Sign in with Replit\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-6xl mx-auto\">\n          <Card>\n            <CardHeader>\n              <FileText className=\"w-8 h-8 text-blue-600 mb-2\" />\n              <CardTitle className=\"text-lg\">Document Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Upload and organize your documents into collections for easy access and management.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <img src={snappyLearnLogo} alt=\"SnappyLearn\" className=\"w-8 h-8 mb-2\" />\n              <CardTitle className=\"text-lg\">AI-Powered Chat</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Chat with AI about your documents. Get insights, summaries, and answers from your content.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <MessageSquare className=\"w-8 h-8 text-green-600 mb-2\" />\n              <CardTitle className=\"text-lg\">Smart Conversations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Maintain conversation history and context across multiple chat sessions.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <Zap className=\"w-8 h-8 text-yellow-600 mb-2\" />\n              <CardTitle className=\"text-lg\">Instant Search</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Quickly find information across all your documents with intelligent search.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3716},"client/src/providers/GoogleOAuthProvider.tsx":{"content":"import { GoogleOAuthProvider } from '@react-oauth/google';\n\ninterface GoogleOAuthWrapperProps {\n  children: React.ReactNode;\n}\n\nexport function GoogleOAuthWrapper({ children }: GoogleOAuthWrapperProps) {\n  const clientId = import.meta.env.VITE_GOOGLE_CLIENT_ID;\n  \n  console.log('Google OAuth client ID:', clientId);\n  \n  if (!clientId || clientId === 'your_google_client_id_here' || clientId === 'undefined') {\n    // Return children without Google OAuth if not configured\n    console.log('Google OAuth not configured, falling back to regular auth');\n    return <>{children}</>;\n  }\n\n  return (\n    <GoogleOAuthProvider clientId={clientId}>\n      {children}\n    </GoogleOAuthProvider>\n  );\n}","size_bytes":692},"client/src/components/auth/AuthPage.tsx":{"content":"import { useState } from 'react'\nimport { LoginForm } from './LoginForm'\nimport { SignUpForm } from './SignUpForm'\n// import snappyLearnLogo from '@assets/snappylearn-logo-transparent.png'\n\ninterface AuthPageProps {\n  embedded?: boolean;\n}\n\nexport function AuthPage({ embedded = false }: AuthPageProps) {\n  const [isSignUp, setIsSignUp] = useState(false)\n\n  if (embedded) {\n    // Embedded version for landing page - no full page wrapper\n    return (\n      <div className=\"w-full space-y-6\">\n        {isSignUp ? (\n          <SignUpForm onToggleMode={() => setIsSignUp(false)} />\n        ) : (\n          <LoginForm onToggleMode={() => setIsSignUp(true)} />\n        )}\n      </div>\n    )\n  }\n\n  // Full page version\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"w-20 h-20 mx-auto mb-4\">\n            <img src=\"/snappylearn-transparent-logo.png\" alt=\"SnappyLearn\" className=\"w-full h-full object-contain\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">SnappyLearn</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Your AI-powered knowledge companion\n          </p>\n        </div>\n\n        {isSignUp ? (\n          <SignUpForm onToggleMode={() => setIsSignUp(false)} />\n        ) : (\n          <LoginForm onToggleMode={() => setIsSignUp(true)} />\n        )}\n      </div>\n    </div>\n  )\n}","size_bytes":1532},"client/src/components/auth/GoogleSignInButton.tsx":{"content":"import { useGoogleLogin } from '@react-oauth/google';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { FcGoogle } from 'react-icons/fc';\nimport { useState } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { Analytics } from '@/lib/analytics';\n\ninterface GoogleSignInButtonProps {\n  text?: string;\n  className?: string;\n}\n\nexport function GoogleSignInButton({ text = \"Continue with Google\", className = \"\" }: GoogleSignInButtonProps) {\n  const { signInWithGoogle } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleGoogleLogin = useGoogleLogin({\n    onSuccess: async (tokenResponse) => {\n      setIsLoading(true);\n      \n      try {\n        // Get user info from Google\n        const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n          headers: { Authorization: `Bearer ${tokenResponse.access_token}` }\n        });\n        \n        if (!userInfoResponse.ok) {\n          throw new Error('Failed to fetch user info from Google');\n        }\n        \n        const userInfo = await userInfoResponse.json();\n        \n        // Create a JWT-like credential object for our backend\n        // Our backend expects a JWT format with header.payload.signature\n        const header = btoa(JSON.stringify({\n          alg: \"RS256\",\n          kid: \"a43429e8b13f5e0d7a5975d45475df28aa221b25\",\n          typ: \"JWT\"\n        }));\n        \n        const payload = btoa(JSON.stringify({\n          iss: \"accounts.google.com\",\n          azp: import.meta.env.VITE_GOOGLE_CLIENT_ID,\n          aud: import.meta.env.VITE_GOOGLE_CLIENT_ID,\n          sub: userInfo.sub,\n          email: userInfo.email,\n          email_verified: true,\n          at_hash: \"eRyF8DbPQlA1HEEK5ECbUA\",\n          name: userInfo.name,\n          picture: userInfo.picture,\n          given_name: userInfo.given_name,\n          family_name: userInfo.family_name,\n          locale: userInfo.locale || \"en\",\n          iat: Math.floor(Date.now() / 1000),\n          exp: Math.floor(Date.now() / 1000) + 3600,\n          jti: \"a1b2c3d4e5f6g7h8i9j0k1l2\"\n        }));\n        \n        const credential = `${header}.${payload}.dummy_signature`;\n        \n        const result = await signInWithGoogle(credential);\n        \n        if (result.error) {\n          toast({\n            title: \"Sign-in Failed\",\n            description: result.error.message,\n            variant: \"destructive\",\n          });\n        } else {\n          Analytics.trackSignIn('google', userInfo.sub);\n          toast({\n            title: \"Welcome!\",\n            description: \"Successfully signed in with Google\",\n          });\n        }\n      } catch (error) {\n        console.error('Google sign-in error:', error);\n        Analytics.trackError('Google sign-in failed', { error: error.message });\n        toast({\n          title: \"Sign-in Failed\",\n          description: \"Failed to sign in with Google. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    onError: (error) => {\n      console.error('Google OAuth error:', error);\n      Analytics.trackError('Google OAuth error', { error });\n      toast({\n        title: \"Sign-in Failed\",\n        description: \"Google authentication failed. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Check if Google OAuth is configured\n  const isGoogleConfigured = import.meta.env.VITE_GOOGLE_CLIENT_ID && \n                            import.meta.env.VITE_GOOGLE_CLIENT_ID !== 'your_google_client_id_here' &&\n                            import.meta.env.VITE_GOOGLE_CLIENT_ID !== 'undefined' &&\n                            import.meta.env.VITE_GOOGLE_CLIENT_ID !== '';\n\n  console.log('Google OAuth configured:', isGoogleConfigured, 'Client ID:', import.meta.env.VITE_GOOGLE_CLIENT_ID);\n\n  if (!isGoogleConfigured) {\n    return null; // Don't render if Google OAuth is not configured\n  }\n\n  return (\n    <Button\n      type=\"button\"\n      variant=\"outline\"\n      onClick={() => handleGoogleLogin()}\n      disabled={isLoading}\n      className={`w-full ${className}`}\n    >\n      {isLoading ? (\n        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary mr-2\"></div>\n      ) : (\n        <FcGoogle className=\"mr-2 h-4 w-4\" />\n      )}\n      {isLoading ? 'Signing in...' : text}\n    </Button>\n  );\n}\n\nexport function GoogleSignUpButton() {\n  return (\n    <GoogleSignInButton \n      text=\"Sign up with Google\" \n      className=\"mb-4\"\n    />\n  );\n}","size_bytes":4602},"client/src/components/auth/LoginForm.tsx":{"content":"import { useState } from 'react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { useToast } from '@/hooks/use-toast'\nimport { Loader2 } from 'lucide-react'\nimport { GoogleSignInButton } from './GoogleSignInButton'\nimport { Separator } from '@/components/ui/separator'\n\ninterface LoginFormProps {\n  onToggleMode: () => void\n}\n\nexport function LoginForm({ onToggleMode }: LoginFormProps) {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const { signIn } = useAuth()\n  const { toast } = useToast()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      const { error } = await signIn(email, password)\n      \n      if (error) {\n        toast({\n          title: \"Sign in failed\",\n          description: error.message,\n          variant: \"destructive\",\n        })\n      } else {\n        toast({\n          title: \"Welcome back!\",\n          description: \"You've successfully signed in.\",\n        })\n      }\n    } catch (error) {\n      toast({\n        title: \"An error occurred\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle>Sign In</CardTitle>\n        <CardDescription>\n          Enter your email and password to access your account\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <GoogleSignInButton />\n        \n        <div className=\"relative my-4\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <Separator />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-background px-2 text-muted-foreground\">\n              Or continue with email\n            </span>\n          </div>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Enter your password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n          </div>\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Signing in...\n              </>\n            ) : (\n              'Sign In'\n            )}\n          </Button>\n        </form>\n        <div className=\"mt-4 text-center text-sm\">\n          Don't have an account?{' '}\n          <button\n            onClick={onToggleMode}\n            className=\"text-primary hover:underline\"\n          >\n            Sign up\n          </button>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}","size_bytes":3598},"client/src/components/auth/SignUpForm.tsx":{"content":"import { useState } from 'react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { useToast } from '@/hooks/use-toast'\nimport { Loader2 } from 'lucide-react'\nimport { GoogleSignUpButton } from './GoogleSignInButton'\nimport { Separator } from '@/components/ui/separator'\n\ninterface SignUpFormProps {\n  onToggleMode: () => void\n  onBackToHome?: () => void\n}\n\nexport function SignUpForm({ onToggleMode, onBackToHome }: SignUpFormProps) {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [confirmPassword, setConfirmPassword] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const { signUp } = useAuth()\n  const { toast } = useToast()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    if (password !== confirmPassword) {\n      toast({\n        title: \"Passwords don't match\",\n        description: \"Please make sure both passwords are identical.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    if (password.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setIsLoading(true)\n\n    try {\n      const { error } = await signUp(email, password)\n      \n      if (error) {\n        toast({\n          title: \"Sign up failed\",\n          description: error.message,\n          variant: \"destructive\",\n        })\n      } else {\n        toast({\n          title: \"Account created successfully!\",\n          description: \"You can now sign in with your email and password.\",\n        })\n        // After successful signup, switch to login form\n        setTimeout(() => {\n          onToggleMode();\n        }, 1500);\n      }\n    } catch (error) {\n      toast({\n        title: \"An error occurred\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle>Create Account</CardTitle>\n        <CardDescription>\n          Enter your email and password to create a new account\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <GoogleSignUpButton />\n        \n        <div className=\"relative my-4\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <Separator />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-background px-2 text-muted-foreground\">\n              Or continue with email\n            </span>\n          </div>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Create a password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              placeholder=\"Confirm your password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              required\n            />\n          </div>\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Creating account...\n              </>\n            ) : (\n              'Create Account'\n            )}\n          </Button>\n        </form>\n        <div className=\"mt-4 text-center text-sm space-y-2\">\n          <div>\n            Already have an account?{' '}\n            <button\n              onClick={onToggleMode}\n              className=\"text-primary hover:underline\"\n            >\n              Sign in\n            </button>\n          </div>\n          {onBackToHome && (\n            <div>\n              <button\n                onClick={onBackToHome}\n                className=\"text-gray-600 hover:text-gray-800 underline\"\n              >\n                Back to Homepage\n              </button>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}","size_bytes":5075},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/usePostHog.ts":{"content":"// Custom PostHog hook for SnappyLearn\nimport { useEffect, useRef } from 'react';\nimport posthog from 'posthog-js';\n\nexport function usePostHog() {\n  const postHogRef = useRef(posthog);\n  \n  useEffect(() => {\n    // Ensure PostHog is initialized\n    if (!postHogRef.current) {\n      postHogRef.current = posthog;\n    }\n  }, []);\n\n  return postHogRef.current;\n}\n\n// Hook for tracking page views\nexport function usePageView(pageName: string) {\n  const posthog = usePostHog();\n  \n  useEffect(() => {\n    if (posthog) {\n      posthog.capture('page_view', {\n        page_name: pageName,\n        path: window.location.pathname,\n      });\n    }\n  }, [posthog, pageName]);\n}\n\n// Hook for tracking user actions\nexport function useTrackAction() {\n  const posthog = usePostHog();\n  \n  return (action: string, properties?: any) => {\n    if (posthog) {\n      posthog.capture(action, properties);\n    }\n  };\n}","size_bytes":895}}}